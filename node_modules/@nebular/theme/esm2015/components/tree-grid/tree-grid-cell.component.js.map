{"version":3,"file":"tree-grid-cell.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tree-grid/tree-grid-cell.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Inject,\n  OnInit,\n  OnDestroy,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nimport { NbLayoutDirectionService } from '../../services/direction.service';\nimport { NB_WINDOW } from '../../theme.options';\nimport { NbCellDirective, NbFooterCellDirective, NbHeaderCellDirective } from '../cdk/table/cell';\nimport { NbCdkCell, NbCdkFooterCell, NbCdkHeaderCell } from '../cdk/table/type-mappings';\nimport { NB_TREE_GRID } from './tree-grid-injection-tokens';\nimport { NbTreeGridComponent } from './tree-grid.component';\nimport { NbTreeGridColumnDefDirective } from './tree-grid-column-def.directive';\nimport { NB_DEFAULT_ROW_LEVEL } from './data-source/tree-grid.model';\nimport { NbColumnsService } from './tree-grid-columns.service';\n\n@Directive({\n  selector: 'td[nbTreeGridCell]',\n  host: {\n    'class': 'nb-tree-grid-cell',\n    'role': 'gridcell',\n  },\n  providers: [{ provide: NbCdkCell, useExisting: NbTreeGridCellDirective }],\n})\nexport class NbTreeGridCellDirective extends NbCellDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private readonly tree: NbTreeGridComponent<any>;\n  private readonly columnDef: NbTreeGridColumnDefDirective;\n  private initialLeftPadding: string = '';\n  private initialRightPadding: string = '';\n  private latestWidth: string;\n  elementRef: ElementRef<HTMLElement>;\n\n  @HostBinding('style.width')\n  get columnWidth(): string {\n    this.latestWidth = this.tree.getColumnWidth();\n    if (this.latestWidth) {\n      return this.latestWidth;\n    }\n\n    return null;\n  }\n\n  @HostBinding('style.padding-left')\n  get leftPadding(): string | SafeStyle | null {\n    if (this.directionService.isLtr()) {\n      return this.getStartPadding();\n    }\n    return null;\n  }\n\n  @HostBinding('style.padding-right')\n  get rightPadding(): string | SafeStyle | null {\n    if (this.directionService.isRtl()) {\n      return this.getStartPadding();\n    }\n    return null;\n  }\n\n  constructor(\n    columnDef: NbTreeGridColumnDefDirective,\n    elementRef: ElementRef<HTMLElement>,\n    @Inject(NB_TREE_GRID) tree,\n    @Inject(PLATFORM_ID) private platformId,\n    @Inject(NB_WINDOW) private window,\n    private sanitizer: DomSanitizer,\n    private directionService: NbLayoutDirectionService,\n    private columnService: NbColumnsService,\n    private cd: ChangeDetectorRef,\n  ) {\n    super(columnDef, elementRef);\n    this.tree = tree as NbTreeGridComponent<any>;\n    this.columnDef = columnDef;\n    this.elementRef = elementRef;\n  }\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      const style = this.window.getComputedStyle(this.elementRef.nativeElement);\n      this.initialLeftPadding = style.paddingLeft;\n      this.initialRightPadding = style.paddingRight;\n    }\n\n    this.columnService.onColumnsChange()\n      .pipe(\n        filter(() => this.latestWidth !== this.tree.getColumnWidth()),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  toggleRow(): void {\n    this.tree.toggleCellRow(this);\n  }\n\n  private get initialStartPadding(): string {\n      return this.directionService.isLtr()\n      ? this.initialLeftPadding\n      : this.initialRightPadding;\n  }\n\n  private getStartPadding(): string | SafeStyle | null {\n    const rowLevel = this.tree.getCellLevel(this, this.columnDef.name);\n    if (rowLevel === NB_DEFAULT_ROW_LEVEL) {\n      return null;\n    }\n\n    const nestingLevel = rowLevel + 1;\n    let padding: string = '';\n    if (this.tree.levelPadding) {\n      padding = `calc(${this.tree.levelPadding} * ${nestingLevel})`;\n    } else if (this.initialStartPadding) {\n      padding = `calc(${this.initialStartPadding} * ${nestingLevel})`;\n    }\n\n    if (!padding) {\n      return null;\n    }\n\n    return this.sanitizer.bypassSecurityTrustStyle(padding);\n  }\n}\n\n@Directive({\n  selector: 'th[nbTreeGridHeaderCell]',\n  host: {\n    'class': 'nb-tree-grid-header-cell',\n    'role': 'columnheader',\n  },\n  providers: [{ provide: NbCdkHeaderCell, useExisting: NbTreeGridHeaderCellDirective }],\n})\nexport class NbTreeGridHeaderCellDirective extends NbHeaderCellDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private latestWidth: string;\n  private readonly tree: NbTreeGridComponent<any>;\n\n  @HostBinding('style.width')\n  get columnWidth(): string {\n    this.latestWidth = this.tree.getColumnWidth();\n    return this.latestWidth || null;\n  }\n\n  constructor(\n    columnDef: NbTreeGridColumnDefDirective,\n    elementRef: ElementRef<HTMLElement>,\n    @Inject(NB_TREE_GRID) tree,\n    private columnService: NbColumnsService,\n    private cd: ChangeDetectorRef,\n  ) {\n    super(columnDef, elementRef);\n    this.tree = tree as NbTreeGridComponent<any>;\n  }\n\n  ngOnInit() {\n    this.columnService.onColumnsChange()\n      .pipe(\n        filter(() => this.latestWidth !== this.tree.getColumnWidth()),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n@Directive({\n  selector: 'td[nbTreeGridFooterCell]',\n  host: {\n    'class': 'nb-tree-grid-footer-cell',\n    'role': 'gridcell',\n  },\n  providers: [{ provide: NbCdkFooterCell, useExisting: NbTreeGridFooterCellDirective }],\n})\nexport class NbTreeGridFooterCellDirective extends NbFooterCellDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private latestWidth: string;\n  private readonly tree: NbTreeGridComponent<any>;\n\n  @HostBinding('style.width')\n  get columnWidth(): string {\n    this.latestWidth = this.tree.getColumnWidth();\n    return this.latestWidth || null;\n  }\n\n  constructor(\n    columnDef: NbTreeGridColumnDefDirective,\n    elementRef: ElementRef,\n    @Inject(NB_TREE_GRID) tree,\n    private columnService: NbColumnsService,\n    private cd: ChangeDetectorRef,\n  ) {\n    super(columnDef, elementRef);\n    this.tree = tree as NbTreeGridComponent<any>;\n  }\n\n  ngOnInit() {\n    this.columnService.onColumnsChange()\n      .pipe(\n        filter(() => this.latestWidth !== this.tree.getColumnWidth()),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n"]}