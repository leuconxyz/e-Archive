{"version":3,"file":"chat-custom-message.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/chat/chat-custom-message.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAqB,WAAW,EAAE,MAAM,eAAe,CAAC;AAEjF,OAAO,EAAE,qBAAqB,EAAkB,MAAM,YAAY,CAAC;AACnE,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,SAAS,gCAAgC;IACvC,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;AACzE,CAAC;AAED;;;;;;;;;;;;;;GAcG;AAIH,MAAM,OAAO,4BAA4B;IAuCvC,YAAmB,WAA6B,EAAY,oBAA4C;QAArF,gBAAW,GAAX,WAAW,CAAkB;QAAY,yBAAoB,GAApB,oBAAoB,CAAwB;QAP9F,cAAS,GAAY,KAAK,CAAC;IAOuE,CAAC;IArC7G;;;OAGG;IACH,IACI,eAAe;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,IAAI,eAAe,CAAC,KAAa;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAGD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAA;IACnB,CAAC;IAED;;;;;OAKG;IACH,IACI,uBAAuB,CAAC,KAAc;QACxC,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IACD,IAAI,uBAAuB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAID,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAID,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,gCAAgC,EAAE,CAAC;SACpC;QACD,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;;;YArDF,SAAS,SAAC;gBACT,QAAQ,EAAE,mBAAmB;aAC9B;;;YA1B6C,WAAW;YAGhD,sBAAsB;;;8BA8B5B,KAAK;sCAmBL,KAAK","sourcesContent":["import { Directive, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\n\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbCustomMessageService } from './custom-message.service';\n\nfunction throwCustomMessageTypeIsRequired(): void {\n  throw new Error('[nbCustomMessage]: custom message type is required.');\n}\n\n/**\n * `[nbCustomMessage]` directive should be used as a structural directive or should be applied to the `ng-template`:\n *\n * ```html\n * <div *nbCustomMessage=\"'my-custom-type'; let data\">\n *   <!-- custom message -->\n * </div>\n * ```\n * or\n * ```html\n * <ng-template nbCustomMessage='my-custom-type' let-data>\n *   <!-- custom message -->\n * </ng-template>\n * ```\n */\n@Directive({\n  selector: `[nbCustomMessage]`,\n})\nexport class NbChatCustomMessageDirective implements OnInit, OnDestroy {\n\n  /**\n   * Defines a message type which should rendered with the custom message template.\n   * @type {string}\n   */\n  @Input()\n  get nbCustomMessage(): string {\n    return this._type;\n  }\n  set nbCustomMessage(value: string) {\n    this._type = value;\n  }\n  protected _type: string;\n\n  get type(): string {\n    return this._type\n  }\n\n  /**\n   * Disables generic message styles, such as round corners, text color, background, etc.,\n   * so a custom message could be styled from the ground up.\n   *\n   * @type {boolean}\n   */\n  @Input()\n  set nbCustomMessageNoStyles(value: boolean) {\n    this._noStyles = convertToBoolProperty(value);\n  }\n  get nbCustomMessageNoStyles(): boolean {\n    return this._noStyles;\n  }\n  protected _noStyles: boolean = false;\n  static ngAcceptInputType_noStyles: NbBooleanInput;\n\n  get noStyles(): boolean {\n    return this.nbCustomMessageNoStyles;\n  }\n\n  constructor(public templateRef: TemplateRef<any>, protected customMessageService: NbCustomMessageService) { }\n\n  ngOnInit() {\n    if (!this._type) {\n      throwCustomMessageTypeIsRequired();\n    }\n    this.customMessageService.register(this.type, this);\n  }\n\n  ngOnDestroy() {\n    this.customMessageService.unregister(this.type);\n  }\n}\n"]}