{"version":3,"file":"chat-message.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/chat/chat-message.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { ChangeDetectionStrategy, Component, HostBinding, Input, TemplateRef } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbChatMessageFile } from './chat-message-file.component';\nimport { NbCustomMessageService } from './custom-message.service';\nimport { NbChatCustomMessageDirective } from './chat-custom-message.directive';\n\n/**\n * Chat message component.\n *\n * Multiple message types are available through a `type` property, such as\n * - text - simple text message\n * - file - could be a file preview or a file icon\n * if multiple files are provided grouped files are shown\n * - quote - quotes a message with specific quote styles\n * - map - shows a google map picture by provided [latitude] and [longitude] properties\n *\n * @stacked-example(Available Types, chat/chat-message-types-showcase.component)\n *\n * Message with attached files:\n * ```html\n * <nb-chat-message\n *   type=\"file\"\n *   [files]=\"[ { url: '...' } ]\"\n *   message=\"Hello world!\">\n * </nb-chat-message>\n * ```\n *\n * Map message:\n * ```html\n * <nb-chat-message\n *   type=\"map\"\n *   [latitude]=\"53.914\"\n *   [longitude]=\"27.59\"\n *   message=\"Here I am\">\n * </nb-chat-message>\n * ```\n *\n * @styles\n *\n * chat-message-background:\n * chat-message-text-color:\n * chat-message-reply-background-color:\n * chat-message-reply-text-color:\n * chat-message-avatar-background-color:\n * chat-message-sender-text-color:\n * chat-message-quote-background-color:\n * chat-message-quote-text-color:\n * chat-message-file-text-color:\n * chat-message-file-background-color:\n */\n@Component({\n  selector: 'nb-chat-message',\n  template: `\n    <nb-chat-avatar *ngIf=\"notReply\"\n                    [initials]=\"getInitials()\"\n                    [avatarStyle]=\"avatarStyle\">\n    </nb-chat-avatar>\n\n    <div class=\"message\">\n      <ng-container [ngSwitch]=\"type\" *ngIf=\"_isBuiltInMessageType(); else customTemplate\">\n        <nb-chat-message-file *ngSwitchCase=\"'file'\"\n                              [sender]=\"sender\"\n                              [date]=\"date\"\n                              [dateFormat]=\"dateFormat\"\n                              [message]=\"message\"\n                              [files]=\"files\">\n        </nb-chat-message-file>\n\n        <nb-chat-message-quote *ngSwitchCase=\"'quote'\"\n                               [sender]=\"sender\"\n                               [date]=\"date\"\n                               [dateFormat]=\"dateFormat\"\n                               [message]=\"message\"\n                               [quote]=\"quote\">\n        </nb-chat-message-quote>\n\n        <nb-chat-message-map *ngSwitchCase=\"'map'\"\n                             [sender]=\"sender\"\n                             [date]=\"date\"\n                             [message]=\"message\"\n                             [latitude]=\"latitude\"\n                             [longitude]=\"longitude\">\n        </nb-chat-message-map>\n\n        <nb-chat-message-text *ngSwitchDefault\n                              [sender]=\"sender\"\n                              [date]=\"date\"\n                              [dateFormat]=\"dateFormat\"\n                              [message]=\"message\">\n        </nb-chat-message-text>\n      </ng-container>\n    </div>\n\n    <ng-template #customTemplate>\n      <nb-chat-message-text [sender]=\"sender\"\n                            [date]=\"date\"\n                            [dateFormat]=\"dateFormat\"\n                            [message]=\"message\">\n      </nb-chat-message-text>\n      <div [class.nb-custom-message]=\"_areDefaultStylesEnabled()\"\n           [class.nb-custom-message-no-space]=\"_addNoSpaceClass\"\n           [class.nb-custom-message-reply]=\"_addReplyClass\"\n           [class.nb-custom-message-not-reply]=\"_addNotReplyClass\"\n           [class.nb-custom-message-full-width]=\"!_areDefaultStylesEnabled()\">\n        <ng-container [ngTemplateOutlet]=\"_getTemplate()\"\n                      [ngTemplateOutletContext]=\"_getTemplateContext()\">\n        </ng-container>\n      </div>\n    </ng-template>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('in', style({ transform: 'translateX(0)' })),\n      transition('void => *', [\n        style({ transform: 'translateX(-100%)' }),\n        animate(80),\n      ]),\n      transition('* => void', [\n        animate(80, style({ transform: 'translateX(100%)' })),\n      ]),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbChatMessageComponent {\n\n  protected readonly builtInMessageTypes: string[] = ['text', 'file', 'map', 'quote'];\n\n  avatarStyle: SafeStyle;\n\n  get _addReplyClass(): boolean {\n    return this._areDefaultStylesEnabled() && this.reply;\n  }\n\n  get _addNotReplyClass(): boolean {\n    return this._areDefaultStylesEnabled() && this.notReply;\n  }\n\n  get _addNoSpaceClass(): boolean {\n    return this._areDefaultStylesEnabled() && !this.message;\n  }\n\n  @HostBinding('@flyInOut')\n  get flyInOut() {\n    return true;\n  }\n\n  @HostBinding('class.not-reply')\n  get notReply() {\n    return !this.reply;\n  }\n\n  /**\n   * Determines if a message is a reply\n   */\n  @Input()\n  @HostBinding('class.reply')\n  get reply(): boolean {\n    return this._reply;\n  }\n  set reply(value: boolean) {\n    this._reply = convertToBoolProperty(value);\n  }\n  protected _reply: boolean = false;\n  static ngAcceptInputType_reply: NbBooleanInput;\n\n  /**\n   * Message sender\n   * @type {string}\n   */\n  @Input() message: string;\n\n  /**\n   * Message sender\n   * @type {string}\n   */\n  @Input() sender: string;\n\n  /**\n   * Message send date\n   * @type {Date}\n   */\n  @Input() date: Date;\n\n  /**\n   * Message send date format, default 'shortTime'\n   * @type {string}\n   */\n  @Input() dateFormat: string;\n\n  /**\n   * Array of files `{ url: 'file url', icon: 'file icon class' }`\n   */\n  @Input() files: NbChatMessageFile[];\n\n  /**\n   * Quoted message text\n   * @type {string}\n   */\n  @Input() quote: string;\n\n  /**\n   * Map latitude\n   * @type {number}\n   */\n  @Input() latitude: number;\n\n  /**\n   * Map longitude\n   * @type {number}\n   */\n  @Input() longitude: number;\n\n  /**\n   * Message send avatar\n   * @type {string}\n   */\n  @Input()\n  set avatar(value: string) {\n    this.avatarStyle = value ? this.domSanitizer.bypassSecurityTrustStyle(`url(${value})`) : null;\n  }\n\n  /**\n   * Message type, available options `text|file|map|quote`\n   * @type {string}\n   */\n  @Input() type: string;\n\n  /**\n   * Data which will be set as custom message template context\n   * @type {any}\n   */\n  @Input() customMessageData: any;\n\n  constructor(protected domSanitizer: DomSanitizer, protected customMessageService: NbCustomMessageService) { }\n\n  getInitials(): string {\n    if (this.sender) {\n      const names = this.sender.split(' ');\n      return names.map(n => n.charAt(0)).splice(0, 2).join('').toUpperCase();\n    }\n    return '';\n  }\n\n  _isBuiltInMessageType(): boolean {\n    // Unset type defaults to \"text\" type\n    return this.type == null || this.builtInMessageTypes.includes(this.type);\n  }\n\n  _getTemplate(): TemplateRef<any> {\n    const customMessage = this.getCustomMessage(this.type);\n    return customMessage.templateRef;\n  }\n\n  _getTemplateContext(): { $implicit: any, isReply: boolean } {\n    return { $implicit: this.customMessageData, isReply: this.reply };\n  }\n\n  _areDefaultStylesEnabled(): boolean {\n    const customMessageDirective = this.getCustomMessage(this.type);\n    return !customMessageDirective.noStyles;\n  }\n\n  protected getCustomMessage(type: string): NbChatCustomMessageDirective {\n    const customMessageDirective = this.customMessageService.getInstance(type);\n    if (!customMessageDirective) {\n      throw new Error(`nb-chat: Can't find template for custom type '${type}'. ` +\n        `Make sure you provide it in the chat component with *nbCustomMessage='${type}'.`);\n    }\n    return customMessageDirective;\n  }\n}\n"]}