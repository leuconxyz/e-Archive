{"version":3,"file":"calendar-with-time.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/datepicker/calendar-with-time.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { NbCalendarComponent } from '../calendar/calendar.component';\nimport { NbSelectedTimePayload } from '../timepicker/model';\nimport { NbDateService } from '../calendar-kit/services/date.service';\nimport { NbCalendarTimeModelService } from '../calendar-kit/services/calendar-time-model.service';\nimport { NbCalendarSize } from '../calendar-kit/model';\nimport { NbPortalOutletDirective } from '../cdk/overlay/mapping';\nimport { NbTimePickerComponent } from '../timepicker/timepicker.component';\n\n@Component({\n  selector: 'nb-calendar-with-time',\n  template: `\n    <nb-card class=\"calendar-with-time\">\n      <nb-card-body class=\"picker-body\">\n        <nb-base-calendar\n          [boundingMonth]=\"boundingMonth\"\n          [startView]=\"startView\"\n          [date]=\"date\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [filter]=\"filter\"\n          [dayCellComponent]=\"dayCellComponent\"\n          [monthCellComponent]=\"monthCellComponent\"\n          [yearCellComponent]=\"yearCellComponent\"\n          [size]=\"size\"\n          [visibleDate]=\"visibleDate\"\n          [showNavigation]=\"showNavigation\"\n          [showWeekNumber]=\"showWeekNumber\"\n          [weekNumberSymbol]=\"weekNumberSymbol\"\n          (dateChange)=\"onDateValueChange($event)\">\n        </nb-base-calendar>\n        <div class=\"timepicker-section\"\n             [class.size-large]=\"isLarge()\"\n             [class.timepicker-single-column-width]=\"singleColumn\"\n             [class.timepicker-multiple-column-width]=\"!singleColumn\">\n          <div class=\"picker-title\">{{ title }}</div>\n          <nb-timepicker\n            (onSelectTime)=\"onTimeChange($event)\"\n            [date]=\"date\"\n            [twelveHoursFormat]=\"twelveHoursFormat\"\n            [withSeconds]=\"showSeconds()\"\n            [showFooter]=\"false\"\n            [singleColumn]=\"singleColumn\"\n            [step]=\"step\">\n          </nb-timepicker>\n          <ng-container nbPortalOutlet></ng-container>\n        </div>\n      </nb-card-body>\n      <nb-card-footer class=\"picker-footer\">\n        <nb-calendar-actions\n          [applyButtonText]=\"applyButtonText\"\n          [currentTimeButtonText]=\"currentTimeButtonText\"\n          (setCurrentTime)=\"saveCurrentTime()\"\n          (saveValue)=\"saveValue()\"\n        ></nb-calendar-actions>\n      </nb-card-footer>\n    </nb-card>\n  `,\n  styleUrls: ['./calendar-with-time-container.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbCalendarWithTimeComponent<D> extends NbCalendarComponent<D> implements OnInit, AfterViewInit {\n  /**\n   * Defines selected date.\n   * */\n  @Input() visibleDate: D;\n\n  /**\n   * Defines 12 hours format like '07:00 PM'.\n   * */\n  @Input() twelveHoursFormat: boolean;\n\n  /**\n   * Show seconds in timepicker.\n   * Ignored when singleColumn is true.\n   * */\n  @Input() withSeconds: boolean;\n\n  /**\n   * Show timepicker values in one column with 60 minutes step by default.\n   * */\n  @Input() singleColumn: boolean;\n\n  /**\n   * Defines minutes step when we use fill time format.\n   * If set to 20, it will be: '12:00, 12:20: 12:40, 13:00...'\n   * */\n  @Input() step: number;\n\n  /**\n   * Defines time format.\n   * */\n  @Input() timeFormat: string;\n\n  /**\n   * Defines text over the timepicker.\n   * */\n  @Input() title: string;\n\n  @Input() applyButtonText: string;\n\n  @Input() currentTimeButtonText: string;\n\n  @ViewChild(NbPortalOutletDirective) portalOutlet: NbPortalOutletDirective;\n  @ViewChild(NbTimePickerComponent) timepicker: NbTimePickerComponent<D>;\n\n  constructor(protected dateService: NbDateService<D>,\n              public cd: ChangeDetectorRef,\n              protected calendarTimeModelService: NbCalendarTimeModelService<D>,\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    if (!this.date) {\n      this.date = this.calendarTimeModelService.getResetTime();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.portalOutlet.attachTemplatePortal(this.timepicker.portal);\n  }\n\n  onDateValueChange(date: D): void {\n    const hours = this.dateService.getHours(this.date);\n    const minutes = this.dateService.getMinutes(this.date);\n    const seconds = this.dateService.getSeconds(this.date);\n    const milliseconds = this.dateService.getMilliseconds(this.date);\n\n    let newDate = this.dateService.setHours(date, hours);\n    newDate = this.dateService.setMinutes(newDate, minutes);\n    newDate = this.dateService.setMinutes(newDate, minutes);\n    newDate = this.dateService.setSeconds(newDate, seconds);\n    newDate = this.dateService.setMilliseconds(newDate, milliseconds);\n\n    this.date = newDate;\n  }\n\n  onTimeChange(selectedTime: NbSelectedTimePayload<D>): void {\n    let newDate = this.dateService.clone(this.date);\n\n    newDate = this.dateService.setHours(newDate, this.dateService.getHours(selectedTime.time));\n    newDate = this.dateService.setMinutes(newDate, this.dateService.getMinutes(selectedTime.time));\n    newDate = this.dateService.setSeconds(newDate, this.dateService.getSeconds(selectedTime.time));\n    newDate = this.dateService.setMilliseconds(newDate, this.dateService.getMilliseconds(selectedTime.time));\n\n    this.date = newDate;\n  }\n\n  saveValue(): void {\n    this.dateChange.emit(this.date);\n  }\n\n  saveCurrentTime(): void {\n    this.dateChange.emit(this.dateService.today());\n  }\n\n  /**\n   * We don't show seconds with twelve hours format\n   * */\n  showSeconds(): boolean {\n    return this.withSeconds && !this.twelveHoursFormat;\n  }\n\n  isLarge(): boolean {\n    return this.size === NbCalendarSize.LARGE;\n  }\n}\n"]}