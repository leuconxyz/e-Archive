{"version":3,"file":"viewport-ruler-adapter.js","sourceRoot":"","sources":["../../../../../../../.ng_build/theme/components/cdk/adapter/viewport-ruler-adapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,qBAAqB,EAAoB,MAAM,kCAAkC,CAAC;AAC3F,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAIrD,MAAM,OAAO,sBAAuB,SAAQ,aAAa;IACvD,YAAY,QAAoB,EAAE,MAAc,EAC1B,KAA2B,EAC3B,MAA6B,EAClB,QAAa;QAC5C,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAHd,UAAK,GAAL,KAAK,CAAsB;QAC3B,WAAM,GAAN,MAAM,CAAuB;IAGnD,CAAC;IAED,eAAe;QACb,IAAI,GAAG,CAAC;QACR;;;YAGI;QACJ,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;aACvB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;aAC7F,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;QACjC,OAAO,GAAG,CAAC;IACb,CAAC;IAED,yBAAyB;QACvB,IAAI,GAAG,CAAC;QACR;;;YAGI;QACJ,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;aACtB,IAAI,CAAC,GAAG,CAAC,CAAC,QAA0B,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAClF,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC;QACzC,OAAO,GAAG,CAAC;IACb,CAAC;;;YA/BF,UAAU;;;YANF,UAAU;YAJU,MAAM;YAK1B,oBAAoB;YACpB,qBAAqB;4CASf,MAAM,SAAC,WAAW","sourcesContent":["import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport { map } from 'rxjs/operators';\n\nimport { NbPlatform } from '../platform/platform-service';\nimport { NbLayoutRulerService } from '../../../services/ruler.service';\nimport { NbLayoutScrollService, NbScrollPosition } from '../../../services/scroll.service';\nimport { NB_DOCUMENT } from '../../../theme.options';\n\n\n@Injectable()\nexport class NbViewportRulerAdapter extends ViewportRuler {\n  constructor(platform: NbPlatform, ngZone: NgZone,\n              protected ruler: NbLayoutRulerService,\n              protected scroll: NbLayoutScrollService,\n              @Inject(NB_DOCUMENT) document: any) {\n    super(platform, ngZone, document);\n  }\n\n  getViewportSize(): Readonly<{ width: number; height: number; }> {\n    let res;\n    /*\n    * getDimensions call is really synchronous operation.\n    * And we have to conform with the interface of the original service.\n    * */\n    this.ruler.getDimensions()\n      .pipe(map(dimensions => ({ width: dimensions.clientWidth, height: dimensions.clientHeight })))\n      .subscribe(rect => res = rect);\n    return res;\n  }\n\n  getViewportScrollPosition(): { left: number; top: number } {\n    let res;\n    /*\n    * getPosition call is really synchronous operation.\n    * And we have to conform with the interface of the original service.\n    * */\n    this.scroll.getPosition()\n      .pipe(map((position: NbScrollPosition) => ({ top: position.y, left: position.x })))\n      .subscribe(position => res = position);\n    return res;\n  }\n}\n"]}