{"version":3,"file":"sidebar.service.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/sidebar/sidebar.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAwB,aAAa,EAAE,MAAM,MAAM,CAAC;AACpE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAG1D,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,OAAO,EAAuD,CAAC;AACnG,MAAM,CAAC,MAAM,0BAA0B,GAAG,IAAI,OAAO,EAAiE,CAAC;AAEvH;;;;;;;GAOG;AAEH,MAAM,OAAO,gBAAgB;IAD7B;QAGU,YAAO,GAAG,IAAI,OAAO,EAAqC,CAAC;QAC3D,YAAO,GAAG,IAAI,OAAO,EAAmB,CAAC;QACzC,cAAS,GAAG,IAAI,OAAO,EAAmB,CAAC;QAC3C,aAAQ,GAAG,IAAI,OAAO,EAAmB,CAAC;IA6FpD,CAAC;IA3FC;;;;OAIG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,OAAO,GAAG,KAAK,EAAE,GAAY;QAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,GAAY;QACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,GAAY;QACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,GAAY;QAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,GAAY;QAC1B,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAiB,CAAC,CAAC,CAAC;QACtD,gBAAgB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;QACzC,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,yBAAyB,CAAC,GAAY;QACpC,MAAM,QAAQ,GAAG,IAAI,aAAa,EAA4B,CAAC;QAC/D,0BAA0B,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;QACnD,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9C,CAAC;;;YAlGF,UAAU","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable, Observer, ReplaySubject } from 'rxjs';\nimport { share, refCount, publish } from 'rxjs/operators';\nimport { NbSidebarResponsiveState, NbSidebarState } from './sidebar.component';\n\nexport const getSidebarState$ = new Subject<{ tag: string, observer: Observer<NbSidebarState> }>();\nexport const getSidebarResponsiveState$ = new Subject<{ tag: string, observer: Observer<NbSidebarResponsiveState> }>();\n\n/**\n * Sidebar service.\n *\n * Root module service to control the sidebar from any part of the app.\n *\n * Allows you to change sidebar state dynamically from any part of the app:\n * @stacked-example(Sidebar State, sidebar/sidebar-toggle.component)\n */\n@Injectable()\nexport class NbSidebarService {\n\n  private toggle$ = new Subject<{ compact: boolean, tag: string }>();\n  private expand$ = new Subject<{ tag: string }>();\n  private collapse$ = new Subject<{ tag: string }>();\n  private compact$ = new Subject<{ tag: string }>();\n\n  /**\n   * Subscribe to toggle events\n   *\n   * @returns Observable<{ compact: boolean, tag: string }>\n   */\n  onToggle(): Observable<{ compact: boolean, tag: string }> {\n    return this.toggle$.pipe(share());\n  }\n\n  /**\n   * Subscribe to expand events\n   * @returns Observable<{ tag: string }>\n   */\n  onExpand(): Observable<{ tag: string }> {\n    return this.expand$.pipe(share());\n  }\n\n  /**\n   * Subscribe to collapse evens\n   * @returns Observable<{ tag: string }>\n   */\n  onCollapse(): Observable<{ tag: string }> {\n    return this.collapse$.pipe(share());\n  }\n\n  /**\n   * Subscribe to compact evens\n   * @returns Observable<{ tag: string }>\n   */\n  onCompact(): Observable<{ tag: string }> {\n    return this.compact$.pipe(share());\n  }\n\n  /**\n   * Toggle a sidebar\n   * @param {boolean} compact\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  toggle(compact = false, tag?: string) {\n    this.toggle$.next({ compact, tag });\n  }\n\n  /**\n   * Expands a sidebar\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  expand(tag?: string) {\n    this.expand$.next({ tag });\n  }\n\n  /**\n   * Collapses a sidebar\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  collapse(tag?: string) {\n    this.collapse$.next({ tag });\n  }\n\n  /**\n   * Makes sidebar compact\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar you want to control\n   */\n  compact(tag?: string) {\n    this.compact$.next({ tag });\n  }\n\n  /**\n   * Returns sidebar state observable which emits once\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar state you need\n   */\n  getSidebarState(tag?: string): Observable<NbSidebarState> {\n    const observer = new ReplaySubject<NbSidebarState>(1);\n    getSidebarState$.next({ observer, tag });\n    return observer.pipe(publish(), refCount());\n  }\n\n  /**\n   * Returns sidebar state observable which emits once\n   * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n   * to specify which sidebar responsive state you need\n   */\n  getSidebarResponsiveState(tag?: string): Observable<NbSidebarResponsiveState> {\n    const observer = new ReplaySubject<NbSidebarResponsiveState>();\n    getSidebarResponsiveState$.next({ observer, tag });\n    return observer.pipe(publish(), refCount());\n  }\n}\n"]}