{"version":3,"file":"context-menu.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/context-menu/context-menu.directive.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAGL,SAAS,EACT,UAAU,EACV,WAAW,EACX,KAAK,GAIN,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE/B,OAAO,EAAE,gBAAgB,EAA8B,MAAM,wCAAwC,CAAC;AACtG,OAAO,EAAE,uBAAuB,EAAE,MAAM,gDAAgD,CAAC;AAEzF,OAAO,EAAyC,YAAY,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAClH,OAAO,EAAE,SAAS,EAAmB,MAAM,gCAAgC,CAAC;AAC5E,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAc,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAQjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqFK;AAKL,MAAM,OAAO,sBAAsB;IAuFjC,YAAoB,OAAmB,EACnB,WAA0B,EAC1B,qBAA8C;QAF9C,YAAO,GAAP,OAAO,CAAY;QACnB,gBAAW,GAAX,WAAW,CAAe;QAC1B,0BAAqB,GAArB,qBAAqB,CAAyB;QAtFlE,oBAAe,GAAG,IAAI,CAAC;QAgBvB,cAAS,GAAe,UAAU,CAAC,MAAM,CAAC;QAE1C;;;;aAIK;QAEL,eAAU,GAAiB,YAAY,CAAC,SAAS,CAAC;QA8BlD;;;aAGK;QAEL,YAAO,GAAc,SAAS,CAAC,KAAK,CAAC;QAarC,sBAAiB,GAAW,EAAE,CAAC;QAKrB,kBAAa,GAAoB,EAAE,UAAU,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAE;QACxE,mBAAc,GAAyB,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACrG,aAAQ,GAAG,IAAI,OAAO,EAAQ,CAAC;QACjC,WAAM,GAAiB,EAAE,CAAC;IAOlC,CAAC;IArFD;;;SAGK;IACL,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACD,IAAI,QAAQ,CAAC,KAAiB;QAC5B,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,EAAE;YAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;IACH,CAAC;IAWD;;SAEK;IACL,IACI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACD,IAAI,GAAG,CAAC,KAAa;QACnB,IAAI,KAAK,KAAK,IAAI,CAAC,GAAG,EAAE;YACtB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;IACH,CAAC;IAGD;;SAEK;IACL,IACI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACD,IAAI,KAAK,CAAC,KAAmB;QAC3B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAAA,CAAC;IAUF,IACI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IACD,IAAI,gBAAgB,CAAC,KAAa;QAChC,IAAI,KAAK,KAAK,IAAI,CAAC,gBAAgB,EAAE;YACnC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,aAAa,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC5D;IACH,CAAC;IAkBD,QAAQ;QACN,IAAI,CAAC,qBAAqB;aACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;aAClB,aAAa,CAAC,sBAAsB,CAAC,CAAC;IAC3C,CAAC;IAED,WAAW;QACT,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,uBAAuB,EAAE;aACjD,KAAK,EAAE,CAAC;QACX,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED,OAAO;QACL,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,uBAAuB,EAAE;aACjD,OAAO,EAAE,CAAC;IACf,CAAC;IAED,IAAI;QACF,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,IAAI;QACF,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;IAC/B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAES,uBAAuB;QAC/B,OAAO,IAAI,CAAC,qBAAqB;aAC9B,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;aACvB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;aACrB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;aAC3B,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC;aAC5B,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;IAED;;;SAGK;IACG,aAAa,CAAC,KAAmB;QACvC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC3B,MAAM,KAAK,CAAC,2CAA2C,KAAK,EAAE,CAAC,CAAA;SAChE;IACH,CAAC;IAEO,oBAAoB;QAC1B,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;aAC3B,IAAI,CACH,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,EACrC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB;aACA,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAClC,CAAC;IAES,oBAAoB;QAC5B,IAAI,CAAC,cAAc,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;IACtF,CAAC;;;YArKF,SAAS,SAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,SAAS,EAAE,CAAC,uBAAuB,EAAE,gBAAgB,CAAC;aACvD;;;YAjHC,UAAU;YAgBS,aAAa;YALzB,uBAAuB;;;8BAyG7B,WAAW,SAAC,yBAAyB;uBAOrC,KAAK,SAAC,wBAAwB;yBAiB9B,KAAK,SAAC,yBAAyB;kBAM/B,KAAK,SAAC,kBAAkB;oBAexB,KAAK,SAAC,eAAe;sBAcrB,KAAK,SAAC,sBAAsB;+BAI5B,KAAK,SAAC,oBAAoB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nimport { NbDynamicOverlay, NbDynamicOverlayController } from '../cdk/overlay/dynamic/dynamic-overlay';\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\nimport { NbOverlayConfig, NbOverlayRef } from '../cdk/overlay/mapping';\nimport { NbAdjustableConnectedPositionStrategy, NbAdjustment, NbPosition } from '../cdk/overlay/overlay-position';\nimport { NbTrigger, NbTriggerValues } from '../cdk/overlay/overlay-trigger';\nimport { NbContextMenuComponent } from './context-menu.component';\nimport { NbMenuItem, NbMenuService } from '../menu/menu.service';\n\nexport interface NbContextMenuContext {\n  items: NbMenuItem[];\n  tag: string;\n  position: NbPosition;\n}\n\n/**\n * Full featured context menu directive.\n *\n * @stacked-example(Showcase, context-menu/context-menu-showcase.component)\n *\n * Just pass menu items array:\n *\n * ```html\n * <button [nbContextMenu]=\"items\"></button>\n * ...\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n * ### Installation\n *\n * Import `NbContextMenuModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbContextMenuModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * Also make sure `NbMenuModule` is imported to your `app.module`.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbMenuModule.forRoot(),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * ### Usage\n *\n * If you want to handle context menu clicks you have to pass `nbContextMenuTag`\n * param and register to events using NbMenuService.\n * `NbContextMenu` renders plain `NbMenu` inside, so\n * you have to work with it just like with `NbMenu` component:\n *\n * @stacked-example(Menu item click, context-menu/context-menu-click.component)\n *\n * Context menu has different placements, such as: top, bottom, left and right\n * which can be used as following:\n *\n * ```html\n * <button [nbContextMenu]=\"items\" nbContextMenuPlacement=\"right\"></button>\n * ```\n *\n * ```ts\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n *\n * By default context menu will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change position of the context menu.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```html\n * <button [nbContextMenu]=\"items\" nbContextMenuAdjustment=\"counterclockwise\"></button>\n * ```\n *\n * ```ts\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\n * ```\n * Context menu has a number of triggers which provides an ability to show and hide the component in different ways:\n *\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\n * somewhere on the document outside the component.\n * - Hint provides capability to show the component when the user hovers over the host element\n * and hide when the user hovers out of the host.\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\n * the container element the component remains open, so that it is possible to interact with it content.\n * - Focus mode is applied when user focuses the element.\n * - Noop mode - the component won't react to the user interaction.\n *\n * @stacked-example(Available Triggers, context-menu/context-menu-modes.component.html)\n *\n * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide\n * as a result of some third-party action, like HTTP request or validation check:\n *\n * @stacked-example(Manual Control, context-menu/context-menu-noop.component)\n *\n * @stacked-example(Manual Control, context-menu/context-menu-right-click.component)\n * */\n@Directive({\n  selector: '[nbContextMenu]',\n  providers: [NbDynamicOverlayHandler, NbDynamicOverlay],\n})\nexport class NbContextMenuDirective implements NbDynamicOverlayController, OnChanges, AfterViewInit, OnDestroy, OnInit {\n\n  @HostBinding('class.context-menu-host')\n  contextMenuHost = true;\n\n  /**\n   * Position will be calculated relatively host element based on the position.\n   * Can be top, right, bottom and left.\n   * */\n  @Input('nbContextMenuPlacement')\n  get position(): NbPosition {\n    return this._position;\n  }\n  set position(value: NbPosition) {\n    if (value !== this.position) {\n      this._position = value;\n      this.updateOverlayContext();\n    }\n  }\n  _position: NbPosition = NbPosition.BOTTOM;\n\n  /**\n   * Container position will be changes automatically based on this strategy if container can't fit view port.\n   * Set this property to any falsy value if you want to disable automatically adjustment.\n   * Available values: clockwise, counterclockwise.\n   * */\n  @Input('nbContextMenuAdjustment')\n  adjustment: NbAdjustment = NbAdjustment.CLOCKWISE;\n\n  /**\n   * Set NbMenu tag, which helps identify menu when working with NbMenuService.\n   * */\n  @Input('nbContextMenuTag')\n  get tag(): string {\n    return this._tag;\n  }\n  set tag(value: string) {\n    if (value !== this.tag) {\n      this._tag = value;\n      this.updateOverlayContext();\n    }\n  }\n  _tag: string;\n\n  /**\n   * Basic menu items, will be passed to the internal NbMenuComponent.\n   * */\n  @Input('nbContextMenu')\n  get items(): NbMenuItem[] {\n    return this._items;\n  }\n  set items(items: NbMenuItem[]) {\n    this.validateItems(items);\n    this._items = items;\n    this.updateOverlayContext();\n  };\n\n  /**\n   * Describes when the container will be shown.\n   * Available options: `click`, `hover`, `hint`, `focus` and `noop`\n   * */\n  @Input('nbContextMenuTrigger')\n  trigger: NbTrigger = NbTrigger.CLICK;\n  static ngAcceptInputType_trigger: NbTriggerValues;\n\n  @Input('nbContextMenuClass')\n  get contextMenuClass(): string {\n    return this._contextMenuClass;\n  }\n  set contextMenuClass(value: string) {\n    if (value !== this.contextMenuClass) {\n      this._contextMenuClass = value;\n      this.overlayConfig = { panelClass: this.contextMenuClass };\n    }\n  }\n  _contextMenuClass: string = '';\n\n  protected ref: NbOverlayRef;\n  protected container: ComponentRef<any>;\n  protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n  protected overlayConfig: NbOverlayConfig = { panelClass: this.contextMenuClass } ;\n  protected overlayContext: NbContextMenuContext = { items: this.items, tag: this.tag, position: this.position };\n  protected destroy$ = new Subject<void>();\n  private _items: NbMenuItem[] = [];\n\n  private dynamicOverlay: NbDynamicOverlay;\n\n  constructor(private hostRef: ElementRef,\n              private menuService: NbMenuService,\n              private dynamicOverlayHandler: NbDynamicOverlayHandler) {\n  }\n\n  ngOnInit() {\n    this.dynamicOverlayHandler\n      .host(this.hostRef)\n      .componentType(NbContextMenuComponent);\n  }\n\n  ngOnChanges() {\n    this.rebuild();\n  }\n\n  ngAfterViewInit() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .build();\n    this.subscribeOnItemClick();\n  }\n\n  rebuild() {\n    this.dynamicOverlay = this.configureDynamicOverlay()\n      .rebuild();\n  }\n\n  show() {\n    this.dynamicOverlay.show();\n  }\n\n  hide() {\n    this.dynamicOverlay.hide();\n  }\n\n  toggle() {\n    this.dynamicOverlay.toggle();\n  }\n\n  ngOnDestroy() {\n    this.dynamicOverlayHandler.destroy();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected configureDynamicOverlay() {\n    return this.dynamicOverlayHandler\n      .position(this.position)\n      .trigger(this.trigger)\n      .adjustment(this.adjustment)\n      .context(this.overlayContext)\n      .overlayConfig(this.overlayConfig);\n  }\n\n  /*\n   * NbMenuComponent will crash if don't pass menu items to it.\n   * So, we just validating them and throw custom obvious error.\n   * */\n  private validateItems(items: NbMenuItem[]) {\n    if (!items || !items.length) {\n      throw Error(`List of menu items expected, but given: ${items}`)\n    }\n  }\n\n  private subscribeOnItemClick() {\n    this.menuService.onItemClick()\n      .pipe(\n        filter(({ tag }) => tag === this.tag),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => this.hide());\n  }\n\n  protected updateOverlayContext() {\n    this.overlayContext = { items: this.items, position: this.position, tag: this.tag };\n  }\n}\n"]}