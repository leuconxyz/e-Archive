{"version":3,"file":"calendar-time-model.service.js","sourceRoot":"","sources":["../../../../../../../.ng_build/theme/components/calendar-kit/services/calendar-time-model.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAI/C,MAAM,OAAO,0BAA0B;IAGrC,YAAsB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;QAF1C,wBAAmB,GAAG,EAAE,CAAC;IAGlC,CAAC;IAED,aAAa,CAAC,OAAe,IAAI,CAAC,mBAAmB;QACnD,IAAI,IAAI,GAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAElC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAEjD,MAAM,MAAM,GAAQ,EAAE,CAAC;QAEvB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE;YACvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAChD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,YAAY;QACV,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACrC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC5C,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9C,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9C,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAEnD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,gBAAgB,CAAC,CAAS;QACxB,IAAI,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,GAAG,CAAC,CAAC;SAChB;QAED,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;IACtB,CAAC;IAED,eAAe,CAAC,iBAA0B,EAAE,cAAuB,KAAK;QACtE,IAAI,iBAAiB,EAAE;YACrB,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE,EAAE,CAAA;SACxF;QAED,IAAI,WAAW,EAAE;YACf,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,mCAAmC,EAAE,EAAE,CAAA;SACvG;QAED,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,EAAE,CAAA;IAC7F,CAAC;;;YAlDF,UAAU;;;YAHF,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NbDateService } from './date.service';\n\n\n@Injectable()\nexport class NbCalendarTimeModelService<D> {\n  readonly MINUTES_AND_SECONDS = 60;\n\n  constructor(protected dateService: NbDateService<D>) {\n  }\n\n  getHoursRange(step: number = this.MINUTES_AND_SECONDS): D[] {\n    let date: D = this.getResetTime();\n\n    const endDate = this.dateService.addDay(date, 1);\n\n    const result: D[] = [];\n\n    while (this.dateService.compareDates(date, endDate) < 0) {\n      result.push(date);\n      date = this.dateService.addMinutes(date, step);\n    }\n\n    return result;\n  }\n\n  getResetTime(): D {\n    let today = this.dateService.today();\n    today = this.dateService.setHours(today, 0);\n    today = this.dateService.setMinutes(today, 0);\n    today = this.dateService.setSeconds(today, 0);\n    today = this.dateService.setMilliseconds(today, 0);\n\n    return today;\n  }\n\n  paddToTwoSymbols(n: number): string {\n    if (n < 10) {\n      return '0' + n;\n    }\n\n    return n.toString();\n  }\n\n  buildDateFormat(twelveHoursFormat: boolean, withSeconds: boolean = false): string {\n    if (twelveHoursFormat) {\n      return `${this.dateService.getDateFormat()} ${this.dateService.getTwelveHoursFormat()}`\n    }\n\n    if (withSeconds) {\n      return `${this.dateService.getDateFormat()} ${this.dateService.getTwentyFourHoursFormatWithSeconds()}`\n    }\n\n    return `${this.dateService.getDateFormat()} ${this.dateService.getTwentyFourHoursFormat()}`\n  }\n}\n"]}