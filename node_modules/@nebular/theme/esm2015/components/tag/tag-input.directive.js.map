{"version":3,"file":"tag-input.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/tag/tag-input.directive.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAEL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,KAAK,EACL,MAAM,EACN,MAAM,EACN,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAExD,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,0BAA0B,CAAC;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AACtE,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAO5D;;;;;;;;;;;;;;;;;;;;GAoBG;AAQH,MAAM,OAAO,mBAAoB,SAAQ,gBAAgB;IAyBvD,YACS,YAA0C,EACvC,YAA4B,EAC5B,QAAmB,EACnB,IAAY,EACZ,aAA8B;QAExC,KAAK,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAN1D,iBAAY,GAAZ,YAAY,CAA8B;QACvC,iBAAY,GAAZ,YAAY,CAAgB;QAC5B,aAAQ,GAAR,QAAQ,CAAW;QACnB,SAAI,GAAJ,IAAI,CAAQ;QACZ,kBAAa,GAAb,aAAa,CAAiB;QA5BvB,aAAQ,GAA2B,IAAI,OAAO,EAAiB,CAAC;QAMnF;;WAEG;QACM,kBAAa,GAAa,CAAC,KAAK,CAAC,CAAC;QAE3C;;WAEG;QACO,WAAM,GAAqC,IAAI,YAAY,EAAsB,CAAC;QAEhD,oBAAe,GAAG,IAAI,CAAC;IAenE,CAAC;IA7BD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC;IAC/C,CAAC;IAeD,UAAU,CAAC,KAAoB;QAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAYD,eAAe;QACb,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,IAAI,CAAC,QAAQ;aACV,IAAI,CACH,MAAM,CAAC,CAAC,EAAE,OAAO,EAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,EACpE,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EACtB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB;aACA,SAAS,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IACzF,CAAC;IAES,cAAc,CAAC,OAAe;QACtC,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;;;YAxDF,SAAS,SAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,mBAAmB,EAAE;iBAClE;aACF;;;YAlDC,UAAU;YAaH,cAAc;YANrB,SAAS;YAFT,MAAM;YAOC,eAAe;;;4BAkDrB,KAAK;qBAKL,MAAM;8BAEN,WAAW,SAAC,oBAAoB;yBAEhC,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  NgZone,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nimport { NbStatusService } from '../../services/status.service';\nimport { NbFocusMonitor } from '../cdk/a11y/a11y.module';\nimport { ENTER } from '../cdk/keycodes/keycodes';\nimport { NbFormFieldControl } from '../form-field/form-field-control';\nimport { NbInputDirective } from '../input/input.directive';\n\nexport interface NbTagInputAddEvent {\n  input: ElementRef<HTMLInputElement>;\n  value: string;\n}\n\n/**\n *\n * `[nbTagInput]` directive connects input with a `nb-tag-list` component.\n *\n * @stacked-example(Tag Input, tag/tag-input.component)\n *\n * @additional-example(Tag Input with Autocomplete, tag/tag-input-with-autocomplete.component)\n *\n * @styles\n *\n * tag-list-tiny-tag-offset:\n * tag-list-small-tag-offset:\n * tag-list-medium-tag-offset:\n * tag-list-large-tag-offset:\n * tag-list-giant-tag-offset:\n * tag-list-with-input-tiny-padding:\n * tag-list-with-input-small-padding:\n * tag-list-with-input-medium-padding:\n * tag-list-with-input-large-padding:\n * tag-list-with-input-giant-padding:\n */\n@Directive({\n  selector: 'input[nbTagInput]',\n  exportAs: 'nbTagInput',\n  providers: [\n    { provide: NbFormFieldControl, useExisting: NbTagInputDirective },\n  ],\n})\nexport class NbTagInputDirective extends NbInputDirective implements AfterViewInit {\n\n  protected readonly keyDown$: Subject<KeyboardEvent> = new Subject<KeyboardEvent>();\n\n  get _value(): string {\n    return this._hostElement.nativeElement.value;\n  }\n\n  /**\n   * Controls which keys should trigger tag add event.\n   */\n  @Input() separatorKeys: number[] = [ENTER];\n\n  /**\n   * Emits when a tag need to be added.\n   */\n  @Output() tagAdd: EventEmitter<NbTagInputAddEvent> = new EventEmitter<NbTagInputAddEvent>();\n\n  @HostBinding('class.nb-tag-input') readonly nbTagInputClass = true;\n\n  @HostListener('keydown', ['$event'])\n  _onKeydown(event: KeyboardEvent): void {\n    this.keyDown$.next(event);\n  }\n\n  constructor(\n    public _hostElement: ElementRef<HTMLInputElement>,\n    protected focusMonitor: NbFocusMonitor,\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected statusService: NbStatusService,\n  ) {\n    super(_hostElement, focusMonitor, renderer, zone, statusService);\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    this.keyDown$\n      .pipe(\n        filter(({ keyCode }: KeyboardEvent) => this.isSeparatorKey(keyCode)),\n        map(() => this._value),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((value: string) => this.tagAdd.emit({ value, input: this._hostElement }));\n  }\n\n  protected isSeparatorKey(keyCode: number): boolean {\n    return this.separatorKeys.includes(keyCode);\n  }\n}\n"]}