{"version":3,"file":"button-group.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/button-group/button-group.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n  QueryList,\n  SimpleChanges,\n} from '@angular/core';\nimport { from, merge, Observable, Subject } from 'rxjs';\nimport { debounceTime, filter, startWith, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { NbStatusService } from '../../services/status.service';\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbComponentSize } from '../component-size';\nimport { NbComponentShape } from '../component-shape';\nimport { NbComponentOrCustomStatus } from '../component-status';\nimport { NbButton } from '../button/base-button';\nimport { NbButtonToggleAppearance, NbButtonToggleChange, NbButtonToggleDirective } from './button-toggle.directive';\n\n/**\n * `<nb-button-group>` visually groups buttons together and allow to control buttons properties and the state as a\n * group.\n * @stacked-example(Button Group Showcase, button-group/button-group-showcase.component)\n *\n * ### Installation\n *\n * Import `NbButtonGroupModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbButtonGroupModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * ### Usage\n *\n * You can use `<nb-button-group>` to group a series of `[nbButton]` or `[nbButtonToggle]` components.\n * @stacked-example(Button and Button Toggle Groups, button-group/button-and-button-toggle-groups.component)\n *\n * For a group of multiple `[nbButtonToggle]` you also can control multi-selection behavior. By default, the group\n * component allows only one pressed button toggle at a time (similar to the radio group). To be able to keep multiple\n * toggles pressed, you need to add `multiple` attributes to the `<nb-button-toggle>`.\n * @stacked-example(Button Group Multiple, button-group/button-group-multiple.component)\n *\n * To know which buttons are currently pressed listen to `(valueChange)` on the `nb-button-group`. Event\n * contains an array of values of currently pressed button toggles. You can assign a value to the\n * `[nbButtonToggle]` via the `value` input.\n * @stacked-example(Button Group Value Change, button-group/button-group-value-change.component)\n *\n * To disable a group of buttons, add a `disabled` attribute to the `<nb-button-group>`.\n * @stacked-example(Button Group Disabled, button-group/button-group-disabled.component)\n *\n * The group component controls all visual attributes of buttons such as `appearance`, `status`, `size`, `shape`.\n * You can change it via the appropriate attributes.\n *\n * Button group appearances:\n * @stacked-example(Button Group Appearances, button-group/button-group-appearances.component)\n *\n * Button group statuses:\n * @stacked-example(Button Group Statuses, button-group/button-group-statuses.component)\n *\n * Button group sizes:\n * @stacked-example(Button Group Sizes, button-group/button-group-sizes.component)\n *\n * Buttons group shapes:\n * @additional-example(Button Group Shapes, button-group/button-group-shapes.component)\n *\n * @styles\n *\n * button-group-filled-button-basic-text-color:\n * button-group-filled-button-primary-text-color:\n * button-group-filled-button-success-text-color:\n * button-group-filled-button-info-text-color:\n * button-group-filled-button-warning-text-color:\n * button-group-filled-button-danger-text-color:\n * button-group-filled-button-control-text-color:\n * button-group-filled-basic-divider-color:\n * button-group-filled-primary-divider-color:\n * button-group-filled-success-divider-color:\n * button-group-filled-info-divider-color:\n * button-group-filled-warning-divider-color:\n * button-group-filled-danger-divider-color:\n * button-group-filled-control-divider-color:\n * button-group-ghost-divider-color:\n **/\n@Component({\n  selector: 'nb-button-group',\n  template: `\n    <ng-content></ng-content>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbButtonGroupComponent implements OnChanges, AfterContentInit {\n\n  protected lastEmittedValue: any[] = [];\n\n  protected readonly destroy$: Subject<void> = new Subject<void>();\n  protected readonly buttonsChange$ = new Subject<NbButton[]>();\n\n  @ContentChildren(NbButton) readonly buttons: QueryList<NbButton>;\n\n  /**\n   * Button group size, available sizes:\n   * `tiny`, `small`, `medium`, `large`, `giant`\n   */\n  @Input() size: NbComponentSize = 'medium';\n\n  /**\n   * Button group status (adds specific styles):\n   * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`\n   */\n  @Input() status: NbComponentOrCustomStatus = 'basic';\n\n  /**\n   * Button group shapes: `rectangle`, `round`, `semi-round`\n   */\n  @Input() shape: NbComponentShape = 'rectangle';\n\n  /**\n   * Button group appearance: `filled`, `outline`, `ghost`\n   */\n  @Input() appearance: NbButtonToggleAppearance = 'filled';\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (this.disabled !== convertToBoolProperty(value)) {\n      this._disabled = !this.disabled;\n    }\n  }\n  protected _disabled = false;\n  static ngAcceptInputType_disabled: NbBooleanInput;\n\n  /**\n   * Allows to keep multiple button toggles pressed. Off by default.\n   */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: boolean) {\n    this._multiple = convertToBoolProperty(value);\n  }\n  protected _multiple: boolean = false;\n  static ngAcceptInputType_multiple: NbBooleanInput;\n\n  /**\n   * Sets `filled` appearance\n   */\n  @Input()\n  get filled(): boolean {\n    return this.appearance === 'filled';\n  }\n  set filled(value: boolean) {\n    if (convertToBoolProperty(value)) {\n      this.appearance = 'filled';\n    }\n  }\n  static ngAcceptInputType_filled: NbBooleanInput;\n\n  /**\n   * Sets `outline` appearance\n   */\n  @Input()\n  get outline(): boolean {\n    return this.appearance === 'outline';\n  }\n  set outline(value: boolean) {\n    if (convertToBoolProperty(value)) {\n      this.appearance = 'outline';\n    }\n  }\n  static ngAcceptInputType_outline: NbBooleanInput;\n\n  /**\n   * Sets `ghost` appearance\n   */\n  @Input()\n  get ghost(): boolean {\n    return this.appearance === 'ghost';\n  }\n  set ghost(value: boolean) {\n    if (convertToBoolProperty(value)) {\n      this.appearance = 'ghost';\n    }\n  }\n  static ngAcceptInputType_ghost: NbBooleanInput;\n\n  /**\n   * Emits when `nbButtonToggle` pressed state change. `$event` contains an array of the currently pressed button\n   * toggles.\n   */\n  @Output() valueChange = new EventEmitter<any[]>()\n\n  @HostBinding('attr.role') role = 'group';\n\n  @HostBinding('class')\n  get additionalClasses(): string[] {\n    if (this.statusService.isCustomStatus(this.status)) {\n      return [this.statusService.getStatusClass(this.status)];\n    }\n    return [];\n  }\n\n  constructor(\n    protected cd: ChangeDetectorRef,\n    protected statusService: NbStatusService,\n  ) {}\n\n  ngOnChanges({ size, status, shape, multiple, filled, outline, ghost, disabled }: SimpleChanges) {\n    if (size || status || shape || multiple || filled || outline || ghost || disabled) {\n      this.syncButtonsProperties(this.buttons?.toArray() || []);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.buttonsChange$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((buttons: NbButton[]) => {\n        this.listenButtonPressedState(buttons);\n        this.syncButtonsProperties(buttons);\n      });\n\n    this.buttons.changes\n      .pipe(\n        // `buttons.changes` emit during change detection run after projected content already was initialized.\n        // So at this time, it's too late to update projected buttons properties as updating bindings after\n        // initialization doesn't make sense. Changes won't be picked up and should cause an \"expression changed\" error.\n        // Instead, we wrap the new buttons list into a promise to defer update to the following microtask and also to\n        // trigger change detection one more time.\n        switchMap((buttons: QueryList<NbButton>) => from(Promise.resolve(buttons.toArray()))),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(this.buttonsChange$);\n\n    this.buttonsChange$.next(this.buttons.toArray());\n  }\n\n  protected listenButtonPressedState(buttons: NbButton[]): void {\n    const toggleButtons: NbButtonToggleDirective[] = buttons.filter((button: NbButton) => {\n      return button instanceof NbButtonToggleDirective;\n    }) as NbButtonToggleDirective[];\n\n    if (!toggleButtons.length) {\n      return;\n    }\n\n    const buttonsPressedChange$: Observable<NbButtonToggleChange>[] = toggleButtons\n      .map((button: NbButtonToggleDirective) => button.pressedChange$);\n\n    merge(...buttonsPressedChange$)\n      .pipe(\n        filter(({ pressed }: NbButtonToggleChange) => !this.multiple && pressed),\n        takeUntil(merge(this.buttonsChange$, this.destroy$)),\n      )\n      .subscribe(({ source }: NbButtonToggleChange) => {\n        toggleButtons\n          .filter((button: NbButtonToggleDirective) => button !== source)\n          .forEach((button: NbButtonToggleDirective) => button._updatePressed(false));\n      });\n\n    merge(...buttonsPressedChange$)\n      .pipe(\n        // Use startWith to emit if some buttons are initially pressed.\n        startWith(''),\n        // Use debounce to emit change once when pressed state change in multiple button toggles.\n        debounceTime(0),\n        takeUntil(merge(this.buttonsChange$, this.destroy$)),\n      )\n      .subscribe(() => this.emitCurrentValue(toggleButtons));\n  }\n\n  protected syncButtonsProperties(buttons: NbButton[]): void {\n    buttons.forEach((button: NbButton) => {\n      button.updateProperties({\n        appearance: this.appearance,\n        size: this.size,\n        status: this.status,\n        shape: this.shape,\n        disabled: this.disabled,\n      });\n    });\n  }\n\n  protected emitCurrentValue(toggleButtons: NbButtonToggleDirective[]): void {\n    const pressedToggleValues = toggleButtons\n      .filter((b: NbButtonToggleDirective) => b.pressed && typeof b.value !== 'undefined')\n      .map((b: NbButtonToggleDirective) => b.value);\n\n    // Prevent multiple emissions of empty value.\n    if (pressedToggleValues.length === 0 && this.lastEmittedValue.length === 0) {\n      return;\n    }\n\n    this.valueChange.emit(pressedToggleValues);\n    this.lastEmittedValue = pressedToggleValues;\n  }\n}\n"]}