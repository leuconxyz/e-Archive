{"version":3,"file":"button-toggle.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/button-group/button-toggle.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  NgZone,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { NbStatusService } from '../../services/status.service';\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbButton, NbButtonAppearance } from '../button/base-button';\n\nexport type NbButtonToggleAppearance = Exclude<NbButtonAppearance, 'hero'>;\n\nexport interface NbButtonToggleChange {\n  source: NbButtonToggleDirective;\n  pressed: boolean;\n}\n\n/**\n * `[nbButtonToggle]` is a directive to add a `pressed` state to a button.\n */\n@Directive({\n  selector: 'button[nbButtonToggle]',\n  providers: [\n    { provide: NbButton, useExisting: NbButtonToggleDirective },\n  ],\n  exportAs: 'nbButtonToggle',\n})\nexport class NbButtonToggleDirective extends NbButton {\n\n  protected readonly _pressedChange$ = new Subject<NbButtonToggleChange>();\n\n  get pressedChange$(): Observable<NbButtonToggleChange> {\n    return this._pressedChange$.asObservable();\n  }\n\n  @Input() appearance: NbButtonToggleAppearance = 'filled';\n\n  /**\n   * A value associated with the button.\n   */\n  @Input() value: any;\n\n  /**\n   * Controls button pressed state\n   **/\n  @Input()\n  @HostBinding('attr.aria-pressed')\n  get pressed(): boolean {\n    return this._pressed;\n  }\n  set pressed(value: boolean) {\n    if (this.pressed !== convertToBoolProperty(value)) {\n      this._pressed = !this.pressed;\n      this.pressedChange.emit(this.pressed);\n      this._pressedChange$.next({ source: this, pressed: this.pressed })\n    }\n  }\n  protected _pressed: boolean = false;\n  static ngAcceptInputType_pressed: NbBooleanInput;\n\n  /**\n   * Emits whenever button pressed state change\n   **/\n  @Output() readonly pressedChange = new EventEmitter<boolean>();\n\n  @HostBinding('class.status-basic')\n  get basic(): boolean {\n    // By design, all toggle buttons should have a `basic` status when not pressed.\n    return !this.pressed;\n  }\n\n  @HostBinding('class.status-primary')\n  get primary(): boolean {\n    return this.pressed && (this.status === 'basic' || this.status === 'primary');\n  }\n\n  @HostBinding('class.status-success')\n  get success(): boolean {\n    return this.pressed && this.status === 'success';\n  }\n\n  @HostBinding('class.status-info')\n  get info(): boolean {\n    return this.pressed && this.status === 'info';\n  }\n\n  @HostBinding('class.status-warning')\n  get warning(): boolean {\n    return this.pressed && this.status === 'warning';\n  }\n\n  @HostBinding('class.status-danger')\n  get danger(): boolean {\n    return this.pressed && this.status === 'danger';\n  }\n\n  @HostBinding('class.status-control')\n  get control(): boolean {\n    return this.pressed && this.status === 'control';\n  }\n\n  @HostBinding('class')\n  get additionalClasses(): string[] {\n    if (this.statusService.isCustomStatus(this.status)) {\n      return [this.statusService.getStatusClass(this.status)];\n    }\n    return [];\n  }\n\n  @HostListener('click')\n  onClick(): void {\n    this.pressed = !this.pressed;\n  }\n\n  constructor(\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef,\n    protected zone: NgZone,\n    protected statusService: NbStatusService,\n  ) {\n    super(renderer, hostElement, cd, zone, statusService);\n  }\n\n  /**\n   * @docs-private\n   */\n  _updatePressed(value: boolean) {\n    this.pressed = value;\n    this.cd.markForCheck();\n  }\n}\n"]}