{"version":3,"file":"autocomplete.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/autocomplete/autocomplete.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { merge, Subject } from 'rxjs';\nimport { filter, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';\n\nimport { NbOverlayRef, NbScrollStrategy } from '../cdk/overlay/mapping';\nimport { NbTrigger, NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { ENTER, ESCAPE } from '../cdk/keycodes/keycodes';\nimport {\n  NbAdjustableConnectedPositionStrategy,\n  NbAdjustment,\n  NbPosition,\n  NbPositionBuilderService,\n} from '../cdk/overlay/overlay-position';\nimport {\n  NbActiveDescendantKeyManager,\n  NbActiveDescendantKeyManagerFactoryService,\n  NbKeyManagerActiveItemMode,\n} from '../cdk/a11y/descendant-key-manager';\nimport { NbScrollStrategies } from '../cdk/adapter/block-scroll-strategy-adapter';\nimport { NbOptionComponent } from '../option/option.component';\nimport { convertToBoolProperty } from '../helpers';\nimport { NbAutocompleteComponent } from './autocomplete.component';\n\n/**\n * The `NbAutocompleteDirective` provides a capability to expand input with\n * `NbAutocompleteComponent` overlay containing options to select and fill input with.\n *\n * @stacked-example(Showcase, autocomplete/autocomplete-showcase.component)\n *\n * ### Installation\n *\n * Import `NbAutocompleteModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbAutocompleteModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * You can bind control with form controls or ngModel.\n *\n * @stacked-example(Autocomplete form binding, autocomplete/autocomplete-form.component)\n *\n * Options in the autocomplete may be grouped using `nb-option-group` component.\n *\n * @stacked-example(Grouping, autocomplete/autocomplete-group.component)\n *\n * Autocomplete may change selected option value via provided function.\n *\n * @stacked-example(Custom display, autocomplete/autocomplete-custom-display.component)\n *\n * Also, autocomplete may make first option in option list active automatically.\n *\n * @stacked-example(Active first, autocomplete/autocomplete-active-first.component)\n *\n * */\n@Directive({\n  selector: 'input[nbAutocomplete]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NbAutocompleteDirective),\n    multi: true,\n  }],\n})\nexport class NbAutocompleteDirective<T> implements OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /**\n   * NbAutocompleteComponent instance passed via input.\n   * */\n  protected _autocomplete: NbAutocompleteComponent<T>;\n\n  /**\n   * Trigger strategy used by overlay.\n   * @docs-private\n   * */\n  protected triggerStrategy: NbTriggerStrategy;\n\n  protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n\n  protected overlayRef: NbOverlayRef;\n\n  protected keyManager: NbActiveDescendantKeyManager<NbOptionComponent<T>>;\n\n  protected destroy$: Subject<void> = new Subject<void>();\n\n  protected _onChange: (value: T) => void = () => {};\n\n  protected _onTouched = () => {};\n\n  /**\n   * Determines is autocomplete overlay opened.\n   * */\n  get isOpen(): boolean {\n    return this.overlayRef && this.overlayRef.hasAttached();\n  }\n\n  /**\n   * Determines is autocomplete overlay closed.\n   * */\n  get isClosed(): boolean {\n    return !this.isOpen;\n  }\n\n  /**\n   * Provides autocomplete component.\n   * */\n  @Input('nbAutocomplete')\n  get autocomplete(): NbAutocompleteComponent<T> {\n    return this._autocomplete;\n  }\n  set autocomplete(autocomplete: NbAutocompleteComponent<T>) {\n    this._autocomplete = autocomplete;\n  }\n\n  /**\n   * Determines options overlay offset (in pixels).\n   **/\n  @Input() overlayOffset: number = 8;\n\n  /**\n   * Determines if the input will be focused when the control value is changed\n   * */\n  @Input()\n  get focusInputOnValueChange(): boolean {\n    return this._focusInputOnValueChange;\n  }\n  set focusInputOnValueChange(value: boolean) {\n    this._focusInputOnValueChange = convertToBoolProperty(value);\n  }\n  protected _focusInputOnValueChange: boolean = true;\n\n  /**\n   * Determines options overlay scroll strategy.\n   **/\n  @Input() scrollStrategy: NbScrollStrategies = 'block';\n\n  @Input() customOverlayHost: ElementRef;\n\n  @HostBinding('class.nb-autocomplete-position-top')\n  get top(): boolean {\n    return this.isOpen && this.autocomplete.options.length && this.autocomplete.overlayPosition === NbPosition.TOP;\n  }\n\n  @HostBinding('class.nb-autocomplete-position-bottom')\n  get bottom(): boolean {\n    return this.isOpen && this.autocomplete.options.length && this.autocomplete.overlayPosition === NbPosition.BOTTOM;\n  }\n\n  @HostBinding('attr.role')\n  role: string = 'combobox';\n\n  @HostBinding('attr.aria-autocomplete')\n  ariaAutocomplete: string = 'list';\n\n  @HostBinding('attr.haspopup')\n  hasPopup: string = 'true';\n\n  @HostBinding('attr.aria-expanded')\n  get ariaExpanded(): string {\n    return this.isOpen && this.isOpen.toString();\n  }\n\n  @HostBinding('attr.aria-owns')\n  get ariaOwns() {\n    return this.isOpen ? this.autocomplete.id : null;\n  }\n\n  @HostBinding('attr.aria-activedescendant')\n  get ariaActiveDescendant() {\n    return (this.isOpen && this.keyManager.activeItem) ? this.keyManager.activeItem.id : null;\n  }\n\n  constructor(\n    protected hostRef: ElementRef,\n    protected overlay: NbOverlayService,\n    protected cd: ChangeDetectorRef,\n    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService,\n    protected positionBuilder: NbPositionBuilderService,\n    protected activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>,\n    protected renderer: Renderer2,\n  ) {}\n\n  ngAfterViewInit() {\n    this.triggerStrategy = this.createTriggerStrategy();\n    this.subscribeOnTriggers();\n  }\n\n  ngOnDestroy() {\n\n    if (this.triggerStrategy) {\n      this.triggerStrategy.destroy();\n    }\n\n    if (this.positionStrategy) {\n      this.positionStrategy.dispose();\n    }\n\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n    }\n\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  @HostListener('input')\n  handleInput() {\n    const currentValue = this.hostRef.nativeElement.value;\n    this._onChange(currentValue);\n    this.setHostInputValue(this.getDisplayValue(currentValue));\n    this.show();\n  }\n\n  @HostListener('keydown.arrowDown')\n  @HostListener('keydown.arrowUp')\n  handleKeydown() {\n    this.show();\n  }\n\n  @HostListener('blur')\n  handleBlur() {\n    this._onTouched();\n  }\n\n  show() {\n    if (this.isClosed) {\n      this.attachToOverlay();\n      this.setActiveItem();\n    }\n  }\n\n  hide() {\n    if (this.isOpen) {\n      this.overlayRef.detach();\n      // Need to update class via @HostBinding\n      this.cd.markForCheck();\n    }\n  }\n\n  writeValue(value: T): void {\n    this.handleInputValueUpdate(value);\n  }\n\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this.renderer.setProperty(this.hostRef.nativeElement, 'disabled', disabled);\n  }\n\n  protected subscribeOnOptionClick() {\n    /**\n     * If the user changes provided options list in the runtime we have to handle this\n     * and resubscribe on options selection changes event.\n     * Otherwise, the user will not be able to select new options.\n     * */\n    this.autocomplete.options.changes\n      .pipe(\n        tap(() => this.setActiveItem()),\n        startWith(this.autocomplete.options),\n        switchMap((options: QueryList<NbOptionComponent<T>>) => {\n          return merge(...options.map(option => option.click));\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((clickedOption: NbOptionComponent<T>) => this.handleInputValueUpdate(clickedOption.value));\n  }\n\n  protected subscribeOnPositionChange() {\n    this.positionStrategy.positionChange\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((position: NbPosition) => {\n        this.autocomplete.overlayPosition = position;\n        this.cd.detectChanges();\n      });\n  }\n\n  protected getActiveItem(): NbOptionComponent<T> {\n    return this.keyManager.activeItem;\n  }\n\n  protected setupAutocomplete() {\n    this.autocomplete.setHost(this.customOverlayHost || this.hostRef);\n  }\n\n  protected getDisplayValue(value: string) {\n    const displayFn = this.autocomplete.handleDisplayFn;\n    return displayFn ? displayFn(value) : value;\n  }\n\n  protected getContainer() {\n    return this.overlayRef && this.isOpen && <ComponentRef<any>> {\n      location: {\n        nativeElement: this.overlayRef.overlayElement,\n      },\n    };\n  }\n\n  protected handleInputValueUpdate(value: T) {\n    if (value === undefined || value === null) {\n      return;\n    }\n    this.setHostInputValue(value);\n    this._onChange(value);\n    if (this.focusInputOnValueChange) {\n      this.hostRef.nativeElement.focus();\n    }\n    this.autocomplete.emitSelected(value);\n    this.hide();\n  }\n\n  protected subscribeOnTriggers() {\n\n    this.triggerStrategy.show$\n      .pipe(filter(() => this.isClosed))\n      .subscribe(() => this.show());\n\n    this.triggerStrategy.hide$\n      .pipe(filter(() => this.isOpen))\n      .subscribe(() => this.hide());\n  }\n\n  protected createTriggerStrategy(): NbTriggerStrategy {\n    return this.triggerStrategyBuilder\n      .trigger(NbTrigger.FOCUS)\n      .host(this.hostRef.nativeElement)\n      .container(() => this.getContainer())\n      .build();\n  }\n\n  protected createKeyManager(): void {\n    this.keyManager = this.activeDescendantKeyManagerFactory\n                        .create(this.autocomplete.options);\n  }\n\n  protected setHostInputValue(value) {\n    this.hostRef.nativeElement.value = this.getDisplayValue(value);\n  }\n\n  protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy {\n    return this.positionBuilder\n      .connectedTo(this.customOverlayHost || this.hostRef)\n      .position(NbPosition.BOTTOM)\n      .offset(this.overlayOffset)\n      .adjustment(NbAdjustment.VERTICAL);\n  }\n\n  protected subscribeOnOverlayKeys(): void {\n    this.overlayRef.keydownEvents()\n      .pipe(\n        takeUntil(this.destroy$),\n      )\n      .subscribe((event: KeyboardEvent) => {\n        if (event.keyCode === ESCAPE && this.isOpen) {\n          event.preventDefault();\n          this.hostRef.nativeElement.focus();\n          this.hide();\n\n        } else if (event.keyCode === ENTER) {\n          event.preventDefault();\n          const activeItem = this.getActiveItem();\n          if (!activeItem) {\n            return;\n          }\n          this.handleInputValueUpdate(activeItem.value);\n\n        } else {\n          this.keyManager.onKeydown(event);\n        }\n      });\n\n  }\n\n  protected setActiveItem() {\n    // If autocomplete has activeFirst input set to true,\n    // keyManager set first option active, otherwise - reset active option.\n    const mode = this.autocomplete.activeFirst\n      ? NbKeyManagerActiveItemMode.FIRST_ACTIVE\n      : NbKeyManagerActiveItemMode.RESET_ACTIVE;\n    this.keyManager.setActiveItem(mode);\n    this.cd.detectChanges();\n  }\n\n  protected attachToOverlay() {\n    if (!this.overlayRef) {\n      this.setupAutocomplete();\n      this.initOverlay();\n    }\n    this.overlayRef.attach(this.autocomplete.portal);\n  }\n\n  protected createOverlay() {\n    const scrollStrategy = this.createScrollStrategy();\n    this.overlayRef = this.overlay.create(\n      { positionStrategy: this.positionStrategy, scrollStrategy, panelClass: this.autocomplete.optionsPanelClass });\n  }\n\n  protected initOverlay() {\n    this.positionStrategy = this.createPositionStrategy();\n\n    this.createKeyManager();\n    this.subscribeOnPositionChange();\n    this.subscribeOnOptionClick();\n    this.checkOverlayVisibility();\n    this.createOverlay();\n    this.subscribeOnOverlayKeys();\n  }\n\n  protected checkOverlayVisibility() {\n    this.autocomplete.options.changes\n      .pipe(\n        takeUntil(this.destroy$),\n      ).subscribe(() => {\n        if (!this.autocomplete.options.length) {\n          this.hide();\n        }\n    });\n  }\n\n  protected createScrollStrategy(): NbScrollStrategy {\n    return this.overlay.scrollStrategies[this.scrollStrategy]();\n  }\n}\n"]}