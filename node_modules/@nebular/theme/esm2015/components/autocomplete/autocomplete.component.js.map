{"version":3,"file":"autocomplete.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/autocomplete/autocomplete.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  QueryList,\n  ViewChild,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NbComponentSize } from '../component-size';\nimport { NbPosition } from '../cdk/overlay/overlay-position';\nimport { NbOptionComponent } from '../option/option.component';\nimport { NbPortalDirective } from '../cdk/overlay/mapping';\n\n// Component class scoped counter for aria attributes.\nlet lastAutocompleteId: number = 0;\n\n/**\n * The `NbAutocompleteComponent` overlay component.\n * Provides an `NbOptionList` overlay component.\n * */\n@Component({\n  selector: 'nb-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbAutocompleteComponent<T> implements AfterContentInit, OnDestroy {\n\n  protected destroy$: Subject<void> = new Subject<void>();\n\n  /**\n   * HTML input reference to which autocomplete connected.\n   * */\n  hostRef: ElementRef;\n\n  /**\n   * Component scoped id for aria attributes.\n   * */\n  id: string = `nb-autocomplete-${lastAutocompleteId++}`;\n\n\n  /**\n   * @docs-private\n   * Current overlay position because of we have to toggle overlayPosition\n   * in [ngClass] direction.\n   */\n  _overlayPosition: NbPosition = '' as NbPosition;\n\n  get overlayPosition(): NbPosition {\n    return this._overlayPosition;\n  }\n\n  set overlayPosition(value: NbPosition) {\n    this._overlayPosition = value;\n    // Need run change detection after first set from NbAutocompleteDirective\n    this.cd.detectChanges();\n  }\n\n  /**\n   * Returns width of the input.\n   * */\n  get hostWidth(): number {\n    return this.hostRef.nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Function passed as input to process each string option value before render.\n   * */\n  @Input() handleDisplayFn: ((value: any) => string);\n\n  /**\n   * Autocomplete size, available sizes:\n   * `tiny`, `small`, `medium` (default), `large`, `giant`\n   */\n  @Input() size: NbComponentSize = 'medium';\n\n  /**\n   * Flag passed as input to always make first option active.\n   * */\n  @Input() activeFirst: boolean = false;\n\n  /**\n   * Specifies class to be set on `nb-option`s container (`nb-option-list`)\n   * */\n  @Input() optionsListClass: NgClass['ngClass'];\n\n  /**\n   * Specifies class for the overlay panel with options\n   * */\n  @Input() optionsPanelClass: string | string[];\n\n  /**\n   * Will be emitted when selected value changes.\n   * */\n  @Output() selectedChange: EventEmitter<T> = new EventEmitter();\n\n  /**\n    * List of `NbOptionComponent`'s components passed as content.\n  * */\n  @ContentChildren(NbOptionComponent, { descendants: true }) options: QueryList<NbOptionComponent<T>>;\n\n  /**\n   * NbOptionList with options content.\n   * */\n  @ViewChild(NbPortalDirective) portal: NbPortalDirective;\n\n  constructor(protected cd: ChangeDetectorRef) {}\n\n  ngAfterContentInit() {\n    this.options.changes\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.cd.detectChanges());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n   * Autocomplete knows nothing about host html input element.\n   * So, attach method set input hostRef for styling.\n   * */\n  setHost(hostRef: ElementRef) {\n    this.hostRef = hostRef;\n  }\n\n  /**\n   * Propagate selected value.\n   * */\n  emitSelected(selected: T) {\n    this.selectedChange.emit(selected);\n  }\n\n  @HostBinding('class.size-tiny')\n  get tiny(): boolean {\n    return this.size === 'tiny';\n  }\n  @HostBinding('class.size-small')\n  get small(): boolean {\n    return this.size === 'small';\n  }\n  @HostBinding('class.size-medium')\n  get medium(): boolean {\n    return this.size === 'medium';\n  }\n  @HostBinding('class.size-large')\n  get large(): boolean {\n    return this.size === 'large';\n  }\n  @HostBinding('class.size-giant')\n  get giant(): boolean {\n    return this.size === 'giant';\n  }\n\n}\n"]}