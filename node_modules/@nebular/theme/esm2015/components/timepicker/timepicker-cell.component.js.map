{"version":3,"file":"timepicker-cell.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/timepicker/timepicker-cell.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,uBAAuB,EACvB,SAAS,EAET,YAAY,EACZ,YAAY,EACZ,KAAK,EACL,MAAM,EAEN,MAAM,EACN,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAEtC,OAAO,EAAE,UAAU,EAAE,MAAM,kCAAkC,CAAC;AAU9D,MAAM,OAAO,yBAAyB;IAqBpC,YAAsB,MAAc,EACd,eAA2B;QAD3B,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAAY;QArBvC,oBAAe,GAAG,IAAI,OAAO,EAAW,CAAC;QACzC,gBAAW,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzE,aAAQ,GAAG,IAAI,OAAO,EAAQ,CAAC;QAc/B,WAAM,GAAsC,IAAI,YAAY,EAAE,CAAC;IAMzE,CAAC;IAjBD,IAAa,QAAQ,CAAC,QAAiB;QACrC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB;QACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAAA,CAAC;IACF,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAWD,OAAO;QACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,eAAe;QACb,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,6EAA6E;YAC7E,8FAA8F;YAC9F,4EAA4E;YAC5E,IAAI,CAAC,MAAM,CAAC,QAAQ;iBACnB,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACnD,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;SAC1C;IACH,CAAC;IAES,eAAe;QACvB,IAAI,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE;YAChE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE,CACjC,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,cAAc,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;SAC/E;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;;;YA7DF,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE;;GAET;gBAED,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAChD;;;YAjBC,MAAM;YAQC,UAAU;;;uBAgBhB,KAAK;oBAUL,KAAK;qBACL,MAAM;oCAEN,SAAS,SAAC,gBAAgB;sBAM1B,YAAY,SAAC,OAAO","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { filter, take, takeUntil } from 'rxjs/operators';\nimport { merge, Subject } from 'rxjs';\nimport { NbSelectedTimeModel } from './model';\nimport { NbPlatform } from '../cdk/platform/platform-service';\n\n@Component({\n  selector: 'nb-timepicker-cell',\n  template: `\n    <div #valueContainer>{{ value }}</div>\n  `,\n  styleUrls: ['./timepicker-cell.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbTimePickerCellComponent implements AfterViewInit, OnDestroy {\n  protected selectedChange$ = new Subject<boolean>();\n  protected unselected$ = this.selectedChange$.pipe(filter((selected) => !selected));\n  protected destroy$ = new Subject<void>();\n  _selected: boolean;\n\n  @Input() set selected(selected: boolean) {\n    if (selected) {\n      this._selected = selected;\n      this.scrollToElement();\n    }\n    this.selectedChange$.next(selected);\n  };\n  get selected(): boolean {\n    return this._selected;\n  }\n  @Input() value: string;\n  @Output() select: EventEmitter<NbSelectedTimeModel> = new EventEmitter();\n\n  @ViewChild('valueContainer') valueContainerElement: ElementRef;\n\n  constructor(protected ngZone: NgZone,\n              protected platformService: NbPlatform) {\n  }\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit({ value: this.value });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.selected) {\n      // Since we render timepicker in the overlay, at the moment this hook called,\n      // timepicker could be not fully rendered and placed. Because of it, we're waiting for Angular\n      // to finish change detection run and only then scroll to the selected cell.\n      this.ngZone.onStable\n      .pipe(\n        take(1),\n        takeUntil(merge(this.unselected$, this.destroy$)))\n      .subscribe(() => this.scrollToElement());\n    }\n  }\n\n  protected scrollToElement() {\n    if (this.valueContainerElement && this.platformService.isBrowser) {\n      this.ngZone.runOutsideAngular(() =>\n        this.valueContainerElement.nativeElement.scrollIntoView({block: 'center'}));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n"]}