{"version":3,"file":"timepicker.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/timepicker/timepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbPortalDirective } from '../cdk/overlay/mapping';\nimport { NbPlatform } from '../cdk/platform/platform-service';\nimport { NbDateService, NbDayPeriod } from '../calendar-kit/services/date.service';\nimport { range, rangeFromTo } from '../calendar-kit/helpers';\nimport { NbCalendarTimeModelService } from '../calendar-kit/services/calendar-time-model.service';\nimport {\n  NB_DEFAULT_TIMEPICKER_LOCALIZATION_CONFIG,\n  NB_TIME_PICKER_CONFIG,\n  NbSelectedTimePayload,\n  NbTimePickerConfig,\n} from './model';\n\ninterface NbTimePartOption {\n  value: number,\n  text: string,\n}\n\n/**\n * The TimePicker components itself.\n * Provides a proxy to `TimePicker` options as well as custom picker options.\n */\n@Component({\n  selector: 'nb-timepicker',\n  templateUrl: './timepicker.component.html',\n  styleUrls: ['./timepicker.component.css'],\n  exportAs: 'nbTimepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbTimePickerComponent<D> implements OnChanges, OnInit {\n  protected blur$: Subject<void> = new Subject<void>();\n\n  fullTimeOptions: D[];\n  hoursColumnOptions: NbTimePartOption[];\n  minutesColumnOptions: NbTimePartOption[];\n  secondsColumnOptions: NbTimePartOption[];\n  readonly dayPeriodColumnOptions = [ NbDayPeriod.AM, NbDayPeriod.PM ];\n  hostRef: ElementRef;\n  isAM = true;\n\n  /**\n   * Emits when timepicker looses focus.\n   */\n  get blur(): Observable<void> {\n    return this.blur$.asObservable();\n  }\n\n  /**\n   * Defines time format string.\n   * */\n  @Input()\n  get timeFormat(): string {\n    return this._timeFormat;\n  }\n  set timeFormat(timeFormat: string) {\n    this._timeFormat = timeFormat;\n  }\n  protected _timeFormat: string;\n\n  /**\n   * Defines 12 hours format .\n   * */\n  @Input()\n  get twelveHoursFormat(): boolean {\n    return this._twelveHoursFormat;\n  }\n  set twelveHoursFormat(value: boolean) {\n    this._twelveHoursFormat = convertToBoolProperty(value);\n  };\n  protected _twelveHoursFormat: boolean;\n  static ngAcceptInputType_twelveHoursFormat: NbBooleanInput;\n\n  /**\n   * Show seconds in timepicker.\n   * Ignored when singleColumn is true\n   * */\n  @Input()\n  get withSeconds(): boolean {\n    return this._withSeconds;\n  }\n  set withSeconds(value: boolean) {\n    this._withSeconds = convertToBoolProperty(value);\n  };\n  protected _withSeconds: boolean;\n  static ngAcceptInputType_withSeconds: NbBooleanInput;\n\n  /**\n   * Show timepicker values in one column with 60 minutes step by default.\n   * */\n  @Input()\n  get singleColumn(): boolean {\n    return this._singleColumn;\n  }\n  set singleColumn(value: boolean) {\n    this._singleColumn = convertToBoolProperty(value);\n  }\n  _singleColumn: boolean;\n  static ngAcceptInputType_singleColumn: NbBooleanInput;\n\n  /**\n   * Defines minutes offset for options, when timepicker is in single column mode.\n   * By default it’s 60 minutes: '12:00, 13:00: 14:00, 15:00...'\n   * */\n  @Input()\n  set step(step: number) {\n    this._step = step;\n  }\n  get step(): number {\n    return this._step;\n  }\n  protected _step: number;\n\n  /**\n   * Date which will be rendered as selected.\n   * */\n  @Input()\n  set date(date: D) {\n    this._date = date;\n    this.isAM = this.dateService.getDayPeriod(this.date) === NbDayPeriod.AM;\n    this.buildColumnOptions();\n    this.cd.markForCheck();\n  }\n\n  get date(): D {\n    return this._date;\n  }\n\n  _date: D;\n\n  /**\n   * In timepicker value should be always true\n   * In calendar-with-time.component  should set to false\n   * @docs-private\n   */\n  @Input() showFooter: boolean = true;\n  @Input() applyButtonText: string;\n  @Input() hoursText: string;\n  @Input() minutesText: string;\n  @Input() secondsText: string;\n  @Input() ampmText: string;\n  @Input() currentTimeButtonText: string;\n\n  /**\n   * Emits date when selected.\n   * */\n  @Output() onSelectTime: EventEmitter<NbSelectedTimePayload<D>> = new EventEmitter<NbSelectedTimePayload<D>>();\n  @ViewChild(NbPortalDirective, {static: true}) portal: NbPortalDirective;\n\n  constructor(@Inject(NB_TIME_PICKER_CONFIG) protected config: NbTimePickerConfig,\n              protected platformService: NbPlatform,\n              @Inject(LOCALE_ID) locale: string,\n              public cd: ChangeDetectorRef,\n              protected calendarTimeModelService: NbCalendarTimeModelService<D>,\n              protected dateService: NbDateService<D>) {\n    this.initFromConfig(this.config);\n  }\n\n  ngOnInit(): void {\n    this.timeFormat = this.setupTimeFormat();\n  }\n\n  ngOnChanges({\n                step,\n                twelveHoursFormat,\n                withSeconds,\n                singleColumn,\n              }: SimpleChanges): void {\n    this.timeFormat = this.setupTimeFormat();\n\n    const isConfigChanged = step || twelveHoursFormat || withSeconds || singleColumn;\n\n    if (isConfigChanged || !this.fullTimeOptions) {\n      this.buildColumnOptions();\n    }\n  }\n\n  setHost(hostRef: ElementRef): void {\n    this.hostRef = hostRef;\n  }\n\n  attach(hostRef: ElementRef): void {\n    this.hostRef = hostRef;\n  }\n\n  setCurrentTime(): void {\n    this.date = this.dateService.today();\n    this.onSelectTime.emit({\n      time: this.date,\n      save: true,\n    });\n  }\n\n  setHour(value: number): void {\n    this.updateValue(this.dateService.setHours(this.date, value));\n  }\n\n  setMinute(value: number): void {\n    this.updateValue(this.dateService.setMinutes(this.date, value));\n  }\n\n  setSecond(value: number): void {\n    this.updateValue(this.dateService.setSeconds(this.date, value));\n  }\n\n  selectFullTime(value: D): void {\n    this.updateValue(value);\n  }\n\n  changeDayPeriod(dayPeriodToSet: NbDayPeriod): void {\n    if (this.dateService.getDayPeriod(this.date) === dayPeriodToSet) {\n      return;\n    }\n\n    // Subtract hours when switching to AM (before midday, 0-11 in 24-hour) from PM (after midday, 12-24 in 24-hour),\n    // otherwise add hours because switching to PM from AM.\n    const direction = dayPeriodToSet === NbDayPeriod.AM ? -1 : 1;\n    const increment = direction * this.dateService.HOURS_IN_DAY_PERIOD;\n    this.updateValue(this.dateService.addHours(this.date, increment));\n  }\n\n  updateValue(date: D): void {\n    this.onSelectTime.emit({time: date});\n  }\n\n  saveValue(): void {\n    this.onSelectTime.emit({\n      time: this.date,\n      save: true,\n    });\n  }\n\n  trackByTimeValues(index, item: NbTimePartOption): number {\n    return item.value;\n  }\n\n  trackBySingleColumnValue(index, item: D) {\n    return this.dateService.valueOf(item);\n  }\n\n  trackByDayPeriod(index, item: NbDayPeriod): string {\n    return item;\n  }\n\n  showSeconds(): boolean {\n    return this.withSeconds && !this.singleColumn;\n  }\n\n  isSelectedHour(val: number): boolean {\n    if (this.date) {\n      return this.dateService.getHours(this.date) === val;\n    }\n\n    return false;\n  }\n\n  isSelectedMinute(val: number): boolean {\n    if (this.date) {\n      return this.dateService.getMinutes(this.date) === val;\n    }\n\n    return false;\n  }\n\n  isSelectedSecond(val: number): boolean {\n    if (this.date) {\n      return this.dateService.getSeconds(this.date) === val;\n    }\n\n    return false;\n  }\n\n  isSelectedDayPeriod(dayPeriod: NbDayPeriod): boolean {\n    if (this.date) {\n      return dayPeriod === this.dateService.getDayPeriod(this.date);\n    }\n\n    return false;\n  }\n\n  getFullTimeString(item: D): string {\n    return this.dateService.format(item, this.timeFormat).toUpperCase();\n  }\n\n  isSelectedFullTimeValue(value: D): boolean {\n    if (this.date) {\n      return this.dateService.isSameHourAndMinute(value, this.date);\n    }\n\n    return false;\n  }\n\n  protected buildColumnOptions(): void {\n    this.timeFormat = this.setupTimeFormat();\n    this.fullTimeOptions = this.singleColumn\n      ? this.calendarTimeModelService.getHoursRange(this.step)\n      : [];\n\n    this.hoursColumnOptions = this.generateHours();\n    this.minutesColumnOptions = this.generateMinutesOrSeconds();\n    this.secondsColumnOptions = this.withSeconds ? this.generateMinutesOrSeconds() : [];\n  }\n\n  /**\n   * @docs-private\n   */\n  isFirefox(): boolean {\n    return this.platformService.FIREFOX;\n  }\n\n  protected generateHours(): NbTimePartOption[] {\n    if (!this.twelveHoursFormat) {\n      return range(24, (v: number) => {\n        return {value: v, text: this.calendarTimeModelService.paddToTwoSymbols(v)};\n      });\n    }\n\n    if (this.isAM) {\n      return (range(12, (v: number) => {\n        const text = v === 0 ? 12 : v;\n        return {value: v, text: this.calendarTimeModelService.paddToTwoSymbols(text)}\n      }));\n    }\n\n    return (rangeFromTo(12, 24, (v: number) => {\n      const text = v === 12 ? 12 : (v - 12);\n      return {value: v, text: this.calendarTimeModelService.paddToTwoSymbols(text)}\n    }));\n  }\n\n  protected generateMinutesOrSeconds(): NbTimePartOption[] {\n    return range(60, (v: number) => {\n      return {value: v, text: this.calendarTimeModelService.paddToTwoSymbols(v)};\n    });\n  }\n\n  protected setupTimeFormat(): string {\n    if (!this.timeFormat) {\n      return this.config.format || this.buildTimeFormat();\n    }\n\n    return this.timeFormat;\n  }\n\n  /**\n   * @docs-private\n   */\n  buildTimeFormat(): string {\n    if (this.twelveHoursFormat) {\n      return `${this.withSeconds && !this.singleColumn ? this.dateService.getTwelveHoursFormatWithSeconds()\n        : this.dateService.getTwelveHoursFormat()}`;\n    } else {\n      return `${this.withSeconds && !this.singleColumn ? this.dateService.getTwentyFourHoursFormatWithSeconds()\n        : this.dateService.getTwentyFourHoursFormat()}`;\n    }\n  }\n\n  protected initFromConfig(config: NbTimePickerConfig) {\n    if (config) {\n      this.twelveHoursFormat = config.twelveHoursFormat;\n    } else {\n      this.twelveHoursFormat = this.dateService.getLocaleTimeFormat().includes('h');\n    }\n\n    const localeConfig = { ...NB_DEFAULT_TIMEPICKER_LOCALIZATION_CONFIG, ...config?.localization ?? {} };\n    this.hoursText = localeConfig.hoursText;\n    this.minutesText = localeConfig.minutesText;\n    this.secondsText = localeConfig.secondsText;\n    this.ampmText = localeConfig.ampmText;\n  }\n}\n"]}