{"version":3,"file":"timepicker.directive.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/timepicker/timepicker.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  isDevMode,\n  Renderer2,\n} from '@angular/core';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NbTimePickerComponent } from './timepicker.component';\nimport { NbOverlayRef, NbScrollStrategy } from '../cdk/overlay/mapping';\nimport {\n  NbAdjustableConnectedPositionStrategy,\n  NbAdjustment,\n  NbPosition,\n  NbPositionBuilderService,\n} from '../cdk/overlay/overlay-position';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { NbTrigger, NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\nimport { NbSelectedTimePayload } from './model';\nimport { NbDateService } from '../calendar-kit/services/date.service';\nimport { NbCalendarTimeModelService } from '../calendar-kit/services/calendar-time-model.service';\nimport { NB_DOCUMENT } from '../../theme.options';\n\n/**\n * The `NbTimePickerDirective` is form control that gives you ability to select a time. The timepicker\n * is shown when input receives a `focus` event.\n * ```html\n * <input [nbTimepicker]=\"timepicker\">\n * <nb-timepicker #timepicker></nb-timepicker>\n * ```\n *\n * @stacked-example(Showcase, timepicker/timepicker-showcase.component)\n *\n * ### Installation\n *\n * Import `NbTimepickerModule.forRoot()` to your root module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTimepickerModule.forRoot(),\n *   ],\n * })\n * export class AppModule { }\n * ```\n * And `NbTimepickerModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTimepickerModule,\n *   ],\n * })\n * export class PageModule { }\n *\n * ```\n * <div id=\"native-parse-issue\" class=\"note note-warning\">\n * <div class=\"note-title\">Note</div>\n * <div class=\"note-body\">\n * Timepicker uses native Date object by default, which doesn't support parsing by custom format.\n * According to the ECMAScript specification, the only supported format is a format described by ISO 8061 standard.\n * This standard requires date part to be included in the date string,\n * meaning you have to type a date+time in the input.\n * We highly recommend you to use NbDateFnsDateModule or NbMomentDateModule to be able to support time only strings in\n * the timepicker inputs. These modules use date-fns and moment date libraries, which provide capabilities\n * to parse time only strings.\n * See \"Formatting Issue\" at\n * <a href=\"https://akveo.github.io/nebular/docs/components/datepicker/overview#formatting-issue\">Date picker docs</a>\n * for installation instructions.\n * </div>\n * </div>\n * <hr>\n *\n * ### Usage\n *\n * To show seconds column along with hours and minutes use `withSeconds` input\n *\n * ```html\n * <input [nbTimepicker]=\"timepicker\">\n * <nb-timepicker #timepicker withSeconds></nb-timepicker>\n * ```\n * @stacked-example(Time picker with seconds, timepicker/timepicker-with-seconds.component)\n *\n * To force timepicker work in 12 hours format, use `twelveHoursFormat` input.\n * By default, timepicker choose 12 or 24 formats based on application locale standards\n *\n * ```html\n * <input [nbTimepicker]=\"timepicker\" twelveHoursFormat>\n * <nb-timepicker #timepicker></nb-timepicker>\n * ```\n *\n * @stacked-example(Twelve hours format showcase, timepicker/timepicker-twelve-hours-format.component)\n *\n * A single column picker with options value as time and minute, so users won’t be able to pick\n * hours and minutes individually.\n * You can control options minutes offset via `step` input, e.g.: 11:00, 11:20, 11:40...'\n *\n * @stacked-example(Single column, timepicker/timepicker-single-column.component)\n *\n * Timepicker support forms and reactive forms API so you can provide value using `formControl` and `ngModel` directives\n * @stacked-example(Form control, timepicker/timepicker-form-control.component)\n *\n * <input [nbTimepicker]=\"timepicker\" twelveHoursFormat>\n * <nb-timepicker #timepicke [formControl]=\"formControl\"></nb-timepicker>\n *\n * @stacked-example(NgModel, timepicker/timepicker-ng-model.component)\n *\n * <input [nbTimepicker]=\"timepicker\" twelveHoursFormat>\n * <nb-timepicker #timepicke [ngModel]=\"date\"></nb-timepicker>\n *\n * You can provide localized versions of the timepicker text via the `localization` property of the config\n * object passed to the `forRoot` or `forChild` methods of the `NbTimepickerModule`:\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTimepickerModule.forRoot({\n *       localization: {\n *         hoursText: 'Hr',\n *         minutesText: 'Min',\n *         secondsText: 'Sec',\n *         ampmText: 'Am/Pm',\n *       }\n *     }),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * @styles\n *\n * timepicker-cell-text-color:\n * timepicker-cell-hover-background-color:\n * timepicker-cell-hover-text-color:\n * timepicker-cell-focus-background-color:\n * timepicker-cell-focus-text-color:\n * timepicker-cell-active-background-color:\n * timepicker-cell-active-text-color:\n * timepicker-cell-text-font-size:\n * timepicker-cell-text-font-family:\n * timepicker-cell-text-line-height:\n * timepicker-cell-text-font-weight:\n * timepicker-cell-height:\n * timepicker-header-cell-text-color:\n * timepicker-header-cell-text-font-size:\n * timepicker-header-cell-text-font-family:\n * timepicker-header-cell-height:\n * timepicker-header-cell-text-line-height:\n * timepicker-header-cell-text-font-weight:\n * timepicker-border-color:\n * timepicker-border-style:\n * timepicker-border-width:\n * timepicker-scrollbar-color:\n * timepicker-scrollbar-background-color:\n * timepicker-scrollbar-width:\n * timepicker-single-column-width:\n * timepicker-multiple-column-width:\n * timepicker-title-height:\n * timepicker-title-padding:\n * timepicker-container-width:\n * timepicker-container-height:\n * */\n@Directive({\n  selector: 'input[nbTimepicker]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NbTimePickerDirective),\n    multi: true,\n  }],\n})\nexport class NbTimePickerDirective<D> implements AfterViewInit, ControlValueAccessor {\n  /**\n   * Provides timepicker component.\n   * */\n  @Input('nbTimepicker')\n  get timepicker(): NbTimePickerComponent<D> {\n    return this._timePickerComponent;\n  }\n\n  set timepicker(timePicker: NbTimePickerComponent<D>) {\n    this._timePickerComponent = timePicker;\n  }\n  protected _timePickerComponent: NbTimePickerComponent<D>;\n\n  /**\n   * Time picker overlay offset.\n   * */\n  @Input() overlayOffset = 8;\n\n\n  /**\n   * String representation of latest selected date.\n   * Updated when value is updated programmatically (writeValue), via timepicker (subscribeOnApplyClick)\n   * or via input field (handleInputChange)\n   * @docs-private\n   */\n  protected lastInputValue: string;\n  /**\n   * Positioning strategy used by overlay.\n   * @docs-private\n   * */\n  protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n  protected overlayRef: NbOverlayRef;\n  protected destroy$: Subject<void> = new Subject<void>();\n  protected onChange: (value: D) => void = () => {\n  };\n  protected onTouched = () => {\n  };\n  /**\n   * Trigger strategy used by overlay.\n   * @docs-private\n   * */\n  protected triggerStrategy: NbTriggerStrategy;\n\n  /**\n   * Returns html input element.\n   * @docs-private\n   * */\n  get input(): HTMLInputElement {\n    return this.hostRef.nativeElement;\n  }\n\n  /**\n   * Determines is timepicker overlay opened.\n   * @docs-private\n   * */\n  get isOpen(): boolean {\n    return this.overlayRef && this.overlayRef.hasAttached();\n  }\n\n  /**\n   * Determines is timepicker overlay closed.\n   * @docs-private\n   * */\n  get isClosed(): boolean {\n    return !this.isOpen;\n  }\n\n  constructor(@Inject(NB_DOCUMENT) protected document,\n              protected positionBuilder: NbPositionBuilderService,\n              protected hostRef: ElementRef,\n              protected triggerStrategyBuilder: NbTriggerStrategyBuilderService,\n              protected overlay: NbOverlayService,\n              protected cd: ChangeDetectorRef,\n              protected calendarTimeModelService: NbCalendarTimeModelService<D>,\n              protected dateService: NbDateService<D>,\n              protected renderer: Renderer2,\n              @Attribute('placeholder') protected placeholder: string) {\n  }\n\n  /**\n   * Returns host input value.\n   * @docs-private\n   * */\n  get inputValue(): string {\n    return this.input.value;\n  }\n\n  set inputValue(value: string) {\n    this.input.value = value;\n  }\n\n  ngAfterViewInit() {\n    this.subscribeOnInputChange();\n\n    if (!this.placeholder) {\n      this.renderer.setProperty(this.input, 'placeholder', this.timepicker.timeFormat);\n    }\n    this.triggerStrategy = this.createTriggerStrategy();\n    this.subscribeOnTriggers();\n    this.subscribeToBlur();\n  }\n\n  show() {\n    if (this.isClosed) {\n      this.attachToOverlay();\n    }\n  }\n\n  hide() {\n    if (this.isOpen) {\n      this.overlayRef.detach();\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Attaches picker to the timepicker portal.\n   * @docs-private\n   * */\n  protected attachToOverlay() {\n    if (!this.overlayRef) {\n      this.setupTimepicker();\n      this.initOverlay();\n    }\n    this.overlayRef.attach(this.timepicker.portal);\n  }\n\n  setupTimepicker() {\n    if (this.dateService.getId() === 'native' && isDevMode()) {\n      console.warn('Date.parse does not support parsing time with custom format.' +\n        ' See details here https://akveo.github.io/nebular/docs/components/datepicker/overview#native-parse-issue')\n    }\n    this.timepicker.setHost(this.hostRef);\n    if (this.inputValue) {\n      const val = this.dateService.getId() === 'native' ? this.parseNativeDateString(this.inputValue) : this.inputValue;\n      this.timepicker.date = this.dateService.parse(val, this.timepicker.timeFormat);\n    } else {\n      this.timepicker.date = this.calendarTimeModelService.getResetTime();\n    }\n  }\n\n  protected initOverlay() {\n    this.positionStrategy = this.createPositionStrategy();\n    this.subscribeOnApplyClick();\n    this.createOverlay();\n  }\n\n  protected subscribeOnApplyClick() {\n    this.timepicker.onSelectTime.pipe(takeUntil(this.destroy$)).subscribe((value: NbSelectedTimePayload<D>) => {\n      const time = this.dateService.format(value.time, this.timepicker.timeFormat).toUpperCase();\n      this.inputValue = time;\n      this.timepicker.date = value.time;\n      this.onChange(value.time);\n      if (value.save) {\n        this.lastInputValue = time;\n        this.hide();\n      }\n    });\n  }\n\n  protected createOverlay() {\n    const scrollStrategy = this.createScrollStrategy();\n    this.overlayRef = this.overlay.create(\n      {positionStrategy: this.positionStrategy, scrollStrategy});\n  }\n\n  protected subscribeOnTriggers() {\n    this.triggerStrategy.show$\n    .pipe(filter(() => this.isClosed))\n    .subscribe(() => this.show());\n\n    this.triggerStrategy.hide$\n    .pipe(filter(() => this.isOpen))\n    .subscribe(() => {\n      this.inputValue = this.lastInputValue || '';\n      this.hide();\n    });\n  }\n\n  protected createTriggerStrategy(): NbTriggerStrategy {\n    return this.triggerStrategyBuilder\n    .trigger(NbTrigger.FOCUS)\n    .host(this.hostRef.nativeElement)\n    .container(() => this.getContainer())\n    .build();\n  }\n\n  protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy {\n    return this.positionBuilder\n    .connectedTo(this.hostRef)\n    .position(NbPosition.BOTTOM)\n    .offset(this.overlayOffset)\n    .adjustment(NbAdjustment.VERTICAL);\n  }\n\n  protected getContainer() {\n    return this.overlayRef && this.isOpen && <ComponentRef<any>>{\n      location: {\n        nativeElement: this.overlayRef.overlayElement,\n      },\n    };\n  }\n\n  protected createScrollStrategy(): NbScrollStrategy {\n    return this.overlay.scrollStrategies.block();\n  }\n\n  protected subscribeOnInputChange() {\n    fromEvent(this.input, 'input')\n    .pipe(\n      map(() => this.inputValue),\n      takeUntil(this.destroy$),\n    )\n    .subscribe((value: string) => this.handleInputChange(value));\n  }\n\n  protected subscribeToBlur() {\n    merge(\n      this.timepicker.blur,\n      fromEvent(this.input, 'blur').pipe(\n        filter(() => !this.isOpen && this.document.activeElement !== this.input),\n      ),\n    ).pipe(takeUntil(this.destroy$))\n    .subscribe(() => this.onTouched());\n  }\n\n  /**\n   * Parses input value and write if it isn't null.\n   * @docs-private\n   * */\n  protected handleInputChange(value: string) {\n    if (this.dateService.getId() === 'native') {\n      /**\n       * Native date service dont parse only time string value,\n       * and we adding year mouth and day to convert string to valid date format\n       **/\n      value = this.parseNativeDateString(value);\n    }\n\n    const isValidDate: boolean = this.dateService.isValidDateString(value, this.timepicker.timeFormat);\n    if (isValidDate) {\n      this.lastInputValue = value;\n\n      const date = this.dateService.parse(value, this.timepicker.timeFormat);\n      this.onChange(date);\n      this.timepicker.date = date;\n    }\n  }\n\n  protected updateValue(value: D) {\n    if (value) {\n      this.timepicker.date = value;\n\n      const timeString = this.dateService.format(value, this.timepicker.timeFormat).toUpperCase();\n      this.inputValue = timeString;\n      this.lastInputValue = timeString;\n    }\n  }\n\n  writeValue(value: D): void {\n    this.updateValue(value);\n  }\n\n  registerOnChange(fn: (value: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  protected parseNativeDateString(value: string): string {\n    const date = this.dateService.today();\n    const year = this.dateService.getYear(date);\n    const month = this.calendarTimeModelService.paddToTwoSymbols(this.dateService.getMonth(date));\n    const day = this.calendarTimeModelService.paddToTwoSymbols(this.dateService.getDate(date));\n\n    return `${year}-${month}-${day} ${value}`;\n  }\n}\n"]}