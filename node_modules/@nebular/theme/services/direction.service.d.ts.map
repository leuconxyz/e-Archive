{"version":3,"file":"direction.service.d.ts","sources":["direction.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * Layout direction.\n * */\nexport declare enum NbLayoutDirection {\n    LTR = \"ltr\",\n    RTL = \"rtl\"\n}\n/**\n * Layout direction setting injection token.\n * */\nexport declare const NB_LAYOUT_DIRECTION: InjectionToken<NbLayoutDirection>;\n/**\n * Layout Direction Service.\n * Allows to set or get layout direction and listen to its changes\n */\nexport declare class NbLayoutDirectionService {\n    private direction;\n    private $directionChange;\n    constructor(direction?: NbLayoutDirection);\n    /**\n     * Returns true if layout direction set to left to right.\n     * @returns boolean.\n     * */\n    isLtr(): boolean;\n    /**\n     * Returns true if layout direction set to right to left.\n     * @returns boolean.\n     * */\n    isRtl(): boolean;\n    /**\n     * Returns current layout direction.\n     * @returns NbLayoutDirection.\n     * */\n    getDirection(): NbLayoutDirection;\n    /**\n     * Sets layout direction\n     * @param {NbLayoutDirection} direction\n     */\n    setDirection(direction: NbLayoutDirection): void;\n    /**\n     * Triggered when direction was changed.\n     * @returns Observable<NbLayoutDirection>.\n     */\n    onDirectionChange(): Observable<NbLayoutDirection>;\n}\n"]}