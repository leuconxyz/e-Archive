{"version":3,"file":"ruler.service.d.ts","sources":["ruler.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable, Subject } from 'rxjs';\n/**\n * Layout dimensions type\n */\nexport interface NbLayoutDimensions {\n    /**\n     * clientWidth\n     * @type {number}\n     */\n    clientWidth: number;\n    /**\n     * clientHeight\n     * @type {number}\n     */\n    clientHeight: number;\n    /**\n     * scrollWidth\n     * @type {number}\n     */\n    scrollWidth: number;\n    /**\n     * scrollHeight\n     * @type {number}\n     */\n    scrollHeight: number;\n}\n/**\n * Simple helper service to return Layout dimensions\n * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element\n * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and\n * `.scrollable-container` in the second.\n */\nexport declare class NbLayoutRulerService {\n    private contentDimensionsReq$;\n    /**\n     * Content dimensions\n     * @returns {Observable<NbLayoutDimensions>}\n     */\n    getDimensions(): Observable<NbLayoutDimensions>;\n    /**\n     * @private\n     * @returns {Subject<any>}\n     */\n    onGetDimensions(): Subject<any>;\n}\n"]}