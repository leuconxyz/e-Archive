{"version":3,"file":"tabset.component.d.ts","sources":["tabset.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { EventEmitter, QueryList, AfterContentInit, ChangeDetectorRef } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { NbBooleanInput } from '../helpers';\nimport { NbComponentOrCustomStatus } from '../component-status';\nimport { NbBadgePosition } from '../badge/badge.component';\nimport { NbIconConfig } from '../icon/icon.component';\n/**\n * Specific tab container.\n *\n * ```ts\n * <nb-tab tabTitle=\"Users\"\n *   badgeText=\"99+\"\n *   badgeStatus=\"danger\">\n *   <p>List of <strong>users</strong>.</p>\n * </nb-tab>\n ```\n */\nexport declare class NbTabComponent {\n    /**\n     * Tab title\n     * @type {string}\n     */\n    tabTitle: string;\n    /**\n     * Tab id\n     * @type {string}\n     */\n    tabId: string;\n    /**\n     * Use badge dot mode\n     * @type {boolean}\n     */\n    get badgeDot(): boolean;\n    set badgeDot(val: boolean);\n    protected _badgeDot: boolean;\n    static ngAcceptInputType_badgeDot: NbBooleanInput;\n    /**\n     * Tab icon name or icon config object\n     * @type {string | NbIconConfig}\n     */\n    tabIcon: string | NbIconConfig;\n    /**\n     * Item is disabled and cannot be opened.\n     * @type {boolean}\n     */\n    get disabled(): boolean;\n    set disabled(val: boolean);\n    static ngAcceptInputType_disabled: NbBooleanInput;\n    /**\n     * Show only icons when width is smaller than `tabs-icon-only-max-width`\n     * @type {boolean}\n     */\n    set responsive(val: boolean);\n    get responsive(): boolean;\n    static ngAcceptInputType_responsive: NbBooleanInput;\n    route: string;\n    activeValue: boolean;\n    responsiveValue: boolean;\n    disabledValue: boolean;\n    /**\n     * Specifies active tab\n     * @returns {boolean}\n     */\n    get active(): boolean;\n    set active(val: boolean);\n    static ngAcceptInputType_active: NbBooleanInput;\n    /**\n     * Lazy load content before tab selection\n     * TODO: rename, as lazy is by default, and this is more `instant load`\n     * @param {boolean} val\n     */\n    set lazyLoad(val: boolean);\n    static ngAcceptInputType_lazyLoad: NbBooleanInput;\n    /**\n     * Badge text to display\n     * @type string\n     */\n    badgeText: string;\n    /**\n     * Badge status (adds specific styles):\n     * 'primary', 'info', 'success', 'warning', 'danger'\n     * @param {string} val\n     */\n    badgeStatus: NbComponentOrCustomStatus;\n    /**\n     * Badge position.\n     * Can be set to any class or to one of predefined positions:\n     * 'top left', 'top right', 'bottom left', 'bottom right',\n     * 'top start', 'top end', 'bottom start', 'bottom end'\n     * @type string\n     */\n    badgePosition: NbBadgePosition;\n    init: boolean;\n}\n/**\n *\n * Dynamic tabset component.\n * @stacked-example(Showcase, tabset/tabset-showcase.component)\n *\n * Basic tabset example\n *\n * ```html\n * <nb-tabset>\n *  <nb-tab tabTitle=\"Simple Tab #1\">\n *    Tab content 1\n *  </nb-tab>\n *  <nb-tab tabTitle=\"Simple Tab #2\">\n *    Tab content 2\n *  </nb-tab>\n * </nb-tabset>\n * ```\n *\n * ### Installation\n *\n * Import `NbTabsetModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTabsetModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * It is also possible to set a badge to a particular tab:\n * @stacked-example(Tab With Badge, tabset/tabset-badge.component)\n *\n * and we can set it to full a width of a parent component\n * @stacked-example(Full Width, tabset/tabset-width.component)\n *\n * `tabIcon` should be used to add an icon to the tab. Icon can also be combined with title.\n * `responsive` tab property if set allows you to hide the title on smaller screens\n * (`tabs-icon-only-max-width` property) for better responsive behaviour. You can open the following example and make\n * your screen smaller - titles will be hidden in the last tabset in the list:\n *\n * @stacked-example(Icon, tabset/tabset-icon.component)\n *\n * It is also possible to disable a tab using `disabled` property:\n * @stacked-example(Disabled Tab, tabset/tabset-disabled.component)\n *\n * @styles\n *\n * tabset-background-color:\n * tabset-border-radius:\n * tabset-shadow:\n * tabset-tab-background-color:\n * tabset-tab-padding:\n * tabset-tab-text-color:\n * tabset-tab-text-font-family:\n * tabset-tab-text-font-size:\n * tabset-tab-text-font-weight:\n * tabset-tab-text-line-height:\n * tabset-tab-text-transform:\n * tabset-tab-underline-width:\n * tabset-tab-underline-color:\n * tabset-tab-active-background-color:\n * tabset-tab-active-text-color:\n * tabset-tab-active-underline-color:\n * tabset-tab-focus-background-color:\n * tabset-tab-focus-text-color:\n * tabset-tab-focus-underline-color:\n * tabset-tab-hover-background-color:\n * tabset-tab-hover-text-color:\n * tabset-tab-hover-underline-color:\n * tabset-tab-disabled-background-color:\n * tabset-tab-disabled-text-color:\n * tabset-tab-disabled-underline-color:\n * tabset-divider-color:\n * tabset-divider-style:\n * tabset-divider-width:\n * tabset-content-background-color:\n * tabset-content-padding:\n * tabset-content-text-color:\n * tabset-content-text-font-family:\n * tabset-content-text-font-size:\n * tabset-content-text-font-weight:\n * tabset-content-text-line-height:\n * tabset-scrollbar-color:\n * tabset-scrollbar-background-color:\n * tabset-scrollbar-width:\n * tabset-tab-text-hide-breakpoint:\n */\nexport declare class NbTabsetComponent implements AfterContentInit {\n    private route;\n    private changeDetectorRef;\n    tabs: QueryList<NbTabComponent>;\n    fullWidthValue: boolean;\n    /**\n     * Take full width of a parent\n     * @param {boolean} val\n     */\n    set fullWidth(val: boolean);\n    static ngAcceptInputType_fullWidth: NbBooleanInput;\n    /**\n     * If specified - tabset listens to this parameter and selects corresponding tab.\n     * @type {string}\n     */\n    routeParam: string;\n    /**\n     * Emits when tab is selected\n     * @type EventEmitter<any>\n     */\n    changeTab: EventEmitter<any>;\n    constructor(route: ActivatedRoute, changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    selectTab(selectedTab: NbTabComponent): void;\n}\n"]}