{"version":3,"file":"radio-group.component.d.ts","sources":["radio-group.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy, QueryList, ElementRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { NbBooleanInput } from '../helpers';\nimport { NbComponentOrCustomStatus } from '../component-status';\nimport { NbRadioComponent } from './radio.component';\n/**\n * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.\n * It provides form bindings:\n *\n * ```html\n * <nb-radio-group [(ngModel)]=\"selectedOption\">\n *   <nb-radio value=\"1\">Option 1</nb-radio>\n *   <nb-radio value=\"2\">Option 2</nb-radio>\n *   <nb-radio value=\"3\">Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * Also, you can use `value` and `valueChange` for binding without forms.\n *\n * ```html\n * <nb-radio-group [(value)]=\"selectedOption\">\n *   <nb-radio value=\"1\">Option 1</nb-radio>\n *   <nb-radio value=\"2\">Option 2</nb-radio>\n *   <nb-radio value=\"3\">Option 3</nb-radio>\n * </nb-radio-group>\n * ```\n *\n * Radio items name has to be provided through `name` input property of the radio group.\n *\n * ```html\n * <nb-radio-group name=\"my-radio-group\">\n *   ...\n * </nb-radio-group>\n * ```\n *\n * You can change radio group status by setting `status` input.\n * @stacked-example(Statuses, radio/radio-statuses.component)\n *\n * Also, you can disable the whole group using `disabled` attribute.\n * @stacked-example(Disabled group, radio/radio-disabled-group.component)\n *\n * Radio group supports `ngModel` and reactive forms:\n * @stacked-example(Radio Group with forms, radio/radio-form.component)\n *\n * */\nexport declare class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {\n    protected hostElement: ElementRef<HTMLElement>;\n    protected platformId: any;\n    protected document: any;\n    protected destroy$: Subject<void>;\n    protected onChange: (value: any) => void;\n    protected onTouched: () => void;\n    get value(): any;\n    set value(value: any);\n    protected _value: any;\n    get name(): string;\n    set name(name: string);\n    protected _name: string;\n    get disabled(): boolean;\n    set disabled(disabled: boolean);\n    protected _disabled: boolean;\n    static ngAcceptInputType_disabled: NbBooleanInput;\n    /**\n     * Radio buttons status.\n     * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.\n     */\n    get status(): NbComponentOrCustomStatus;\n    set status(value: NbComponentOrCustomStatus);\n    protected _status: NbComponentOrCustomStatus;\n    radios: QueryList<NbRadioComponent>;\n    valueChange: EventEmitter<any>;\n    constructor(hostElement: ElementRef<HTMLElement>, platformId: any, document: any);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    protected updateAndSubscribeToRadios(): void;\n    protected updateNames(): void;\n    protected updateValues(): void;\n    protected updateDisabled(): void;\n    protected subscribeOnRadiosValueChange(): void;\n    protected propagateValue(value: any): void;\n    protected subscribeOnRadiosBlur(): void;\n    protected updateStatus(): void;\n    protected updateAndMarkForCheckRadios(updateFn: (NbRadioComponent: any) => void): void;\n    protected updateValueFromCheckedOption(): void;\n}\n"]}