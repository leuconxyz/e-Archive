{"version":3,"file":"base-button.d.ts","sources":["base-button.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { NbStatusService } from '../../services/status.service';\nimport { NbBooleanInput } from '../helpers';\nimport { NbComponentSize } from '../component-size';\nimport { NbComponentOrCustomStatus } from '../component-status';\nimport { NbComponentShape } from '../component-shape';\nexport declare type NbButtonAppearance = 'filled' | 'outline' | 'ghost' | 'hero';\nexport declare type NbButtonProperties = Pick<NbButton, 'appearance' | 'size' | 'shape' | 'status' | 'disabled'> & Object;\nexport declare abstract class NbButton implements AfterViewInit {\n    protected renderer: Renderer2;\n    protected hostElement: ElementRef<HTMLElement>;\n    protected cd: ChangeDetectorRef;\n    protected zone: NgZone;\n    protected statusService: NbStatusService;\n    /**\n     * Button size, available sizes:\n     * `tiny`, `small`, `medium`, `large`, `giant`\n     */\n    size: NbComponentSize;\n    /**\n     * Button status (adds specific styles):\n     * `primary`, `info`, `success`, `warning`, `danger`\n     */\n    status: NbComponentOrCustomStatus;\n    /**\n     * Button shapes: `rectangle`, `round`, `semi-round`\n     */\n    shape: NbComponentShape;\n    /**\n     * Button appearance: `filled`, `outline`, `ghost`, `hero`\n     */\n    appearance: NbButtonAppearance;\n    /**\n     * Sets `filled` appearance\n     */\n    get filled(): boolean;\n    set filled(value: boolean);\n    static ngAcceptInputType_filled: NbBooleanInput;\n    /**\n     * Sets `outline` appearance\n     */\n    get outline(): boolean;\n    set outline(value: boolean);\n    static ngAcceptInputType_outline: NbBooleanInput;\n    /**\n     * Sets `ghost` appearance\n     */\n    get ghost(): boolean;\n    set ghost(value: boolean);\n    static ngAcceptInputType_ghost: NbBooleanInput;\n    /**\n     * If set element will fill its container\n     */\n    get fullWidth(): boolean;\n    set fullWidth(value: boolean);\n    private _fullWidth;\n    static ngAcceptInputType_fullWidth: NbBooleanInput;\n    /**\n     * Disables the button\n     */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    static ngAcceptInputType_disabled: NbBooleanInput;\n    /**\n     * Tabindex of the button.\n     */\n    tabIndex: number;\n    get tabbable(): string;\n    get tiny(): boolean;\n    get small(): boolean;\n    get medium(): boolean;\n    get large(): boolean;\n    get giant(): boolean;\n    get rectangle(): boolean;\n    get round(): boolean;\n    get semiRound(): boolean;\n    get iconLeft(): boolean;\n    get iconRight(): boolean;\n    get additionalClasses(): string[];\n    protected constructor(renderer: Renderer2, hostElement: ElementRef<HTMLElement>, cd: ChangeDetectorRef, zone: NgZone, statusService: NbStatusService);\n    ngAfterViewInit(): void;\n    /**\n     * @docs-private\n     **/\n    updateProperties(config: Partial<NbButtonProperties>): void;\n    get iconElement(): Element;\n}\n"]}