{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';\nimport { NbDynamicOverlay, NbDynamicOverlayController } from '../cdk/overlay/dynamic/dynamic-overlay';\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\nimport { NbAdjustment, NbPosition, NbPositionValues, NbAdjustmentValues } from '../cdk/overlay/overlay-position';\nimport { NbOverlayContent } from '../cdk/overlay/overlay-service';\nimport { NbTrigger, NbTriggerValues } from '../cdk/overlay/overlay-trigger';\nimport { NbOverlayConfig } from '../cdk/overlay/mapping';\nimport { NbPopoverComponent } from './popover.component';\nimport { Subject } from 'rxjs';\n/**\n * Powerful popover directive, which provides the best UX for your users.\n *\n * @stacked-example(Showcase, popover/popover-showcase.component)\n *\n * Popover can accept different content such as:\n * TemplateRef\n *\n * ```html\n * <button [nbPopover]=\"templateRef\"></button>\n * <ng-template #templateRef>\n *   <span>Hello, Popover!</span>\n * </ng-template>\n * ```\n * ### Installation\n *\n * Import `NbPopoverModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbPopoverModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * Custom components\n *\n * ```html\n * <button [nbPopover]=\"MyPopoverComponent\"></button>\n * ```\n *\n * Both custom components and templateRef popovers can receive *contentContext* property\n * that will be passed to the content props.\n *\n * Primitive types\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\"></button>\n * ```\n *\n * Popover has different placements, such as: top, bottom, left, right, start and end\n * which can be used as following:\n *\n * @stacked-example(Placements, popover/popover-placements.component)\n *\n * By default popover will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change position of the popover container.\n * If you want to disable this behaviour set it `noop`.\n *\n * ```html\n * <button nbPopover=\"Hello, Popover!\" nbPopoverAdjustment=\"noop\"></button>\n * ```\n *\n * Popover has a number of triggers which provides an ability to show and hide the component in different ways:\n *\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\n * somewhere on the document outside the component.\n * - Hint provides capability to show the component when the user hovers over the host element\n * and hide when the user hovers out of the host.\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\n * the container element the component remains open, so that it is possible to interact with it content.\n * - Focus mode is applied when user focuses the element.\n * - Noop mode - the component won't react to the user interaction.\n *\n * @stacked-example(Available Triggers, popover/popover-modes.component.html)\n *\n * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide\n * as a result of some third-party action, like HTTP request or validation check:\n *\n * @stacked-example(Manual Control, popover/popover-noop.component)\n *\n * Below are examples for manual popover settings control, both via template binding and code.\n * @stacked-example(Popover Settings, popover/popover-dynamic.component)\n *\n * Please note, while manipulating Popover setting via code, you need to call `rebuild()` method to apply the settings\n * changed.\n * @stacked-example(Popover Settings Code, popover/popover-dynamic-code.component)\n *\n * @additional-example(Template Ref, popover/popover-template-ref.component)\n * @additional-example(Custom Component, popover/popover-custom-component.component)\n * */\nexport declare class NbPopoverDirective implements NbDynamicOverlayController, OnChanges, AfterViewInit, OnDestroy, OnInit {\n    protected hostRef: ElementRef;\n    protected dynamicOverlayHandler: NbDynamicOverlayHandler;\n    protected popoverComponent: typeof NbPopoverComponent;\n    protected dynamicOverlay: NbDynamicOverlay;\n    protected destroy$: Subject<void>;\n    /**\n     * Popover content which will be rendered in NbArrowedOverlayContainerComponent.\n     * Available content: template ref, component and any primitive.\n     * */\n    content: NbOverlayContent;\n    /**\n     * Container content context. Will be applied to the rendered component.\n     * */\n    context: Object;\n    /**\n     * Position will be calculated relatively host element based on the position.\n     * Can be top, right, bottom, left, start or end.\n     * */\n    position: NbPosition;\n    static ngAcceptInputType_position: NbPositionValues;\n    /**\n     * Container position will be changes automatically based on this strategy if container can't fit view port.\n     * Set this property to `noop` value if you want to disable automatically adjustment.\n     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.\n     * */\n    get adjustment(): NbAdjustment;\n    set adjustment(value: NbAdjustment);\n    protected _adjustment: NbAdjustment;\n    static ngAcceptInputType_adjustment: NbAdjustmentValues;\n    /**\n     * Describes when the container will be shown.\n     * Available options: `click`, `hover`, `hint`, `focus` and `noop`\n     * */\n    trigger: NbTrigger;\n    static ngAcceptInputType_trigger: NbTriggerValues;\n    /**\n     * Sets popover offset\n     * */\n    offset: number;\n    get popoverClass(): string;\n    set popoverClass(value: string);\n    _popoverClass: string;\n    nbPopoverShowStateChange: EventEmitter<{\n        isShown: boolean;\n    }>;\n    protected overlayConfig: NbOverlayConfig;\n    get isShown(): boolean;\n    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngAfterViewInit(): void;\n    rebuild(): void;\n    show(): void;\n    hide(): void;\n    toggle(): void;\n    ngOnDestroy(): void;\n    protected configureDynamicOverlay(): NbDynamicOverlayHandler;\n}\n"]}