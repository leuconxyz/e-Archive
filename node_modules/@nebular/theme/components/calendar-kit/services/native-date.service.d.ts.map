{"version":3,"file":"native-date.service.d.ts","sources":["native-date.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { DatePipe, TranslationWidth } from '@angular/common';\nimport { NbDateService } from './date.service';\n/**\n * The `NbNativeDateService` is basic implementation of `NbDateService` using\n * native js date objects and angular localization services.\n * */\nexport declare class NbNativeDateService extends NbDateService<Date> {\n    protected datePipe: DatePipe;\n    constructor(locale: string);\n    setLocale(locale: string): void;\n    setHours(date: Date, hour: number): Date;\n    setMinutes(date: Date, minute: number): Date;\n    setSeconds(date: Date, second: number): Date;\n    setMilliseconds(date: Date, second: number): Date;\n    isValidDateString(date: string, format: string): boolean;\n    isValidTimeString(date: string, format: string): boolean;\n    today(): Date;\n    getLocaleTimeFormat(): string;\n    getDate(date: Date): number;\n    getMonth(date: Date): number;\n    getYear(date: Date): number;\n    getDayOfWeek(date: Date): number;\n    /**\n     * returns first day of the week, it can be 1 if week starts from monday\n     * and 0 if from sunday and so on.\n     * */\n    getFirstDayOfWeek(): number;\n    getMonthName(date: Date, style?: TranslationWidth): string;\n    getMonthNameByIndex(index: number, style?: TranslationWidth): string;\n    getDayOfWeekNames(): string[];\n    format(date: Date, format: string): string;\n    /**\n     * We haven't got capability to parse date using formatting without third party libraries.\n     * */\n    parse(date: string, format: string): Date;\n    addDay(date: Date, num: number): Date;\n    addMonth(date: Date, num: number): Date;\n    addMinutes(date: Date, minute: number): Date;\n    addHours(date: Date, hour: number): Date;\n    getHours(date: Date): number;\n    getMinutes(date: Date): number;\n    getSeconds(date: Date): number;\n    getMilliseconds(date: Date): number;\n    addYear(date: Date, num: number): Date;\n    clone(date: Date): Date;\n    compareDates(date1: Date, date2: Date): number;\n    createDate(year: number, month: number, date: number): Date;\n    getMonthEnd(date: Date): Date;\n    getMonthStart(date: Date): Date;\n    getNumberOfDaysInMonth(date: Date): number;\n    getYearEnd(date: Date): Date;\n    getYearStart(date: Date): Date;\n    valueOf(date: Date): number;\n    isSameDay(date1: Date, date2: Date): boolean;\n    isSameMonth(date1: Date, date2: Date): boolean;\n    isSameYear(date1: Date, date2: Date): boolean;\n    getId(): string;\n    getWeekNumber(date: Date): number;\n    getDateFormat(): string;\n    getTwelveHoursFormat(): string;\n}\n"]}