{"version":3,"file":"tag-input.directive.d.ts","sources":["tag-input.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { AfterViewInit, ElementRef, EventEmitter, NgZone, Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NbStatusService } from '../../services/status.service';\nimport { NbFocusMonitor } from '../cdk/a11y/a11y.module';\nimport { NbInputDirective } from '../input/input.directive';\nexport interface NbTagInputAddEvent {\n    input: ElementRef<HTMLInputElement>;\n    value: string;\n}\n/**\n *\n * `[nbTagInput]` directive connects input with a `nb-tag-list` component.\n *\n * @stacked-example(Tag Input, tag/tag-input.component)\n *\n * @additional-example(Tag Input with Autocomplete, tag/tag-input-with-autocomplete.component)\n *\n * @styles\n *\n * tag-list-tiny-tag-offset:\n * tag-list-small-tag-offset:\n * tag-list-medium-tag-offset:\n * tag-list-large-tag-offset:\n * tag-list-giant-tag-offset:\n * tag-list-with-input-tiny-padding:\n * tag-list-with-input-small-padding:\n * tag-list-with-input-medium-padding:\n * tag-list-with-input-large-padding:\n * tag-list-with-input-giant-padding:\n */\nexport declare class NbTagInputDirective extends NbInputDirective implements AfterViewInit {\n    _hostElement: ElementRef<HTMLInputElement>;\n    protected focusMonitor: NbFocusMonitor;\n    protected renderer: Renderer2;\n    protected zone: NgZone;\n    protected statusService: NbStatusService;\n    protected readonly keyDown$: Subject<KeyboardEvent>;\n    get _value(): string;\n    /**\n     * Controls which keys should trigger tag add event.\n     */\n    separatorKeys: number[];\n    /**\n     * Emits when a tag need to be added.\n     */\n    tagAdd: EventEmitter<NbTagInputAddEvent>;\n    readonly nbTagInputClass = true;\n    _onKeydown(event: KeyboardEvent): void;\n    constructor(_hostElement: ElementRef<HTMLInputElement>, focusMonitor: NbFocusMonitor, renderer: Renderer2, zone: NgZone, statusService: NbStatusService);\n    ngAfterViewInit(): void;\n    protected isSeparatorKey(keyCode: number): boolean;\n}\n"]}