{"version":3,"file":"accordion-item.component.d.ts","sources":["accordion-item.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectorRef, EventEmitter, SimpleChanges, OnInit, OnChanges, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NbAccordionComponent } from './accordion.component';\nimport { NbBooleanInput } from '../helpers';\n/**\n * Component intended to be used within `<nb-accordion>` component\n */\nexport declare class NbAccordionItemComponent implements OnInit, OnChanges, OnDestroy {\n    private accordion;\n    private cd;\n    /**\n     * Item is collapse (`true` by default)\n     * @type {boolean}\n     */\n    get collapsed(): boolean;\n    set collapsed(val: boolean);\n    static ngAcceptInputType_collapsed: NbBooleanInput;\n    /**\n     * Item is expanded (`false` by default)\n     * @type {boolean}\n     */\n    get expanded(): boolean;\n    set expanded(val: boolean);\n    static ngAcceptInputType_expanded: NbBooleanInput;\n    /**\n     * Item is disabled and cannot be opened.\n     * @type {boolean}\n     */\n    get disabled(): boolean;\n    set disabled(val: boolean);\n    static ngAcceptInputType_disabled: NbBooleanInput;\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     */\n    collapsedChange: EventEmitter<boolean>;\n    accordionItemInvalidate: Subject<boolean>;\n    private collapsedValue;\n    private disabledValue;\n    private destroy$;\n    constructor(accordion: NbAccordionComponent, cd: ChangeDetectorRef);\n    /**\n     * Open/close the item\n     */\n    toggle(): void;\n    /**\n     * Open the item.\n     */\n    open(): void;\n    /**\n     * Collapse the item.\n     */\n    close(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private invalidate;\n}\n"]}