{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NbComponentOrCustomStatus } from '../component-status';\nimport { NbAdjustment, NbPosition, NbPositionValues, NbAdjustmentValues } from '../cdk/overlay/overlay-position';\nimport { NbTrigger } from '../cdk/overlay/overlay-trigger';\nimport { NbDynamicOverlay } from '../cdk/overlay/dynamic/dynamic-overlay';\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\nimport { NbOverlayConfig } from '../cdk/overlay/mapping';\nimport { NbTooltipComponent } from './tooltip.component';\nimport { NbIconConfig } from '../icon/icon.component';\n/**\n *\n * Tooltip directive for small text/icon hints.\n *\n * ### Installation\n *\n * Import `NbTooltipModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbTooltipModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * @stacked-example(Showcase, tooltip/tooltip-showcase.component)\n *\n * Tooltip can accept a hint text and/or an icon:\n * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)\n *\n * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:\n * @stacked-example(Placements, tooltip/tooltip-placements.component)\n *\n * It is also possible to specify tooltip color using `nbTooltipStatus` property:\n * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)\n *\n * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:\n *\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\n * somewhere on the document outside the component.\n * - Hint provides capability to show the component when the user hovers over the host element\n * and hide when the user hovers out of the host.\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\n * the container element the component remains open, so that it is possible to interact with it content.\n * - Focus mode is applied when user focuses the element.\n * - Noop mode - the component won't react to the user interaction.\n */\nexport declare class NbTooltipDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    protected hostRef: ElementRef;\n    protected dynamicOverlayHandler: NbDynamicOverlayHandler;\n    protected destroy$: Subject<void>;\n    protected tooltipComponent: typeof NbTooltipComponent;\n    protected dynamicOverlay: NbDynamicOverlay;\n    context: Object;\n    /**\n     * Tooltip message\n     */\n    content: string;\n    /**\n     * Position will be calculated relatively host element based on the position.\n     * Can be top, right, bottom, left, start or end.\n     */\n    position: NbPosition;\n    static ngAcceptInputType_position: NbPositionValues;\n    /**\n     * Container position will change automatically based on this strategy if container can't fit view port.\n     * Set this property to `noop` value if you want to disable automatic adjustment.\n     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.\n     */\n    get adjustment(): NbAdjustment;\n    set adjustment(value: NbAdjustment);\n    protected _adjustment: NbAdjustment;\n    static ngAcceptInputType_adjustment: NbAdjustmentValues;\n    get tooltipClass(): string;\n    set tooltipClass(value: string);\n    _tooltipClass: string;\n    /**\n     * Accepts icon name or icon config object\n     * @param {string | NbIconConfig} icon name or config object\n     */\n    set icon(icon: string | NbIconConfig);\n    /**\n     *\n     * @param {string} status\n     */\n    set status(status: NbComponentOrCustomStatus);\n    /**\n     * Describes when the container will be shown.\n     * Available options: `click`, `hover`, `hint`, `focus` and `noop`\n     * */\n    trigger: NbTrigger;\n    /**\n     * Determines tooltip overlay offset (in pixels).\n     **/\n    offset: number;\n    nbTooltipShowStateChange: EventEmitter<{\n        isShown: boolean;\n    }>;\n    protected overlayConfig: NbOverlayConfig;\n    get isShown(): boolean;\n    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngAfterViewInit(): void;\n    rebuild(): void;\n    show(): void;\n    hide(): void;\n    toggle(): void;\n    ngOnDestroy(): void;\n    protected configureDynamicOverlay(): NbDynamicOverlayHandler;\n}\n"]}