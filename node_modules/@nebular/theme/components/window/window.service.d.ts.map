{"version":3,"file":"window.service.d.ts","sources":["window.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactoryResolver, ComponentRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NbComponentType, NbOverlayPositionBuilder, NbOverlayRef } from '../cdk/overlay/mapping';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { NbBlockScrollStrategyAdapter } from '../cdk/adapter/block-scroll-strategy-adapter';\nimport { NbWindowConfig } from './window.options';\nimport { NbWindowRef } from './window-ref';\nimport { NbWindowComponent } from './window.component';\n/**\n * The `NbWindowService` can be used to open windows.\n *\n * @stacked-example(Showcase, window/window-showcase.component)\n *\n * ### Installation\n *\n * Import `NbWindowModule` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbWindowModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * If you are using it in a lazy loaded module than you have to install `NbWindowModule.forChild`:\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbWindowModule.forChild(config),\n *   ],\n * })\n * export class LazyLoadedModule { }\n * ```\n *\n * ### Usage\n *\n * A new window can be opened by calling the `open` method with a component or template to be loaded\n * and an optional configuration.\n * `open` method will return `NbWindowRef` that can be used for the further manipulations.\n *\n * ```ts\n * const windowRef = this.windowService.open(MyComponent, { ... });\n * ```\n *\n * `NbWindowRef` gives you ability manipulate opened window.\n * Also, you can inject `NbWindowRef` inside provided component which rendered in window.\n *\n * ```ts\n * this.windowService.open(MyWindowComponent, { ... });\n *\n * // my.component.ts\n * constructor(protected windowRef: NbWindowRef) {\n * }\n *\n * minimize() {\n *   this.windowRef.minimize();\n * }\n *\n * close() {\n *   this.windowRef.close();\n * }\n * ```\n *\n * Instead of component you can create window from TemplateRef. As usual you can access context provided via config\n * via `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property.\n *\n * @stacked-example(Window content from TemplateRef, window/template-window.component)\n *\n * ### Configuration\n *\n * As mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.\n * Also, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.\n * You can read about all available options on [API tab](docs/components/window/api#nbwindowconfig).\n *\n * @stacked-example(Configuration, window/windows-backdrop.component)\n *\n * You can configure which buttons are available in a window via the `buttons` property of the window config.\n * @stacked-example(Control buttons, window/window-controls.component)\n *\n */\nexport declare class NbWindowService {\n    protected componentFactoryResolver: ComponentFactoryResolver;\n    protected overlayService: NbOverlayService;\n    protected overlayPositionBuilder: NbOverlayPositionBuilder;\n    protected blockScrollStrategy: NbBlockScrollStrategyAdapter;\n    protected readonly defaultWindowsConfig: NbWindowConfig;\n    protected cfr: ComponentFactoryResolver;\n    protected document: Document;\n    protected overlayRef: NbOverlayRef;\n    protected windowsContainerViewRef: ViewContainerRef;\n    protected openWindows: NbWindowRef[];\n    constructor(componentFactoryResolver: ComponentFactoryResolver, overlayService: NbOverlayService, overlayPositionBuilder: NbOverlayPositionBuilder, blockScrollStrategy: NbBlockScrollStrategyAdapter, defaultWindowsConfig: NbWindowConfig, cfr: ComponentFactoryResolver, document: any);\n    /**\n     * Opens new window.\n     * @param windowContent\n     * @param windowConfig\n     * */\n    open(windowContent: TemplateRef<any> | NbComponentType, windowConfig?: Partial<NbWindowConfig>): NbWindowRef;\n    protected shouldCreateWindowsContainer(): boolean;\n    protected createWindowsContainer(): void;\n    protected appendWindow(content: TemplateRef<any> | NbComponentType, config: NbWindowConfig, windowRef: NbWindowRef): ComponentRef<NbWindowComponent>;\n    protected subscribeToEvents(windowRef: NbWindowRef): void;\n    protected checkAndUpdateOverlay(): void;\n}\n"]}