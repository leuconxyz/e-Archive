{"version":3,"file":"tree-grid-data-source.d.ts","sources":["tree-grid-data-source.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { NbCollectionViewer } from '../../cdk/collections/collection-viewer';\nimport { NbDataSource } from '../../cdk/table/data-source';\nimport { NbSortable, NbSortRequest } from '../tree-grid-sort.component';\nimport { NbTreeGridDataService } from './tree-grid-data.service';\nimport { NbTreeGridFilterService } from './tree-grid-filter.service';\nimport { NbTreeGridSortService } from './tree-grid-sort.service';\nimport { NbGetters, NbTreeGridPresentationNode } from './tree-grid.model';\nimport { NbToggleOptions, NbTreeGridService } from './tree-grid.service';\nexport interface NbFilterable {\n    filter(filterRequest: string): any;\n}\nexport declare class NbTreeGridDataSource<T> extends NbDataSource<NbTreeGridPresentationNode<T>> implements NbSortable, NbFilterable {\n    private sortService;\n    private filterService;\n    private treeGridService;\n    private treeGridDataService;\n    /** Stream that emits when a new data array is set on the data source. */\n    private data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    private readonly renderData;\n    private readonly filterRequest;\n    private readonly sortRequest;\n    constructor(sortService: NbTreeGridSortService<T>, filterService: NbTreeGridFilterService<T>, treeGridService: NbTreeGridService<T>, treeGridDataService: NbTreeGridDataService<T>);\n    setData<N>(data: N[], customGetters?: NbGetters<N, T>): void;\n    connect(collectionViewer: NbCollectionViewer): Observable<NbTreeGridPresentationNode<T>[] | ReadonlyArray<NbTreeGridPresentationNode<T>>>;\n    disconnect(collectionViewer: NbCollectionViewer): void;\n    expand(row: T): void;\n    collapse(row: T): void;\n    toggle(row: T, options?: NbToggleOptions): void;\n    toggleByIndex(dataIndex: number, options?: NbToggleOptions): void;\n    getLevel(rowIndex: number): number;\n    sort(sortRequest: NbSortRequest): void;\n    filter(searchQuery: string): void;\n    protected updateChangeSubscription(): void;\n    private filterData;\n    private sortData;\n}\nexport declare class NbTreeGridDataSourceBuilder<T> {\n    private filterService;\n    private sortService;\n    private treeGridService;\n    private treeGridDataService;\n    constructor(filterService: NbTreeGridFilterService<T>, sortService: NbTreeGridSortService<T>, treeGridService: NbTreeGridService<T>, treeGridDataService: NbTreeGridDataService<T>);\n    create<N>(data: N[], customGetters?: NbGetters<N, T>): NbTreeGridDataSource<T>;\n}\n"]}