{"version":3,"file":"infinite-list.directive.d.ts","sources":["infinite-list.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, AfterViewInit, QueryList } from '@angular/core';\nimport { NbBooleanInput } from '../helpers';\nimport { NbLayoutScrollService } from '../../services/scroll.service';\nimport { NbLayoutRulerService } from '../../services/ruler.service';\nimport { NbListItemComponent } from './list.component';\nexport declare class NbScrollableContainerDimentions {\n    scrollTop: number;\n    scrollHeight: number;\n    clientHeight: number;\n}\n/**\n * Infinite List Directive\n *\n * ```html\n *  <nb-list nbInfiniteList [threshold]=\"500\" (bottomThreshold)=\"loadNext()\">\n *    <nb-list-item *ngFor=\"let item of items\"></nb-list-item>\n *  </nb-list>\n * ```\n *\n * @stacked-example(Simple infinite list, infinite-list/infinite-list-showcase.component)\n *\n * Directive will notify when list scrolled up or down to a given threshold.\n * By default it listen to scroll of list on which applied, but also can be set to listen to window scroll.\n *\n * @stacked-example(Scroll modes, infinite-list/infinite-list-scroll-modes.component)\n *\n * To improve UX of infinite lists, it's better to keep current page in url,\n * so user able to return to the last viewed page or to share a link to this page.\n * `nbListPageTracker` directive will help you to know, what page user currently viewing.\n * Just put it on a list, set page size and it will calculate page that currently in viewport.\n * You can [open the example](example/infinite-list/infinite-news-list.component)\n * in a new tab to check out this feature.\n *\n * @stacked-example(Infinite list with pager, infinite-list/infinite-news-list.component)\n *\n * @stacked-example(Infinite list with placeholders at the top, infinite-list/infinite-list-placeholders.component)\n *\n */\nexport declare class NbInfiniteListDirective implements AfterViewInit, OnDestroy {\n    private elementRef;\n    private scrollService;\n    private dimensionsService;\n    private destroy$;\n    private lastScrollPosition;\n    windowScroll: boolean;\n    private get elementScroll();\n    /**\n     * Threshold after which event load more event will be emited.\n     * In pixels.\n     */\n    threshold: number;\n    /**\n     * By default component observes list scroll position.\n     * If set to `true`, component will observe position of page scroll instead.\n     */\n    set listenWindowScroll(value: any);\n    static ngAcceptInputType_listenWindowScroll: NbBooleanInput;\n    /**\n     * Emits when distance between list bottom and current scroll position is less than threshold.\n     */\n    bottomThreshold: EventEmitter<any>;\n    /**\n     * Emits when distance between list top and current scroll position is less than threshold.\n     */\n    topThreshold: EventEmitter<any>;\n    onElementScroll(): void;\n    listItems: QueryList<NbListItemComponent>;\n    constructor(elementRef: ElementRef, scrollService: NbLayoutScrollService, dimensionsService: NbLayoutRulerService);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    checkPosition({ scrollHeight, scrollTop, clientHeight }: NbScrollableContainerDimentions): void;\n    private getContainerDimensions;\n    private inSyncWithDom;\n}\n"]}