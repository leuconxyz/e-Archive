{"version":3,"file":"menu.service.d.ts","sources":["menu.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Location } from '@angular/common';\nimport { Params, QueryParamsHandling } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { NbIconConfig } from '../icon/icon.component';\nimport { NbBadge } from '../badge/badge.component';\nexport interface NbMenuBag {\n    tag: string;\n    item: NbMenuItem;\n}\nexport declare type NbMenuBadgeConfig = Omit<NbBadge, 'position'>;\n/**\n *\n *\n * Menu Item options example\n * @stacked-example(Menu Link Parameters, menu/menu-link-params.component)\n *\n *\n */\nexport declare class NbMenuItem {\n    /**\n     * Item Title\n     * @type {string}\n     */\n    title: string;\n    /**\n     * Item relative link (for routerLink)\n     * @type {string}\n     */\n    link?: string;\n    /**\n     * Item URL (absolute)\n     * @type {string}\n     */\n    url?: string;\n    /**\n     * Icon class name or icon config object\n     * @type {string | NbIconConfig}\n     */\n    icon?: string | NbIconConfig;\n    /**\n     * Expanded by default\n     * @type {boolean}\n     */\n    expanded?: boolean;\n    /**\n     * Badge component\n     * @type {boolean}\n     */\n    badge?: NbMenuBadgeConfig;\n    /**\n     * Children items\n     * @type {List<NbMenuItem>}\n     */\n    children?: NbMenuItem[];\n    /**\n     * HTML Link target\n     * @type {string}\n     */\n    target?: string;\n    /**\n     * Hidden Item\n     * @type {boolean}\n     */\n    hidden?: boolean;\n    /**\n     * Item is selected when partly or fully equal to the current url\n     * @type {string}\n     */\n    pathMatch?: 'full' | 'prefix';\n    /**\n     * Where this is a home item\n     * @type {boolean}\n     */\n    home?: boolean;\n    /**\n     * Whether the item is just a group (non-clickable)\n     * @type {boolean}\n     */\n    group?: boolean;\n    /** Whether the item skipLocationChange is true or false\n     *@type {boolean}\n     */\n    skipLocationChange?: boolean;\n    /** Map of query parameters\n     *@type {Params}\n     */\n    queryParams?: Params;\n    queryParamsHandling?: QueryParamsHandling;\n    parent?: NbMenuItem;\n    selected?: boolean;\n    data?: any;\n    fragment?: string;\n    preserveFragment?: boolean;\n    /**\n     * @returns item parents in top-down order\n     */\n    static getParents(item: NbMenuItem): NbMenuItem[];\n    static isParent(item: NbMenuItem, possibleChild: NbMenuItem): boolean;\n}\n/**\n *\n *\n * Menu Service. Allows you to listen to menu events, or to interact with a menu.\n * @stacked-example(Menu Service, menu/menu-service.component)\n *\n *\n */\nexport declare class NbMenuService {\n    /**\n     * Add items to the end of the menu items list\n     * @param {List<NbMenuItem>} items\n     * @param {string} tag\n     */\n    addItems(items: NbMenuItem[], tag?: string): void;\n    /**\n     * Collapses all menu items\n     * @param {string} tag\n     */\n    collapseAll(tag?: string): void;\n    /**\n     * Navigate to the home menu item\n     * @param {string} tag\n     */\n    navigateHome(tag?: string): void;\n    /**\n     * Returns currently selected item. Won't subscribe to the future events.\n     * @param {string} tag\n     * @returns {Observable<{tag: string; item: NbMenuItem}>}\n     */\n    getSelectedItem(tag?: string): Observable<NbMenuBag>;\n    onItemClick(): Observable<NbMenuBag>;\n    onItemSelect(): Observable<NbMenuBag>;\n    onItemHover(): Observable<NbMenuBag>;\n    onSubmenuToggle(): Observable<NbMenuBag>;\n}\nexport declare class NbMenuInternalService {\n    private location;\n    constructor(location: Location);\n    prepareItems(items: NbMenuItem[]): void;\n    selectFromUrl(items: NbMenuItem[], tag: string, collapseOther?: boolean): void;\n    selectItem(item: NbMenuItem, items: NbMenuItem[], collapseOther: boolean, tag: string): void;\n    collapseAll(items: NbMenuItem[], tag: string, except?: NbMenuItem): void;\n    onAddItem(): Observable<{\n        tag: string;\n        items: NbMenuItem[];\n    }>;\n    onNavigateHome(): Observable<{\n        tag: string;\n    }>;\n    onCollapseAll(): Observable<{\n        tag: string;\n    }>;\n    onGetSelectedItem(): Observable<{\n        tag: string;\n        listener: BehaviorSubject<NbMenuBag>;\n    }>;\n    itemHover(item: NbMenuItem, tag?: string): void;\n    submenuToggle(item: NbMenuItem, tag?: string): void;\n    itemSelect(item: NbMenuItem, tag?: string): void;\n    itemClick(item: NbMenuItem, tag?: string): void;\n    /**\n     * Unselect all given items deeply.\n     * @param items array of items to unselect.\n     * @returns items which selected value was changed.\n     */\n    private resetSelection;\n    /**\n     * Collapse all given items deeply.\n     * @param items array of items to collapse.\n     * @param except menu item which shouldn't be collapsed, also disables collapsing for parents of this item.\n     * @returns items which expanded value was changed.\n     */\n    private collapseItems;\n    private applyDefaults;\n    private setParent;\n    /**\n     * Find deepest item which link matches current URL path.\n     * @param items array of items to search in.\n     * @returns found item of undefined.\n     */\n    private findItemByUrl;\n    private isSelectedInUrl;\n}\n"]}