{"version":3,"file":"button-group.component.d.ts","sources":["button-group.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, QueryList, SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NbStatusService } from '../../services/status.service';\nimport { NbBooleanInput } from '../helpers';\nimport { NbComponentSize } from '../component-size';\nimport { NbComponentShape } from '../component-shape';\nimport { NbComponentOrCustomStatus } from '../component-status';\nimport { NbButton } from '../button/base-button';\nimport { NbButtonToggleAppearance, NbButtonToggleDirective } from './button-toggle.directive';\n/**\n * `<nb-button-group>` visually groups buttons together and allow to control buttons properties and the state as a\n * group.\n * @stacked-example(Button Group Showcase, button-group/button-group-showcase.component)\n *\n * ### Installation\n *\n * Import `NbButtonGroupModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbButtonGroupModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n *\n * ### Usage\n *\n * You can use `<nb-button-group>` to group a series of `[nbButton]` or `[nbButtonToggle]` components.\n * @stacked-example(Button and Button Toggle Groups, button-group/button-and-button-toggle-groups.component)\n *\n * For a group of multiple `[nbButtonToggle]` you also can control multi-selection behavior. By default, the group\n * component allows only one pressed button toggle at a time (similar to the radio group). To be able to keep multiple\n * toggles pressed, you need to add `multiple` attributes to the `<nb-button-toggle>`.\n * @stacked-example(Button Group Multiple, button-group/button-group-multiple.component)\n *\n * To know which buttons are currently pressed listen to `(valueChange)` on the `nb-button-group`. Event\n * contains an array of values of currently pressed button toggles. You can assign a value to the\n * `[nbButtonToggle]` via the `value` input.\n * @stacked-example(Button Group Value Change, button-group/button-group-value-change.component)\n *\n * To disable a group of buttons, add a `disabled` attribute to the `<nb-button-group>`.\n * @stacked-example(Button Group Disabled, button-group/button-group-disabled.component)\n *\n * The group component controls all visual attributes of buttons such as `appearance`, `status`, `size`, `shape`.\n * You can change it via the appropriate attributes.\n *\n * Button group appearances:\n * @stacked-example(Button Group Appearances, button-group/button-group-appearances.component)\n *\n * Button group statuses:\n * @stacked-example(Button Group Statuses, button-group/button-group-statuses.component)\n *\n * Button group sizes:\n * @stacked-example(Button Group Sizes, button-group/button-group-sizes.component)\n *\n * Buttons group shapes:\n * @additional-example(Button Group Shapes, button-group/button-group-shapes.component)\n *\n * @styles\n *\n * button-group-filled-button-basic-text-color:\n * button-group-filled-button-primary-text-color:\n * button-group-filled-button-success-text-color:\n * button-group-filled-button-info-text-color:\n * button-group-filled-button-warning-text-color:\n * button-group-filled-button-danger-text-color:\n * button-group-filled-button-control-text-color:\n * button-group-filled-basic-divider-color:\n * button-group-filled-primary-divider-color:\n * button-group-filled-success-divider-color:\n * button-group-filled-info-divider-color:\n * button-group-filled-warning-divider-color:\n * button-group-filled-danger-divider-color:\n * button-group-filled-control-divider-color:\n * button-group-ghost-divider-color:\n **/\nexport declare class NbButtonGroupComponent implements OnChanges, AfterContentInit {\n    protected cd: ChangeDetectorRef;\n    protected statusService: NbStatusService;\n    protected lastEmittedValue: any[];\n    protected readonly destroy$: Subject<void>;\n    protected readonly buttonsChange$: Subject<NbButton[]>;\n    readonly buttons: QueryList<NbButton>;\n    /**\n     * Button group size, available sizes:\n     * `tiny`, `small`, `medium`, `large`, `giant`\n     */\n    size: NbComponentSize;\n    /**\n     * Button group status (adds specific styles):\n     * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`\n     */\n    status: NbComponentOrCustomStatus;\n    /**\n     * Button group shapes: `rectangle`, `round`, `semi-round`\n     */\n    shape: NbComponentShape;\n    /**\n     * Button group appearance: `filled`, `outline`, `ghost`\n     */\n    appearance: NbButtonToggleAppearance;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    protected _disabled: boolean;\n    static ngAcceptInputType_disabled: NbBooleanInput;\n    /**\n     * Allows to keep multiple button toggles pressed. Off by default.\n     */\n    get multiple(): boolean;\n    set multiple(value: boolean);\n    protected _multiple: boolean;\n    static ngAcceptInputType_multiple: NbBooleanInput;\n    /**\n     * Sets `filled` appearance\n     */\n    get filled(): boolean;\n    set filled(value: boolean);\n    static ngAcceptInputType_filled: NbBooleanInput;\n    /**\n     * Sets `outline` appearance\n     */\n    get outline(): boolean;\n    set outline(value: boolean);\n    static ngAcceptInputType_outline: NbBooleanInput;\n    /**\n     * Sets `ghost` appearance\n     */\n    get ghost(): boolean;\n    set ghost(value: boolean);\n    static ngAcceptInputType_ghost: NbBooleanInput;\n    /**\n     * Emits when `nbButtonToggle` pressed state change. `$event` contains an array of the currently pressed button\n     * toggles.\n     */\n    valueChange: EventEmitter<any[]>;\n    role: string;\n    get additionalClasses(): string[];\n    constructor(cd: ChangeDetectorRef, statusService: NbStatusService);\n    ngOnChanges({ size, status, shape, multiple, filled, outline, ghost, disabled }: SimpleChanges): void;\n    ngAfterContentInit(): void;\n    protected listenButtonPressedState(buttons: NbButton[]): void;\n    protected syncButtonsProperties(buttons: NbButton[]): void;\n    protected emitCurrentValue(toggleButtons: NbButtonToggleDirective[]): void;\n}\n"]}