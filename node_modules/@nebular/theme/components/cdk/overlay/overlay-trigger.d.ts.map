{"version":3,"file":"overlay-trigger.d.ts","sources":["overlay-trigger.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nexport declare type NbTriggerValues = 'noop' | 'click' | 'hover' | 'hint' | 'focus';\nexport declare enum NbTrigger {\n    NOOP = \"noop\",\n    CLICK = \"click\",\n    HOVER = \"hover\",\n    HINT = \"hint\",\n    FOCUS = \"focus\"\n}\n/**\n * Provides entity with two event stream: show and hide.\n * Each stream provides different events depends on implementation.\n * We have three main trigger strategies: click, hint and hover.\n * */\nexport interface NbTriggerStrategy {\n    show$: Observable<never | Event>;\n    hide$: Observable<never | Event>;\n    destroy(): any;\n}\n/**\n * TODO maybe we have to use renderer.listen instead of observableFromEvent?\n * Renderer provides capability use it in service worker, ssr and so on.\n * */\nexport declare abstract class NbTriggerStrategyBase implements NbTriggerStrategy {\n    protected document: Document;\n    protected host: HTMLElement;\n    protected container: () => ComponentRef<any>;\n    destroy(): void;\n    protected destroyed$: Subject<unknown>;\n    protected isNotOnHostOrContainer(event: Event): boolean;\n    protected isOnHostOrContainer(event: Event): boolean;\n    protected isOnHost({ target }: Event): boolean;\n    protected isOnContainer({ target }: Event): boolean;\n    abstract show$: Observable<Event>;\n    abstract hide$: Observable<Event>;\n    constructor(document: Document, host: HTMLElement, container: () => ComponentRef<any>);\n}\n/**\n * Creates show and hide event streams.\n * Fires toggle event when the click was performed on the host element.\n * Fires close event when the click was performed on the document but\n * not on the host or container.\n * */\nexport declare class NbClickTriggerStrategy extends NbTriggerStrategyBase {\n    protected click$: Observable<[boolean, Event]>;\n    readonly show$: Observable<Event>;\n    readonly hide$: Observable<Event>;\n}\n/**\n * Creates show and hide event streams.\n * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.\n * Fires close event when the mouse leaves the host element and stops out of the host and popover container.\n * */\nexport declare class NbHoverTriggerStrategy extends NbTriggerStrategyBase {\n    show$: Observable<Event>;\n    hide$: Observable<Event>;\n}\n/**\n * Creates show and hide event streams.\n * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.\n * Fires close event when the mouse leaves the host element.\n * */\nexport declare class NbHintTriggerStrategy extends NbTriggerStrategyBase {\n    show$: Observable<Event>;\n    hide$: Observable<Event>;\n}\n/**\n * Creates show and hide event streams.\n * Fires open event when a focus is on the host element and stay over at least 100 milliseconds.\n * Fires close event when the focus leaves the host element.\n * */\nexport declare class NbFocusTriggerStrategy extends NbTriggerStrategyBase {\n    protected focusOut$: Observable<Event>;\n    protected clickIn$: Observable<Event>;\n    protected clickOut$: Observable<Event>;\n    protected tabKeyPress$: Observable<Event>;\n    show$: Observable<Event>;\n    hide$: Observable<Event>;\n}\n/**\n * Creates empty show and hide event streams.\n * */\nexport declare class NbNoopTriggerStrategy extends NbTriggerStrategyBase {\n    show$: Observable<Event>;\n    hide$: Observable<Event>;\n}\nexport declare class NbTriggerStrategyBuilderService {\n    protected _document: any;\n    protected _host: HTMLElement;\n    protected _container: () => ComponentRef<any>;\n    protected _trigger: NbTrigger;\n    constructor(_document: any);\n    trigger(trigger: NbTrigger): this;\n    host(host: HTMLElement): this;\n    container(container: () => ComponentRef<any>): this;\n    build(): NbTriggerStrategy;\n}\n"]}