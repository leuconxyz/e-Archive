{"version":3,"file":"overlay-container.d.ts","sources":["overlay-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injector, ViewContainerRef } from '@angular/core';\nimport { NbPosition } from './overlay-position';\nimport { NbComponentPortal, NbPortalInjector, NbPortalOutletDirective, NbTemplatePortal } from './mapping';\nexport interface NbRenderableContainer {\n    /**\n     * A renderContent method renders content with provided context.\n     * Naturally, this job has to be done by ngOnChanges lifecycle hook, but\n     * ngOnChanges hook will be triggered only if we update content or context properties\n     * through template property binding syntax. But in our case we're updating these properties programmatically.\n     * */\n    renderContent(): any;\n}\nexport declare class NbPositionedContainerComponent {\n    position: NbPosition;\n    get top(): boolean;\n    get topStart(): boolean;\n    get topEnd(): boolean;\n    get right(): boolean;\n    get endTop(): boolean;\n    get endBottom(): boolean;\n    get bottom(): boolean;\n    get bottomStart(): boolean;\n    get bottomEnd(): boolean;\n    get left(): boolean;\n    get startTop(): boolean;\n    get startBottom(): boolean;\n}\nexport declare class NbOverlayContainerComponent {\n    protected vcr: ViewContainerRef;\n    protected injector: Injector;\n    private changeDetectorRef;\n    portalOutlet: NbPortalOutletDirective;\n    isAttached: boolean;\n    content: string;\n    constructor(vcr: ViewContainerRef, injector: Injector, changeDetectorRef: ChangeDetectorRef);\n    get isStringContent(): boolean;\n    attachComponentPortal<T>(portal: NbComponentPortal<T>, context?: Object): ComponentRef<T>;\n    attachTemplatePortal<C>(portal: NbTemplatePortal<C>): EmbeddedViewRef<C>;\n    attachStringContent(content: string): void;\n    detach(): void;\n    protected createChildInjector(cfr: ComponentFactoryResolver): NbPortalInjector;\n}\n"]}