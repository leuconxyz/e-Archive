{"version":3,"file":"dynamic-overlay.d.ts","sources":["dynamic-overlay.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactoryResolver, ComponentRef, NgZone, Type } from '@angular/core';\nimport { Subject, BehaviorSubject, Observable } from 'rxjs';\nimport { NbAdjustableConnectedPositionStrategy, NbPosition } from '../overlay-position';\nimport { NbRenderableContainer } from '../overlay-container';\nimport { NbOverlayContent, NbOverlayService } from '../overlay-service';\nimport { NbOverlayRef, NbOverlayContainer, NbOverlayConfig } from '../mapping';\nexport interface NbDynamicOverlayController {\n    show(): any;\n    hide(): any;\n    toggle(): any;\n    rebuild(): any;\n}\nexport declare class NbDynamicOverlay {\n    protected overlay: NbOverlayService;\n    protected componentFactoryResolver: ComponentFactoryResolver;\n    protected zone: NgZone;\n    protected overlayContainer: NbOverlayContainer;\n    protected ref: NbOverlayRef;\n    protected container: ComponentRef<NbRenderableContainer>;\n    protected componentType: Type<NbRenderableContainer>;\n    protected context: Object;\n    protected content: NbOverlayContent;\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n    protected overlayConfig: NbOverlayConfig;\n    protected lastAppliedPosition: NbPosition;\n    protected positionStrategyChange$: Subject<unknown>;\n    protected isShown$: BehaviorSubject<boolean>;\n    protected destroy$: Subject<void>;\n    protected overlayDestroy$: Subject<import(\"@angular/cdk/overlay\").OverlayRef>;\n    get isAttached(): boolean;\n    get isShown(): Observable<boolean>;\n    constructor(overlay: NbOverlayService, componentFactoryResolver: ComponentFactoryResolver, zone: NgZone, overlayContainer: NbOverlayContainer);\n    create(componentType: Type<NbRenderableContainer>, content: NbOverlayContent, context: Object, positionStrategy: NbAdjustableConnectedPositionStrategy, overlayConfig?: NbOverlayConfig): this;\n    setContent(content: NbOverlayContent): void;\n    setContext(context: Object): void;\n    setContentAndContext(content: NbOverlayContent, context: Object): void;\n    setComponent(componentType: Type<NbRenderableContainer>): void;\n    setPositionStrategy(positionStrategy: NbAdjustableConnectedPositionStrategy): void;\n    setOverlayConfig(overlayConfig: NbOverlayConfig): void;\n    show(): any;\n    hide(): void;\n    toggle(): void;\n    dispose(): void;\n    getContainer(): ComponentRef<NbRenderableContainer>;\n    protected createOverlay(): void;\n    protected renderContainer(): void;\n    protected updateContext(): void;\n    protected createContainerContext(): Object;\n    /**\n     * Dimensions of the container may change after content update. So we listen to zone.stable event to\n     * reposition the container.\n     */\n    protected updatePositionWhenStable(overlay: NbOverlayRef): void;\n    protected updatePosition(): void;\n    protected hasOverlayInContainer(): boolean;\n    protected disposeOverlayRef(): void;\n}\n"]}