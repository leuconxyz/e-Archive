{"version":3,"file":"datepicker.component.d.ts","sources":["datepicker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentFactoryResolver, ComponentRef, OnChanges, ElementRef, EventEmitter, OnDestroy, Type, AfterViewInit, OnInit, SimpleChanges } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { NbOverlayRef } from '../cdk/overlay/mapping';\nimport { NbAdjustableConnectedPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\nimport { NbDatepickerContainerComponent } from './datepicker-container.component';\nimport { NbCalendarRange, NbCalendarRangeComponent } from '../calendar/calendar-range.component';\nimport { NbCalendarComponent } from '../calendar/calendar.component';\nimport { NbCalendarCell, NbCalendarSize, NbCalendarViewMode, NbCalendarSizeValues, NbCalendarViewModeValues } from '../calendar-kit/model';\nimport { NbDateService } from '../calendar-kit/services/date.service';\nimport { NbDatepicker, NbPickerValidatorConfig } from './datepicker.directive';\nimport { NbBooleanInput } from '../helpers';\n/**\n * The `NbBasePicker` component concentrates overlay manipulation logic.\n * */\nexport declare abstract class NbBasePicker<D, T, P> extends NbDatepicker<T> {\n    protected overlay: NbOverlayService;\n    protected positionBuilder: NbPositionBuilderService;\n    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService;\n    protected cfr: ComponentFactoryResolver;\n    protected dateService: NbDateService<D>;\n    protected dateServiceOptions: any;\n    /**\n     * Datepicker date format. Can be used only with date adapters (moment, date-fns) since native date\n     * object doesn't support formatting.\n     * */\n    abstract format: string;\n    /**\n     * Defines if we should render previous and next months\n     * in the current month view.\n     * */\n    abstract boundingMonth: boolean;\n    /**\n     * Defines starting view for calendar.\n     * */\n    abstract startView: NbCalendarViewMode;\n    /**\n     * Minimum available date for selection.\n     * */\n    abstract min: T;\n    /**\n     * Maximum available date for selection.\n     * */\n    abstract max: T;\n    /**\n     * Predicate that decides which cells will be disabled.\n     * */\n    abstract filter: (T: any) => boolean;\n    /**\n     * Custom day cell component. Have to implement `NbCalendarCell` interface.\n     * */\n    abstract dayCellComponent: Type<NbCalendarCell<D, T>>;\n    /**\n     * Custom month cell component. Have to implement `NbCalendarCell` interface.\n     * */\n    abstract monthCellComponent: Type<NbCalendarCell<D, T>>;\n    /**\n     * Custom year cell component. Have to implement `NbCalendarCell` interface.\n     * */\n    abstract yearCellComponent: Type<NbCalendarCell<D, T>>;\n    /**\n     * Size of the calendar and entire components.\n     * Can be 'medium' which is default or 'large'.\n     * */\n    abstract size: NbCalendarSize;\n    /**\n     * Depending on this date a particular month is selected in the calendar\n     */\n    abstract visibleDate: D;\n    /**\n     * Hide picker when a date or a range is selected, `true` by default\n     * @type {boolean}\n     */\n    abstract hideOnSelect: boolean;\n    /**\n     * Determines should we show calendar navigation or not.\n     * @type {boolean}\n     */\n    abstract showNavigation: boolean;\n    /**\n     * Sets symbol used as a header for week numbers column\n     * */\n    abstract weekNumberSymbol: string;\n    /**\n     * Determines should we show week numbers column.\n     * False by default.\n     * */\n    abstract showWeekNumber: boolean;\n    /**\n     * Calendar component class that has to be instantiated inside overlay.\n     * */\n    protected abstract pickerClass: Type<P>;\n    /**\n     * Overlay reference object.\n     * */\n    protected ref: NbOverlayRef;\n    /**\n     * Datepicker container that contains instantiated picker.\n     * */\n    protected container: ComponentRef<NbDatepickerContainerComponent>;\n    /**\n     * Positioning strategy used by overlay.\n     * */\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n    /**\n     * Trigger strategy used by overlay\n     * */\n    protected triggerStrategy: NbTriggerStrategy;\n    /**\n     * HTML input reference to which datepicker connected.\n     * */\n    protected hostRef: ElementRef;\n    protected init$: ReplaySubject<void>;\n    /**\n     * Stream of picker changes. Required to be the subject because picker hides and shows and picker\n     * change stream becomes recreated.\n     * */\n    protected onChange$: Subject<T>;\n    /**\n     * Reference to the picker instance itself.\n     * */\n    protected pickerRef: ComponentRef<any>;\n    protected overlayOffset: number;\n    protected destroy$: Subject<void>;\n    /**\n     * Queue contains the last value that was applied to the picker when it was hidden.\n     * This value will be passed to the picker as soon as it shown.\n     * */\n    protected queue: T | undefined;\n    protected blur$: Subject<void>;\n    protected constructor(overlay: NbOverlayService, positionBuilder: NbPositionBuilderService, triggerStrategyBuilder: NbTriggerStrategyBuilderService, cfr: ComponentFactoryResolver, dateService: NbDateService<D>, dateServiceOptions: any);\n    /**\n     * Returns picker instance.\n     * */\n    get picker(): any;\n    /**\n     * Stream of picker value changes.\n     * */\n    get valueChange(): Observable<T>;\n    get isShown(): boolean;\n    get init(): Observable<void>;\n    /**\n     * Emits when datepicker looses focus.\n     */\n    get blur(): Observable<void>;\n    protected abstract get pickerValueChange(): Observable<T>;\n    /**\n     * Datepicker knows nothing about host html input element.\n     * So, attach method attaches datepicker to the host input element.\n     * */\n    attach(hostRef: ElementRef): void;\n    getValidatorConfig(): NbPickerValidatorConfig<T>;\n    show(): void;\n    shouldHide(): boolean;\n    hide(): void;\n    protected abstract writeQueue(): any;\n    protected createOverlay(): void;\n    protected openDatepicker(): void;\n    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;\n    protected subscribeOnPositionChange(): void;\n    protected createTriggerStrategy(): NbTriggerStrategy;\n    protected subscribeOnTriggers(): void;\n    protected instantiatePicker(): void;\n    /**\n     * Subscribes on picker value changes and emit data through this.onChange$ subject.\n     * */\n    protected subscribeOnValueChange(): void;\n    protected patchWithInputs(): void;\n    protected checkFormat(): void;\n}\nexport declare class NbBasePickerComponent<D, T, P> extends NbBasePicker<D, T, P> implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    /**\n     * Datepicker date format. Can be used only with date adapters (moment, date-fns) since native date\n     * object doesn't support formatting.\n     * */\n    format: string;\n    /**\n     * Defines if we should render previous and next months\n     * in the current month view.\n     * */\n    boundingMonth: boolean;\n    /**\n     * Defines starting view for calendar.\n     * */\n    startView: NbCalendarViewMode;\n    static ngAcceptInputType_startView: NbCalendarViewModeValues;\n    /**\n     * Minimum available date for selection.\n     * */\n    min: T;\n    /**\n     * Maximum available date for selection.\n     * */\n    max: T;\n    /**\n     * Predicate that decides which cells will be disabled.\n     * */\n    filter: (T: any) => boolean;\n    /**\n     * Custom day cell component. Have to implement `NbCalendarCell` interface.\n     * */\n    dayCellComponent: Type<NbCalendarCell<D, T>>;\n    /**\n     * Custom month cell component. Have to implement `NbCalendarCell` interface.\n     * */\n    monthCellComponent: Type<NbCalendarCell<D, T>>;\n    /**\n     * Custom year cell component. Have to implement `NbCalendarCell` interface.\n     * */\n    yearCellComponent: Type<NbCalendarCell<D, T>>;\n    /**\n     * Size of the calendar and entire components.\n     * Can be 'medium' which is default or 'large'.\n     * */\n    size: NbCalendarSize;\n    static ngAcceptInputType_size: NbCalendarSizeValues;\n    /**\n     * Depending on this date a particular month is selected in the calendar\n     */\n    visibleDate: D;\n    /**\n     * Hide picker when a date or a range is selected, `true` by default\n     * @type {boolean}\n     */\n    hideOnSelect: boolean;\n    /**\n     * Determines should we show calendars navigation or not.\n     * @type {boolean}\n     */\n    showNavigation: boolean;\n    /**\n     * Sets symbol used as a header for week numbers column\n     * */\n    weekNumberSymbol: string;\n    /**\n     * Determines should we show week numbers column.\n     * False by default.\n     * */\n    get showWeekNumber(): boolean;\n    set showWeekNumber(value: boolean);\n    protected _showWeekNumber: boolean;\n    static ngAcceptInputType_showWeekNumber: NbBooleanInput;\n    /**\n     * Determines picker overlay offset (in pixels).\n     * */\n    overlayOffset: number;\n    constructor(document: any, positionBuilder: NbPositionBuilderService, triggerStrategyBuilder: NbTriggerStrategyBuilderService, overlay: NbOverlayService, cfr: ComponentFactoryResolver, dateService: NbDateService<D>, dateServiceOptions: any);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    protected pickerClass: Type<P>;\n    protected get pickerValueChange(): Observable<T>;\n    get value(): T;\n    set value(value: T);\n    protected writeQueue(): void;\n}\n/**\n * The DatePicker components itself.\n * Provides a proxy to `NbCalendar` options as well as custom picker options.\n */\nexport declare class NbDatepickerComponent<D> extends NbBasePickerComponent<D, D, NbCalendarComponent<D>> {\n    protected pickerClass: Type<NbCalendarComponent<D>>;\n    /**\n     * Date which will be rendered as selected.\n     * */\n    set date(date: D);\n    /**\n     * Emits date when selected.\n     * */\n    get dateChange(): EventEmitter<D>;\n    get value(): D;\n    set value(date: D);\n    protected get pickerValueChange(): Observable<D>;\n    protected writeQueue(): void;\n}\n/**\n * The RangeDatePicker components itself.\n * Provides a proxy to `NbCalendarRange` options as well as custom picker options.\n */\nexport declare class NbRangepickerComponent<D> extends NbBasePickerComponent<D, NbCalendarRange<D>, NbCalendarRangeComponent<D>> {\n    protected pickerClass: Type<NbCalendarRangeComponent<D>>;\n    /**\n     * Range which will be rendered as selected.\n     * */\n    set range(range: NbCalendarRange<D>);\n    /**\n     * Emits range when start selected and emits again when end selected.\n     * */\n    get rangeChange(): EventEmitter<NbCalendarRange<D>>;\n    get value(): NbCalendarRange<D>;\n    set value(range: NbCalendarRange<D>);\n    protected get pickerValueChange(): Observable<NbCalendarRange<D>>;\n    shouldHide(): boolean;\n    protected writeQueue(): void;\n}\n"]}