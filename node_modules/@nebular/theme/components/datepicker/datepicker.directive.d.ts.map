{"version":3,"file":"datepicker.directive.d.ts","sources":["datepicker.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, InjectionToken, OnDestroy, ChangeDetectorRef, Type } from '@angular/core';\nimport { ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\nimport { NbDateService } from '../calendar-kit/services/date.service';\n/**\n * The `NbDatepickerAdapter` instances provide way how to parse, format and validate\n * different date types.\n * */\nexport declare abstract class NbDatepickerAdapter<D> {\n    /**\n     * Picker component class.\n     * */\n    abstract picker: Type<any>;\n    /**\n     * Parse date string according to the format.\n     * */\n    abstract parse(value: string, format: string): D;\n    /**\n     * Format date according to the format.\n     * */\n    abstract format(value: D, format: string): string;\n    /**\n     * Validates date string according to the passed format.\n     * */\n    abstract isValid(value: string, format: string): boolean;\n}\n/**\n * Validators config that will be used by form control to perform proper validation.\n * */\nexport interface NbPickerValidatorConfig<D> {\n    /**\n     * Minimum date available in picker.\n     * */\n    min: D;\n    /**\n     * Maximum date available in picker.\n     * */\n    max: D;\n    /**\n     * Predicate that determines is value available for picking.\n     * */\n    filter: (D: any) => boolean;\n}\n/**\n * Datepicker is an control that can pick any values anyway.\n * It has to be bound to the datepicker directive through nbDatepicker input.\n * */\nexport declare abstract class NbDatepicker<T> {\n    /**\n     * HTML input element date format.\n     * */\n    abstract format: string;\n    abstract get value(): T;\n    abstract set value(value: T);\n    abstract get valueChange(): Observable<T>;\n    abstract get init(): Observable<void>;\n    /**\n     * Attaches datepicker to the native input element.\n     * */\n    abstract attach(hostRef: ElementRef): any;\n    /**\n     * Returns validator configuration based on the input properties.\n     * */\n    abstract getValidatorConfig(): NbPickerValidatorConfig<T>;\n    abstract show(): any;\n    abstract hide(): any;\n    abstract shouldHide(): boolean;\n    abstract get isShown(): boolean;\n    abstract get blur(): Observable<void>;\n}\nexport declare const NB_DATE_ADAPTER: InjectionToken<NbDatepickerAdapter<any>>;\nexport declare const NB_DATE_SERVICE_OPTIONS: InjectionToken<unknown>;\n/**\n * The `NbDatepickerDirective` is form control that gives you ability to select dates and ranges. The datepicker\n * is shown when input receives a `focus` event.\n *\n * ```html\n * <input [nbDatepicker]=\"datepicker\">\n * <nb-datepicker #datepicker></nb-datepicker>\n * ```\n *\n * @stacked-example(Showcase, datepicker/datepicker-showcase.component)\n *\n * ### Installation\n *\n * Import `NbDatepickerModule.forRoot()` to your root module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbDatepickerModule.forRoot(),\n *   ],\n * })\n * export class AppModule { }\n * ```\n * And `NbDatepickerModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbDatepickerModule,\n *   ],\n * })\n *\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * If you want to use range selection, you have to use `NbRangepickerComponent` instead:\n *\n * ```html\n * <input [nbDatepicker]=\"rangepicker\">\n * <nb-rangepicker #rangepicker></nb-rangepicker>\n * ```\n *\n * Both range and date pickers support all parameters as calendar, so, check `NbCalendarComponent` for additional\n * info.\n *\n * @stacked-example(Range showcase, datepicker/rangepicker-showcase.component)\n *\n * Datepicker is the form control so it can be bound with angular forms through ngModel and form controls.\n *\n * @stacked-example(Forms, datepicker/datepicker-forms.component)\n *\n * `NbDatepickerDirective` may be validated using `min` and `max` dates passed to the datepicker.\n * And `filter` predicate that receives date object and has to return a boolean value.\n *\n * @stacked-example(Validation, datepicker/datepicker-validation.component)\n *\n * If you need to pick a time along with the date, you can use nb-date-timepicker\n *\n * ```html\n * <input nbInput placeholder=\"Pick Date\" [nbDatepicker]=\"dateTimePicker\">\n * <nb-date-timepicker withSeconds #dateTimePicker></nb-date-timepicker>\n * ```\n * @stacked-example(Date timepicker, datepicker/date-timepicker-showcase.component)\n *\n * A single column picker with options value as time and minute, so users wonâ€™t be able to pick\n * hours and minutes individually.\n *\n * @stacked-example(Date timepicker single column, datepicker/date-timepicker-single-column.component)\n\n * The `NbDatepickerComponent` supports date formatting:\n *\n * ```html\n * <input [nbDatepicker]=\"datepicker\">\n * <nb-datepicker #datepicker format=\"MM\\dd\\yyyy\"></nb-datepicker>\n * ```\n * <span id=\"formatting-issue\"></span>\n * ## Formatting Issue\n *\n * By default, datepicker uses angulars `LOCALE_ID` token for localization and `DatePipe` for dates formatting.\n * And native `Date.parse(...)` for dates parsing. But native `Date.parse` function doesn't support formats.\n * To provide custom formatting you have to use one of the following packages:\n *\n * - `@nebular/moment` - provides moment date adapter that uses moment for date objects. This means datepicker than\n * will operate only moment date objects. If you want to use it you have to install it: `npm i @nebular/moment`, and\n * import `NbMomentDateModule` from this package.\n *\n * - `@nebular/date-fns` - adapter for popular date-fns library. This way is preferred if you need only date formatting.\n * Because date-fns is treeshakable, tiny and operates native date objects. If you want to use it you have to\n * install it: `npm i @nebular/date-fns`, and import `NbDateFnsDateModule` from this package.\n *\n * ### NbDateFnsDateModule\n *\n * Format is required when using `NbDateFnsDateModule`. You can set it via `format` input on datepicker component:\n * ```html\n * <nb-datepicker format=\"dd.MM.yyyy\"></nb-datepicker>\n * ```\n * Also format can be set globally with `NbDateFnsDateModule.forRoot({ format: 'dd.MM.yyyy' })` and\n * `NbDateFnsDateModule.forChild({ format: 'dd.MM.yyyy' })` methods.\n *\n * Please note to use some of the formatting tokens you also need to pass\n * `{ useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true }` to date-fns parse and format functions.\n * You can configure options passed this functions by setting `formatOptions` and\n * `parseOptions` of options object passed to `NbDateFnsDateModule.forRoot` and `NbDateFnsDateModule.forChild` methods.\n * ```ts\n * NbDateFnsDateModule.forRoot({\n *   parseOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },\n *   formatOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },\n * })\n * ```\n * Further info on `date-fns` formatting tokens could be found at\n * [date-fns docs](https://date-fns.org/v2.0.0-alpha.27/docs/Unicode-Tokens).\n *\n * You can also use `parseOptions` and `formatOptions` to provide locale.\n * ```ts\n * import { eo } from 'date-fns/locale';\n *\n * @NgModule({\n *   imports: [\n *     NbDateFnsDateModule.forRoot({\n *       parseOptions: { locale: eo },\n *       formatOptions: { locale: eo },\n *     }),\n *   ],\n * })\n * ```\n *\n * @styles\n *\n * datepicker-background-color:\n * datepicker-border-color:\n * datepicker-border-style:\n * datepicker-border-width:\n * datepicker-border-radius:\n * datepicker-shadow:\n * */\nexport declare class NbDatepickerDirective<D> implements OnDestroy, ControlValueAccessor, Validator {\n    protected document: any;\n    protected datepickerAdapters: NbDatepickerAdapter<D>[];\n    protected hostRef: ElementRef;\n    protected dateService: NbDateService<D>;\n    protected changeDetector: ChangeDetectorRef;\n    /**\n     * Provides datepicker component.\n     * */\n    set setPicker(picker: NbDatepicker<D>);\n    /**\n     * Datepicker adapter.\n     * */\n    protected datepickerAdapter: NbDatepickerAdapter<D>;\n    /**\n     * Datepicker instance.\n     * */\n    protected picker: NbDatepicker<D>;\n    protected destroy$: Subject<void>;\n    protected isDatepickerReady: boolean;\n    protected queue: D | undefined;\n    protected onChange: (D: any) => void;\n    protected onTouched: () => void;\n    /**\n     * Form control validators will be called in validators context, so, we need to bind them.\n     * */\n    protected validator: ValidatorFn;\n    constructor(document: any, datepickerAdapters: NbDatepickerAdapter<D>[], hostRef: ElementRef, dateService: NbDateService<D>, changeDetector: ChangeDetectorRef);\n    /**\n     * Returns html input element.\n     * */\n    get input(): HTMLInputElement;\n    /**\n     * Returns host input value.\n     * */\n    get inputValue(): string;\n    ngOnDestroy(): void;\n    /**\n     * Writes value in picker and html input element.\n     * */\n    writeValue(value: D): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Form control validation based on picker validator config.\n     * */\n    validate(): ValidationErrors | null;\n    /**\n     * Hides picker, focuses the input\n     */\n    protected hidePicker(): void;\n    /**\n     * Validates that we can parse value correctly.\n     * */\n    protected parseValidator(): ValidationErrors | null;\n    /**\n     * Validates passed value is greater than min.\n     * */\n    protected minValidator(): ValidationErrors | null;\n    /**\n     * Validates passed value is smaller than max.\n     * */\n    protected maxValidator(): ValidationErrors | null;\n    /**\n     * Validates passed value satisfy the filter.\n     * */\n    protected filterValidator(): ValidationErrors | null;\n    /**\n     * Chooses datepicker adapter based on passed picker component.\n     * */\n    protected chooseDatepickerAdapter(): void;\n    /**\n     * Attaches picker to the host input element and subscribes on value changes.\n     * */\n    protected setupPicker(): void;\n    protected writePicker(value: D): void;\n    protected writeInput(value: D): void;\n    /**\n     * Validates if no datepicker adapter provided.\n     * */\n    protected noDatepickerAdapterProvided(): boolean;\n    protected subscribeOnInputChange(): void;\n    /**\n     * Parses input value and write if it isn't null.\n     * */\n    protected handleInputChange(value: string): void;\n    protected parseInputValue(value: any): D | null;\n}\n"]}