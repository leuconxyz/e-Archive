{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { NbBooleanInput } from '../helpers';\nimport { NbPortalDirective } from '../cdk/overlay/mapping';\nimport { NbPlatform } from '../cdk/platform/platform-service';\nimport { NbDateService, NbDayPeriod } from '../calendar-kit/services/date.service';\nimport { NbCalendarTimeModelService } from '../calendar-kit/services/calendar-time-model.service';\nimport { NbSelectedTimePayload, NbTimePickerConfig } from './model';\ninterface NbTimePartOption {\n    value: number;\n    text: string;\n}\n/**\n * The TimePicker components itself.\n * Provides a proxy to `TimePicker` options as well as custom picker options.\n */\nexport declare class NbTimePickerComponent<D> implements OnChanges, OnInit {\n    protected config: NbTimePickerConfig;\n    protected platformService: NbPlatform;\n    cd: ChangeDetectorRef;\n    protected calendarTimeModelService: NbCalendarTimeModelService<D>;\n    protected dateService: NbDateService<D>;\n    protected blur$: Subject<void>;\n    fullTimeOptions: D[];\n    hoursColumnOptions: NbTimePartOption[];\n    minutesColumnOptions: NbTimePartOption[];\n    secondsColumnOptions: NbTimePartOption[];\n    readonly dayPeriodColumnOptions: NbDayPeriod[];\n    hostRef: ElementRef;\n    isAM: boolean;\n    /**\n     * Emits when timepicker looses focus.\n     */\n    get blur(): Observable<void>;\n    /**\n     * Defines time format string.\n     * */\n    get timeFormat(): string;\n    set timeFormat(timeFormat: string);\n    protected _timeFormat: string;\n    /**\n     * Defines 12 hours format .\n     * */\n    get twelveHoursFormat(): boolean;\n    set twelveHoursFormat(value: boolean);\n    protected _twelveHoursFormat: boolean;\n    static ngAcceptInputType_twelveHoursFormat: NbBooleanInput;\n    /**\n     * Show seconds in timepicker.\n     * Ignored when singleColumn is true\n     * */\n    get withSeconds(): boolean;\n    set withSeconds(value: boolean);\n    protected _withSeconds: boolean;\n    static ngAcceptInputType_withSeconds: NbBooleanInput;\n    /**\n     * Show timepicker values in one column with 60 minutes step by default.\n     * */\n    get singleColumn(): boolean;\n    set singleColumn(value: boolean);\n    _singleColumn: boolean;\n    static ngAcceptInputType_singleColumn: NbBooleanInput;\n    /**\n     * Defines minutes offset for options, when timepicker is in single column mode.\n     * By default itâ€™s 60 minutes: '12:00, 13:00: 14:00, 15:00...'\n     * */\n    set step(step: number);\n    get step(): number;\n    protected _step: number;\n    /**\n     * Date which will be rendered as selected.\n     * */\n    set date(date: D);\n    get date(): D;\n    _date: D;\n    /**\n     * In timepicker value should be always true\n     * In calendar-with-time.component  should set to false\n     * @docs-private\n     */\n    showFooter: boolean;\n    applyButtonText: string;\n    hoursText: string;\n    minutesText: string;\n    secondsText: string;\n    ampmText: string;\n    currentTimeButtonText: string;\n    /**\n     * Emits date when selected.\n     * */\n    onSelectTime: EventEmitter<NbSelectedTimePayload<D>>;\n    portal: NbPortalDirective;\n    constructor(config: NbTimePickerConfig, platformService: NbPlatform, locale: string, cd: ChangeDetectorRef, calendarTimeModelService: NbCalendarTimeModelService<D>, dateService: NbDateService<D>);\n    ngOnInit(): void;\n    ngOnChanges({ step, twelveHoursFormat, withSeconds, singleColumn, }: SimpleChanges): void;\n    setHost(hostRef: ElementRef): void;\n    attach(hostRef: ElementRef): void;\n    setCurrentTime(): void;\n    setHour(value: number): void;\n    setMinute(value: number): void;\n    setSecond(value: number): void;\n    selectFullTime(value: D): void;\n    changeDayPeriod(dayPeriodToSet: NbDayPeriod): void;\n    updateValue(date: D): void;\n    saveValue(): void;\n    trackByTimeValues(index: any, item: NbTimePartOption): number;\n    trackBySingleColumnValue(index: any, item: D): number;\n    trackByDayPeriod(index: any, item: NbDayPeriod): string;\n    showSeconds(): boolean;\n    isSelectedHour(val: number): boolean;\n    isSelectedMinute(val: number): boolean;\n    isSelectedSecond(val: number): boolean;\n    isSelectedDayPeriod(dayPeriod: NbDayPeriod): boolean;\n    getFullTimeString(item: D): string;\n    isSelectedFullTimeValue(value: D): boolean;\n    protected buildColumnOptions(): void;\n    /**\n     * @docs-private\n     */\n    isFirefox(): boolean;\n    protected generateHours(): NbTimePartOption[];\n    protected generateMinutesOrSeconds(): NbTimePartOption[];\n    protected setupTimeFormat(): string;\n    /**\n     * @docs-private\n     */\n    buildTimeFormat(): string;\n    protected initFromConfig(config: NbTimePickerConfig): void;\n}\nexport {};\n"]}