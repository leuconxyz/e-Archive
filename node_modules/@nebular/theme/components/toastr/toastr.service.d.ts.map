{"version":3,"file":"toastr.service.d.ts","sources":["toastr.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, ComponentRef } from '@angular/core';\nimport { NbOverlayRef } from '../cdk/overlay/mapping';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { NbPositionBuilderService } from '../cdk/overlay/overlay-position';\nimport { NbGlobalLogicalPosition, NbGlobalPosition, NbPositionHelper } from '../cdk/overlay/position-helper';\nimport { NbToastrContainerComponent } from './toastr-container.component';\nimport { NbToastrConfig } from './toastr-config';\nimport { NbToast } from './model';\nimport { NbToastComponent } from './toast.component';\nexport declare class NbToastRef {\n    private toastContainer;\n    private toast;\n    constructor(toastContainer: NbToastContainer, toast: NbToast);\n    close(): void;\n}\nexport declare class NbToastContainer {\n    protected position: NbGlobalPosition;\n    protected containerRef: ComponentRef<NbToastrContainerComponent>;\n    protected positionHelper: NbPositionHelper;\n    protected toasts: NbToast[];\n    protected prevToast: NbToast;\n    get nativeElement(): any;\n    constructor(position: NbGlobalPosition, containerRef: ComponentRef<NbToastrContainerComponent>, positionHelper: NbPositionHelper);\n    attach(toast: NbToast): NbToastRef;\n    destroy(toast: NbToast): void;\n    protected isDuplicate(toast: NbToast): boolean;\n    protected isDuplicatePrevious(toast: NbToast): boolean;\n    protected isDuplicateAmongAll(toast: NbToast): boolean;\n    protected toastDuplicateCompareFunc: (t1: NbToast, t2: NbToast) => boolean;\n    protected removeToastIfLimitReached(toast: NbToast): void;\n    protected attachToast(toast: NbToast): NbToastComponent;\n    protected attachToTop(toast: NbToast): NbToastComponent;\n    protected attachToBottom(toast: NbToast): NbToastComponent;\n    protected setDestroyTimeout(toast: NbToast): void;\n    protected subscribeOnClick(toastComponent: NbToastComponent, toast: NbToast): void;\n    protected updateContainer(): void;\n}\ninterface NbToastrOverlayWithContainer {\n    overlayRef: NbOverlayRef;\n    toastrContainer: NbToastContainer;\n}\nexport declare class NbToastrContainerRegistry {\n    protected overlay: NbOverlayService;\n    protected positionBuilder: NbPositionBuilderService;\n    protected positionHelper: NbPositionHelper;\n    protected cfr: ComponentFactoryResolver;\n    protected document: any;\n    protected overlays: Map<NbGlobalPosition, NbToastrOverlayWithContainer>;\n    constructor(overlay: NbOverlayService, positionBuilder: NbPositionBuilderService, positionHelper: NbPositionHelper, cfr: ComponentFactoryResolver, document: any);\n    get(position: NbGlobalPosition): NbToastContainer;\n    protected instantiateContainer(position: NbGlobalLogicalPosition): void;\n    protected createContainer(position: NbGlobalLogicalPosition): NbToastrOverlayWithContainer;\n    protected addClassToOverlayHost(overlayRef: NbOverlayRef): void;\n    protected existsInDom(toastContainer: NbToastContainer): boolean;\n}\n/**\n * The `NbToastrService` provides a capability to build toast notifications.\n *\n * @stacked-example(Showcase, toastr/toastr-showcase.component)\n *\n * `NbToastrService.show(message, title, config)` accepts three params, title and config are optional.\n *\n * ### Installation\n *\n * Import `NbToastrModule.forRoot()` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbToastrModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * ### Usage\n *\n * Calling `NbToastrService.show(...)` will render new toast and return `NbToastrRef` with\n * help of which you may close newly created toast by calling `close` method.\n *\n * ```ts\n * const toastRef: NbToastRef = this.toastrService.show(...);\n * toastRef.close();\n * ```\n *\n * Config accepts following options:\n *\n * `position` - determines where on the screen toast will be rendered.\n * Default is `top-end`.\n *\n * @stacked-example(Position, toastr/toastr-positions.component)\n *\n * `status` - coloring and icon of the toast.\n * Default is `basic`.\n *\n * @stacked-example(Status, toastr/toastr-statuses.component)\n *\n * `duration` - the time after which the toast will be destroyed.\n * `0` means endless toast, that may be destroyed by click only.\n * Default is 3000 ms.\n *\n * @stacked-example(Duration, toastr/toastr-duration.component)\n *\n * `destroyByClick` - provides a capability to destroy toast by click.\n * Default is true.\n *\n * @stacked-example(Destroy by click, toastr/toastr-destroy-by-click.component)\n *\n * `preventDuplicates` - don't create new toast if it has the same title, message and status.\n * Default is false.\n *\n * @stacked-example(Prevent duplicates, toastr/toastr-prevent-duplicates.component)\n *\n * `duplicatesBehaviour` - determines how to treat the toasts duplication.\n * Compare with the previous message `previous`\n * or with all visible messages `all`.\n *\n * @stacked-example(Prevent duplicates behaviour , toastr/toastr-prevent-duplicates-behaviour.component)\n *\n * `limit` - the number of visible toasts in the toast container. The number of toasts is unlimited by default.\n *\n * @stacked-example(Prevent duplicates behaviour , toastr/toastr-limit.component)\n *\n * `hasIcon` - if true then render toast icon.\n * `icon` - you can pass icon class that will be applied into the toast.\n *\n * @stacked-example(Has icon, toastr/toastr-icon.component)\n * */\nexport declare class NbToastrService {\n    protected globalConfig: NbToastrConfig;\n    protected containerRegistry: NbToastrContainerRegistry;\n    constructor(globalConfig: NbToastrConfig, containerRegistry: NbToastrContainerRegistry);\n    /**\n     * Shows toast with message, title and user config.\n     * */\n    show(message: any, title?: any, userConfig?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows success toast with message, title and user config.\n     * */\n    success(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows info toast with message, title and user config.\n     * */\n    info(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows warning toast with message, title and user config.\n     * */\n    warning(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows primary toast with message, title and user config.\n     * */\n    primary(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows danger toast with message, title and user config.\n     * */\n    danger(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows default toast with message, title and user config.\n     * */\n    default(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n    /**\n     * Shows control toast with message, title and user config.\n     * */\n    control(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\n}\nexport {};\n"]}