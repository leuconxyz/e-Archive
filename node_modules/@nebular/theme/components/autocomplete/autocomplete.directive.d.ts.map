{"version":3,"file":"autocomplete.directive.d.ts","sources":["autocomplete.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { NbOverlayRef, NbScrollStrategy } from '../cdk/overlay/mapping';\nimport { NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { NbAdjustableConnectedPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\nimport { NbActiveDescendantKeyManager, NbActiveDescendantKeyManagerFactoryService } from '../cdk/a11y/descendant-key-manager';\nimport { NbScrollStrategies } from '../cdk/adapter/block-scroll-strategy-adapter';\nimport { NbOptionComponent } from '../option/option.component';\nimport { NbAutocompleteComponent } from './autocomplete.component';\n/**\n * The `NbAutocompleteDirective` provides a capability to expand input with\n * `NbAutocompleteComponent` overlay containing options to select and fill input with.\n *\n * @stacked-example(Showcase, autocomplete/autocomplete-showcase.component)\n *\n * ### Installation\n *\n * Import `NbAutocompleteModule` to your feature module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbAutocompleteModule,\n *   ],\n * })\n * export class PageModule { }\n * ```\n * ### Usage\n *\n * You can bind control with form controls or ngModel.\n *\n * @stacked-example(Autocomplete form binding, autocomplete/autocomplete-form.component)\n *\n * Options in the autocomplete may be grouped using `nb-option-group` component.\n *\n * @stacked-example(Grouping, autocomplete/autocomplete-group.component)\n *\n * Autocomplete may change selected option value via provided function.\n *\n * @stacked-example(Custom display, autocomplete/autocomplete-custom-display.component)\n *\n * Also, autocomplete may make first option in option list active automatically.\n *\n * @stacked-example(Active first, autocomplete/autocomplete-active-first.component)\n *\n * */\nexport declare class NbAutocompleteDirective<T> implements OnDestroy, AfterViewInit, ControlValueAccessor {\n    protected hostRef: ElementRef;\n    protected overlay: NbOverlayService;\n    protected cd: ChangeDetectorRef;\n    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService;\n    protected positionBuilder: NbPositionBuilderService;\n    protected activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>;\n    protected renderer: Renderer2;\n    /**\n     * NbAutocompleteComponent instance passed via input.\n     * */\n    protected _autocomplete: NbAutocompleteComponent<T>;\n    /**\n     * Trigger strategy used by overlay.\n     * @docs-private\n     * */\n    protected triggerStrategy: NbTriggerStrategy;\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\n    protected overlayRef: NbOverlayRef;\n    protected keyManager: NbActiveDescendantKeyManager<NbOptionComponent<T>>;\n    protected destroy$: Subject<void>;\n    protected _onChange: (value: T) => void;\n    protected _onTouched: () => void;\n    /**\n     * Determines is autocomplete overlay opened.\n     * */\n    get isOpen(): boolean;\n    /**\n     * Determines is autocomplete overlay closed.\n     * */\n    get isClosed(): boolean;\n    /**\n     * Provides autocomplete component.\n     * */\n    get autocomplete(): NbAutocompleteComponent<T>;\n    set autocomplete(autocomplete: NbAutocompleteComponent<T>);\n    /**\n     * Determines options overlay offset (in pixels).\n     **/\n    overlayOffset: number;\n    /**\n     * Determines if the input will be focused when the control value is changed\n     * */\n    get focusInputOnValueChange(): boolean;\n    set focusInputOnValueChange(value: boolean);\n    protected _focusInputOnValueChange: boolean;\n    /**\n     * Determines options overlay scroll strategy.\n     **/\n    scrollStrategy: NbScrollStrategies;\n    customOverlayHost: ElementRef;\n    get top(): boolean;\n    get bottom(): boolean;\n    role: string;\n    ariaAutocomplete: string;\n    hasPopup: string;\n    get ariaExpanded(): string;\n    get ariaOwns(): string;\n    get ariaActiveDescendant(): string;\n    constructor(hostRef: ElementRef, overlay: NbOverlayService, cd: ChangeDetectorRef, triggerStrategyBuilder: NbTriggerStrategyBuilderService, positionBuilder: NbPositionBuilderService, activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    handleInput(): void;\n    handleKeydown(): void;\n    handleBlur(): void;\n    show(): void;\n    hide(): void;\n    writeValue(value: T): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(disabled: boolean): void;\n    protected subscribeOnOptionClick(): void;\n    protected subscribeOnPositionChange(): void;\n    protected getActiveItem(): NbOptionComponent<T>;\n    protected setupAutocomplete(): void;\n    protected getDisplayValue(value: string): string;\n    protected getContainer(): ComponentRef<any>;\n    protected handleInputValueUpdate(value: T): void;\n    protected subscribeOnTriggers(): void;\n    protected createTriggerStrategy(): NbTriggerStrategy;\n    protected createKeyManager(): void;\n    protected setHostInputValue(value: any): void;\n    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;\n    protected subscribeOnOverlayKeys(): void;\n    protected setActiveItem(): void;\n    protected attachToOverlay(): void;\n    protected createOverlay(): void;\n    protected initOverlay(): void;\n    protected checkOverlayVisibility(): void;\n    protected createScrollStrategy(): NbScrollStrategy;\n}\n"]}