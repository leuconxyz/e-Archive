{"version":3,"file":"autocomplete.component.d.ts","sources":["autocomplete.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectorRef, ElementRef, EventEmitter, QueryList, AfterContentInit, OnDestroy } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { NbComponentSize } from '../component-size';\nimport { NbPosition } from '../cdk/overlay/overlay-position';\nimport { NbOptionComponent } from '../option/option.component';\nimport { NbPortalDirective } from '../cdk/overlay/mapping';\n/**\n * The `NbAutocompleteComponent` overlay component.\n * Provides an `NbOptionList` overlay component.\n * */\nexport declare class NbAutocompleteComponent<T> implements AfterContentInit, OnDestroy {\n    protected cd: ChangeDetectorRef;\n    protected destroy$: Subject<void>;\n    /**\n     * HTML input reference to which autocomplete connected.\n     * */\n    hostRef: ElementRef;\n    /**\n     * Component scoped id for aria attributes.\n     * */\n    id: string;\n    /**\n     * @docs-private\n     * Current overlay position because of we have to toggle overlayPosition\n     * in [ngClass] direction.\n     */\n    _overlayPosition: NbPosition;\n    get overlayPosition(): NbPosition;\n    set overlayPosition(value: NbPosition);\n    /**\n     * Returns width of the input.\n     * */\n    get hostWidth(): number;\n    /**\n     * Function passed as input to process each string option value before render.\n     * */\n    handleDisplayFn: ((value: any) => string);\n    /**\n     * Autocomplete size, available sizes:\n     * `tiny`, `small`, `medium` (default), `large`, `giant`\n     */\n    size: NbComponentSize;\n    /**\n     * Flag passed as input to always make first option active.\n     * */\n    activeFirst: boolean;\n    /**\n     * Specifies class to be set on `nb-option`s container (`nb-option-list`)\n     * */\n    optionsListClass: NgClass['ngClass'];\n    /**\n     * Specifies class for the overlay panel with options\n     * */\n    optionsPanelClass: string | string[];\n    /**\n     * Will be emitted when selected value changes.\n     * */\n    selectedChange: EventEmitter<T>;\n    /**\n      * List of `NbOptionComponent`'s components passed as content.\n    * */\n    options: QueryList<NbOptionComponent<T>>;\n    /**\n     * NbOptionList with options content.\n     * */\n    portal: NbPortalDirective;\n    constructor(cd: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Autocomplete knows nothing about host html input element.\n     * So, attach method set input hostRef for styling.\n     * */\n    setHost(hostRef: ElementRef): void;\n    /**\n     * Propagate selected value.\n     * */\n    emitSelected(selected: T): void;\n    get tiny(): boolean;\n    get small(): boolean;\n    get medium(): boolean;\n    get large(): boolean;\n    get giant(): boolean;\n}\n"]}