{"version":3,"file":"sidebar.service.d.ts","sources":["sidebar.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Subject, Observable, Observer } from 'rxjs';\nimport { NbSidebarResponsiveState, NbSidebarState } from './sidebar.component';\nexport declare const getSidebarState$: Subject<{\n    tag: string;\n    observer: Observer<NbSidebarState>;\n}>;\nexport declare const getSidebarResponsiveState$: Subject<{\n    tag: string;\n    observer: Observer<NbSidebarResponsiveState>;\n}>;\n/**\n * Sidebar service.\n *\n * Root module service to control the sidebar from any part of the app.\n *\n * Allows you to change sidebar state dynamically from any part of the app:\n * @stacked-example(Sidebar State, sidebar/sidebar-toggle.component)\n */\nexport declare class NbSidebarService {\n    private toggle$;\n    private expand$;\n    private collapse$;\n    private compact$;\n    /**\n     * Subscribe to toggle events\n     *\n     * @returns Observable<{ compact: boolean, tag: string }>\n     */\n    onToggle(): Observable<{\n        compact: boolean;\n        tag: string;\n    }>;\n    /**\n     * Subscribe to expand events\n     * @returns Observable<{ tag: string }>\n     */\n    onExpand(): Observable<{\n        tag: string;\n    }>;\n    /**\n     * Subscribe to collapse evens\n     * @returns Observable<{ tag: string }>\n     */\n    onCollapse(): Observable<{\n        tag: string;\n    }>;\n    /**\n     * Subscribe to compact evens\n     * @returns Observable<{ tag: string }>\n     */\n    onCompact(): Observable<{\n        tag: string;\n    }>;\n    /**\n     * Toggle a sidebar\n     * @param {boolean} compact\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    toggle(compact?: boolean, tag?: string): void;\n    /**\n     * Expands a sidebar\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    expand(tag?: string): void;\n    /**\n     * Collapses a sidebar\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    collapse(tag?: string): void;\n    /**\n     * Makes sidebar compact\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar you want to control\n     */\n    compact(tag?: string): void;\n    /**\n     * Returns sidebar state observable which emits once\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar state you need\n     */\n    getSidebarState(tag?: string): Observable<NbSidebarState>;\n    /**\n     * Returns sidebar state observable which emits once\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\n     * to specify which sidebar responsive state you need\n     */\n    getSidebarResponsiveState(tag?: string): Observable<NbSidebarResponsiveState>;\n}\n"]}