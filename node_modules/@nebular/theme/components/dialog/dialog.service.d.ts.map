{"version":3,"file":"dialog.service.d.ts","sources":["dialog.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ComponentFactoryResolver, Injector, TemplateRef, Type } from '@angular/core';\nimport { NbComponentPortal, NbOverlayRef, NbScrollStrategy, NbTemplatePortal } from '../cdk/overlay/mapping';\nimport { NbGlobalPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\nimport { NbDialogConfig } from './dialog-config';\nimport { NbDialogRef } from './dialog-ref';\nimport { NbDialogContainerComponent } from './dialog-container';\n/**\n * The `NbDialogService` helps to open dialogs.\n *\n * @stacked-example(Showcase, dialog/dialog-showcase.component)\n *\n * A new dialog is opened by calling the `open` method with a component to be loaded and an optional configuration.\n * `open` method will return `NbDialogRef` that can be used for the further manipulations.\n *\n * ### Installation\n *\n * Import `NbDialogModule.forRoot()` to your app module.\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbDialogModule.forRoot(config),\n *   ],\n * })\n * export class AppModule { }\n * ```\n *\n * If you are using it in a lazy loaded module than you have to install it with `NbDialogModule.forChild()`:\n * ```ts\n * @NgModule({\n *   imports: [\n *     // ...\n *     NbDialogModule.forChild(config),\n *   ],\n * })\n * export class LazyLoadedModule { }\n * ```\n *\n * ### Usage\n *\n * ```ts\n * const dialogRef = this.dialogService.open(MyDialogComponent, { ... });\n * ```\n *\n * `NbDialogRef` gives capability access reference to the rendered dialog component,\n * destroy dialog and some other options described below.\n *\n * Also, you can inject `NbDialogRef` in dialog component.\n *\n * ```ts\n * this.dialogService.open(MyDialogComponent, { ... });\n *\n * // my-dialog.component.ts\n * constructor(protected dialogRef: NbDialogRef) {\n * }\n *\n * close() {\n *   this.dialogRef.close();\n * }\n * ```\n *\n * Instead of component you can create dialog from TemplateRef:\n *\n * @stacked-example(Template ref, dialog/dialog-template.component)\n *\n * The dialog may return result through `NbDialogRef`. Calling component can receive this result with `onClose`\n * stream of `NbDialogRef`.\n *\n * @stacked-example(Result, dialog/dialog-result.component)\n *\n * ### Configuration\n *\n * As we mentioned above, `open` method of the `NbDialogService` may receive optional configuration options.\n * Also, you can provide global dialogs configuration through `NbDialogModule.forRoot({ ... })`.\n *\n * This config may contain the following:\n *\n * `context` - both, template and component may receive data through `config.context` property.\n * For components, this data will be assigned through inputs.\n * For templates, you can access it inside template as $implicit.\n *\n * ```ts\n * this.dialogService.open(template, { context: 'pass data in template' });\n * ```\n *\n * ```html\n * <ng-template let-some-additional-data>\n *   {{ some-additional-data }}\n * <ng-template/>\n * ```\n *\n * `hasBackdrop` - determines is service have to render backdrop under the dialog.\n * Default is true.\n * @stacked-example(Backdrop, dialog/dialog-has-backdrop.component)\n *\n * `closeOnBackdropClick` - close dialog on backdrop click if true.\n * Default is true.\n * @stacked-example(Backdrop click, dialog/dialog-backdrop-click.component)\n *\n * `closeOnEsc` - close dialog on escape button on the keyboard.\n * Default is true.\n * @stacked-example(Escape hit, dialog/dialog-esc.component)\n *\n * `hasScroll` - Disables scroll on content under dialog if true and does nothing otherwise.\n * Default is false.\n * Please, open dialogs in the separate window and try to scroll.\n * @stacked-example(Scroll, dialog/dialog-scroll.component)\n *\n * `autoFocus` - Focuses dialog automatically after open if true. It's useful to prevent misclicks on\n * trigger elements and opening multiple dialogs.\n * Default is true.\n *\n * As you can see, if you open dialog with auto focus dialog will focus first focusable element\n * or just blur previously focused automatically.\n * Otherwise, without auto focus, the focus will stay on the previously focused element.\n * Please, open dialogs in the separate window and try to click on the button without focus\n * and then hit space any times. Multiple same dialogs will be opened.\n * @stacked-example(Auto focus, dialog/dialog-auto-focus.component)\n * */\nexport declare class NbDialogService {\n    protected document: any;\n    protected globalConfig: any;\n    protected positionBuilder: NbPositionBuilderService;\n    protected overlay: NbOverlayService;\n    protected injector: Injector;\n    protected cfr: ComponentFactoryResolver;\n    constructor(document: any, globalConfig: any, positionBuilder: NbPositionBuilderService, overlay: NbOverlayService, injector: Injector, cfr: ComponentFactoryResolver);\n    /**\n     * Opens new instance of the dialog, may receive optional config.\n     * */\n    open<T>(content: Type<T> | TemplateRef<T>, userConfig?: Partial<NbDialogConfig<Partial<T> | string>>): NbDialogRef<T>;\n    protected createOverlay(config: NbDialogConfig): NbOverlayRef;\n    protected createPositionStrategy(): NbGlobalPositionStrategy;\n    protected createScrollStrategy(hasScroll: boolean): NbScrollStrategy;\n    protected createContainer(config: NbDialogConfig, overlayRef: NbOverlayRef): NbDialogContainerComponent;\n    protected createContent<T>(config: NbDialogConfig, content: Type<T> | TemplateRef<T>, container: NbDialogContainerComponent, dialogRef: NbDialogRef<T>): void;\n    protected createTemplatePortal<T>(config: NbDialogConfig, content: TemplateRef<T>, dialogRef: NbDialogRef<T>): NbTemplatePortal;\n    /**\n     * We're creating portal with custom injector provided through config or using global injector.\n     * This approach provides us capability inject `NbDialogRef` in dialog component.\n     * */\n    protected createComponentPortal<T>(config: NbDialogConfig, content: Type<T>, dialogRef: NbDialogRef<T>): NbComponentPortal;\n    protected createInjector(config: NbDialogConfig): Injector;\n    protected registerCloseListeners<T>(config: NbDialogConfig, overlayRef: NbOverlayRef, dialogRef: NbDialogRef<T>): void;\n}\n"]}