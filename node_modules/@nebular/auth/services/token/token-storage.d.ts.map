{"version":3,"file":"token-storage.d.ts","sources":["token-storage.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NbAuthToken } from './token';\nimport { NbAuthTokenParceler } from './token-parceler';\nexport declare abstract class NbTokenStorage {\n    abstract get(): NbAuthToken;\n    abstract set(token: NbAuthToken): any;\n    abstract clear(): any;\n}\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\nexport declare class NbTokenLocalStorage extends NbTokenStorage {\n    private parceler;\n    protected key: string;\n    constructor(parceler: NbAuthTokenParceler);\n    /**\n     * Returns token from localStorage\n     * @returns {NbAuthToken}\n     */\n    get(): NbAuthToken;\n    /**\n     * Sets token to localStorage\n     * @param {NbAuthToken} token\n     */\n    set(token: NbAuthToken): void;\n    /**\n     * Clears token from localStorage\n     */\n    clear(): void;\n}\n"]}