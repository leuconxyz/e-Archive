{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\nimport { NbAuthStrategy } from '../strategies/auth-strategy';\nimport { NbAuthResult } from './auth-result';\nimport { NbTokenService } from './token/token.service';\nimport { NbAuthToken } from './token/token';\n/**\n * Common authentication service.\n * Should be used to as an interlayer between UI Components and Auth Strategy.\n */\nexport declare class NbAuthService {\n    protected tokenService: NbTokenService;\n    protected strategies: any;\n    constructor(tokenService: NbTokenService, strategies: any);\n    /**\n     * Retrieves current authenticated token stored\n     * @returns {Observable<any>}\n     */\n    getToken(): Observable<NbAuthToken>;\n    /**\n     * Returns true if auth token is present in the token storage\n     * @returns {Observable<boolean>}\n     */\n    isAuthenticated(): Observable<boolean>;\n    /**\n     * Returns true if valid auth token is present in the token storage.\n     * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise\n     * @returns {Observable<boolean>}\n     */\n    isAuthenticatedOrRefresh(): Observable<boolean>;\n    /**\n     * Returns tokens stream\n     * @returns {Observable<NbAuthSimpleToken>}\n     */\n    onTokenChange(): Observable<NbAuthToken>;\n    /**\n     * Returns authentication status stream\n     * @returns {Observable<boolean>}\n     */\n    onAuthenticationChange(): Observable<boolean>;\n    /**\n     * Authenticates with the selected strategy\n     * Stores received token in the token storage\n     *\n     * Example:\n     * authenticate('email', {email: 'email@example.com', password: 'test'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    authenticate(strategyName: string, data?: any): Observable<NbAuthResult>;\n    /**\n     * Registers with the selected strategy\n     * Stores received token in the token storage\n     *\n     * Example:\n     * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    register(strategyName: string, data?: any): Observable<NbAuthResult>;\n    /**\n     * Sign outs with the selected strategy\n     * Removes token from the token storage\n     *\n     * Example:\n     * logout('email')\n     *\n     * @param strategyName\n     * @returns {Observable<NbAuthResult>}\n     */\n    logout(strategyName: string): Observable<NbAuthResult>;\n    /**\n     * Sends forgot password request to the selected strategy\n     *\n     * Example:\n     * requestPassword('email', {email: 'email@example.com'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    requestPassword(strategyName: string, data?: any): Observable<NbAuthResult>;\n    /**\n     * Tries to reset password with the selected strategy\n     *\n     * Example:\n     * resetPassword('email', {newPassword: 'test'})\n     *\n     * @param strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    resetPassword(strategyName: string, data?: any): Observable<NbAuthResult>;\n    /**\n     * Sends a refresh token request\n     * Stores received token in the token storage\n     *\n     * Example:\n     * refreshToken('email', {token: token})\n     *\n     * @param {string} strategyName\n     * @param data\n     * @returns {Observable<NbAuthResult>}\n     */\n    refreshToken(strategyName: string, data?: any): Observable<NbAuthResult>;\n    /**\n     * Get registered strategy by name\n     *\n     * Example:\n     * getStrategy('email')\n     *\n     * @param {string} provider\n     * @returns {NbAbstractAuthProvider}\n     */\n    protected getStrategy(strategyName: string): NbAuthStrategy;\n    private processResultToken;\n}\n"]}