{"__symbolic":"module","version":4,"metadata":{"NbAuthStrategyClass":{"__symbolic":"interface"},"NbAuthStrategies":{"__symbolic":"interface"},"NbAuthOptions":{"__symbolic":"interface"},"NbAuthSocialLink":{"__symbolic":"interface"},"defaultAuthOptions":{"strategies":[],"forms":{"login":{"redirectDelay":500,"strategy":"email","rememberMe":true,"showMessages":{"success":true,"error":true},"socialLinks":[]},"register":{"redirectDelay":500,"strategy":"email","showMessages":{"success":true,"error":true},"terms":true,"socialLinks":[]},"requestPassword":{"redirectDelay":500,"strategy":"email","showMessages":{"success":true,"error":true},"socialLinks":[]},"resetPassword":{"redirectDelay":500,"strategy":"email","showMessages":{"success":true,"error":true},"socialLinks":[]},"logout":{"redirectDelay":500,"strategy":"email"},"validation":{"password":{"required":true,"minLength":4,"maxLength":50},"email":{"required":true},"fullName":{"required":false,"minLength":4,"maxLength":50}}}},"NB_AUTH_OPTIONS":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":88,"character":35},"arguments":["Nebular Auth Options"]},"NB_AUTH_USER_OPTIONS":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":89,"character":40},"arguments":["Nebular User Auth Options"]},"NB_AUTH_STRATEGIES":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":90,"character":38},"arguments":["Nebular Auth Strategies"]},"NB_AUTH_TOKENS":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":91,"character":34},"arguments":["Nebular Auth Tokens"]},"NB_AUTH_INTERCEPTOR_HEADER":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":92,"character":46},"arguments":["Nebular Simple Interceptor Header"]},"NB_AUTH_TOKEN_INTERCEPTOR_FILTER":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":94,"character":11},"arguments":["Nebular Interceptor Filter"]},"nbStrategiesFactory":{"__symbolic":"function"},"nbTokensFactory":{"__symbolic":"function"},"nbOptionsFactory":{"__symbolic":"function","parameters":["options"],"value":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"deepExtend"},"arguments":[{"__symbolic":"reference","name":"defaultAuthOptions"},{"__symbolic":"reference","name":"options"}]}},"nbNoOpInterceptorFilter":{"__symbolic":"function","parameters":["req"],"value":true},"NbAuthModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":79,"character":1},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":81,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbLayoutModule","line":82,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbCardModule","line":83,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbCheckboxModule","line":84,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbAlertModule","line":85,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbInputModule","line":86,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbButtonModule","line":87,"character":4},{"__symbolic":"reference","module":"@angular/router","name":"RouterModule","line":88,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":89,"character":4},{"__symbolic":"reference","module":"@nebular/theme","name":"NbIconModule","line":90,"character":4}],"declarations":[{"__symbolic":"reference","name":"NbAuthComponent"},{"__symbolic":"reference","name":"NbAuthBlockComponent"},{"__symbolic":"reference","name":"NbLoginComponent"},{"__symbolic":"reference","name":"NbRegisterComponent"},{"__symbolic":"reference","name":"NbRequestPasswordComponent"},{"__symbolic":"reference","name":"NbResetPasswordComponent"},{"__symbolic":"reference","name":"NbLogoutComponent"}],"exports":[{"__symbolic":"reference","name":"NbAuthComponent"},{"__symbolic":"reference","name":"NbAuthBlockComponent"},{"__symbolic":"reference","name":"NbLoginComponent"},{"__symbolic":"reference","name":"NbRegisterComponent"},{"__symbolic":"reference","name":"NbRequestPasswordComponent"},{"__symbolic":"reference","name":"NbResetPasswordComponent"},{"__symbolic":"reference","name":"NbLogoutComponent"}]}]}],"members":{},"statics":{"forRoot":{"__symbolic":"function","parameters":["nbAuthOptions"],"value":{"ngModule":{"__symbolic":"reference","name":"NbAuthModule"},"providers":[{"provide":{"__symbolic":"reference","name":"NB_AUTH_USER_OPTIONS"},"useValue":{"__symbolic":"reference","name":"nbAuthOptions"}},{"provide":{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"},"useFactory":{"__symbolic":"reference","name":"nbOptionsFactory"},"deps":[{"__symbolic":"reference","name":"NB_AUTH_USER_OPTIONS"}]},{"provide":{"__symbolic":"reference","name":"NB_AUTH_STRATEGIES"},"useFactory":{"__symbolic":"reference","name":"nbStrategiesFactory"},"deps":[{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"},{"__symbolic":"reference","module":"@angular/core","name":"Injector","line":118,"character":96}]},{"provide":{"__symbolic":"reference","name":"NB_AUTH_TOKENS"},"useFactory":{"__symbolic":"reference","name":"nbTokensFactory"},"deps":[{"__symbolic":"reference","name":"NB_AUTH_STRATEGIES"}]},{"provide":{"__symbolic":"reference","name":"NB_AUTH_FALLBACK_TOKEN"},"useValue":{"__symbolic":"reference","name":"NbAuthSimpleToken"}},{"provide":{"__symbolic":"reference","name":"NB_AUTH_INTERCEPTOR_HEADER"},"useValue":"Authorization"},{"provide":{"__symbolic":"reference","name":"NB_AUTH_TOKEN_INTERCEPTOR_FILTER"},"useValue":{"__symbolic":"reference","name":"nbNoOpInterceptorFilter"}},{"provide":{"__symbolic":"reference","name":"NbTokenStorage"},"useClass":{"__symbolic":"reference","name":"NbTokenLocalStorage"}},{"__symbolic":"reference","name":"NbAuthTokenParceler"},{"__symbolic":"reference","name":"NbAuthService"},{"__symbolic":"reference","name":"NbTokenService"},{"__symbolic":"reference","name":"NbDummyAuthStrategy"},{"__symbolic":"reference","name":"NbPasswordAuthStrategy"},{"__symbolic":"reference","name":"NbOAuth2AuthStrategy"}]}}}},"routes":[{"path":"auth","component":{"__symbolic":"reference","name":"NbAuthComponent"},"children":[{"path":"","component":{"__symbolic":"reference","name":"NbLoginComponent"}},{"path":"login","component":{"__symbolic":"reference","name":"NbLoginComponent"}},{"path":"register","component":{"__symbolic":"reference","name":"NbRegisterComponent"}},{"path":"logout","component":{"__symbolic":"reference","name":"NbLogoutComponent"}},{"path":"request-password","component":{"__symbolic":"reference","name":"NbRequestPasswordComponent"}},{"path":"reset-password","component":{"__symbolic":"reference","name":"NbResetPasswordComponent"}}]}],"NbAuthComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":12,"character":1},"arguments":[{"selector":"nb-auth","template":"\n    <nb-layout>\n      <nb-layout-column>\n        <nb-card>\n          <nb-card-header>\n            <nav class=\"navigation\">\n              <a href=\"#\" (click)=\"back()\" class=\"link back-link\" aria-label=\"Back\">\n                <nb-icon icon=\"arrow-back\"></nb-icon>\n              </a>\n            </nav>\n          </nb-card-header>\n          <nb-card-body>\n            <nb-auth-block>\n              <router-outlet></router-outlet>\n            </nb-auth-block>\n          </nb-card-body>\n        </nb-card>\n      </nb-layout-column>\n    </nb-layout>\n  ","styles":["/*!\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */:host nb-card{margin:0;height:calc(100vh - 2 * 2.5rem)}:host .navigation .link{display:inline-block;text-decoration:none}:host .navigation .link nb-icon{font-size:2rem;vertical-align:middle}:host .links nb-icon{font-size:2.5rem}:host nb-card-body{display:flex;width:100%}:host nb-auth-block{margin:auto}@media (max-width: 767.98px){:host nb-card{border-radius:0;height:100vh}}:host ::ng-deep nb-layout .layout .layout-container .content .columns nb-layout-column{padding:2.5rem}@media (max-width: 767.98px){:host ::ng-deep nb-layout .layout .layout-container .content .columns nb-layout-column{padding:0}}\n"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"NbAuthService"},{"__symbolic":"reference","module":"@angular/common","name":"Location","line":46,"character":65}]}],"back":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}]}},"NbAuthBlockComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":8,"character":1},"arguments":[{"selector":"nb-auth-block","template":"\n    <ng-content></ng-content>\n  ","styles":[":host{display:block;width:100%;max-width:35rem}:host ::ng-deep form{width:100%}:host ::ng-deep .label{display:block;margin-bottom:0.5rem}:host ::ng-deep .forgot-password{text-decoration:none;margin-bottom:0.5rem}:host ::ng-deep .caption{margin-top:0.5rem}:host ::ng-deep .alert{text-align:center}:host ::ng-deep .title{margin-top:0;margin-bottom:0.75rem;text-align:center}:host ::ng-deep .sub-title{margin-bottom:2rem;text-align:center}:host ::ng-deep .form-control-group{margin-bottom:2rem}:host ::ng-deep .form-control-group.accept-group{display:flex;justify-content:space-between;margin:2rem 0}:host ::ng-deep .label-with-link{display:flex;justify-content:space-between}:host ::ng-deep .links{text-align:center;margin-top:1.75rem}:host ::ng-deep .links .socials{margin-top:1.5rem}:host ::ng-deep .links .socials a{margin:0 1rem;text-decoration:none;vertical-align:middle}:host ::ng-deep .links .socials a.with-icon{font-size:2rem}:host ::ng-deep .another-action{margin-top:2rem;text-align:center}:host ::ng-deep .sign-in-or-up{margin-top:2rem;display:flex;justify-content:space-between}:host ::ng-deep nb-alert .alert-title,:host ::ng-deep nb-alert .alert-message{margin:0 0 0.5rem}:host ::ng-deep nb-alert .alert-message-list{list-style-type:none;padding:0;margin:0}\n"]}]}],"members":{}},"NbLoginComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":13,"character":1},"arguments":[{"selector":"nb-login","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":16,"character":19},"member":"OnPush"},"template":"<h1 id=\"title\" class=\"title\">Login</h1>\n<p class=\"sub-title\">Hello! Log in with your email.</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           name=\"email\"\n           id=\"input-email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           fieldSize=\"large\"\n           autofocus\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <span class=\"label-with-link\">\n      <label class=\"label\" for=\"input-password\">Password:</label>\n      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Forgot Password?</a>\n    </span>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           name=\"password\"\n           type=\"password\"\n           id=\"input-password\"\n           placeholder=\"Password\"\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":32,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"}]}],null,null],"parameters":[{"__symbolic":"reference","name":"NbAuthService"},null,{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":33,"character":28},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":34,"character":32}]}],"login":[{"__symbolic":"method"}],"getConfigValue":[{"__symbolic":"method"}]}},"NbLogoutComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":13,"character":1},"arguments":[{"selector":"nb-logout","template":"<div>Logging out, please wait...</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":23,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"}]}],null],"parameters":[{"__symbolic":"reference","name":"NbAuthService"},null,{"__symbolic":"reference","module":"@angular/router","name":"Router","line":24,"character":32}]}],"ngOnInit":[{"__symbolic":"method"}],"logout":[{"__symbolic":"method"}],"getConfigValue":[{"__symbolic":"method"}]}},"NbRegisterComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":14,"character":1},"arguments":[{"selector":"nb-register","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":18,"character":19},"member":"OnPush"},"template":"<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n      Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n    </nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n","styles":[":host .title{margin-bottom:2rem}\n"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":33,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"}]}],null,null],"parameters":[{"__symbolic":"reference","name":"NbAuthService"},null,{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":34,"character":28},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":35,"character":32}]}],"register":[{"__symbolic":"method"}],"getConfigValue":[{"__symbolic":"method"}]}},"NbRequestPasswordComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":13,"character":1},"arguments":[{"selector":"nb-request-password-page","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":17,"character":19},"member":"OnPush"},"template":"<h1 id=\"title\" class=\"title\">Forgot Password</h1>\n<p class=\"sub-title\">Enter your email address and we’ll send a link to reset your password</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"requestPass()\" #requestPassForm=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Enter your email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !requestPassForm.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Request password\n  </button>\n</form>\n\n<section class=\"sign-in-or-up\" aria-label=\"Sign in or sign up\">\n  <p><a class=\"text-link\" routerLink=\"../login\">Back to Log In</a></p>\n  <p><a routerLink=\"../register\" class=\"text-link\">Register</a></p>\n</section>\n","styles":[":host .form-group:last-of-type{margin-bottom:3rem}\n"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":31,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"}]}],null,null],"parameters":[{"__symbolic":"reference","name":"NbAuthService"},null,{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":32,"character":28},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":33,"character":32}]}],"requestPass":[{"__symbolic":"method"}],"getConfigValue":[{"__symbolic":"method"}]}},"NbResetPasswordComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":13,"character":1},"arguments":[{"selector":"nb-reset-password-page","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":17,"character":19},"member":"OnPush"},"template":"<h1 id=\"title\" class=\"title\">Change password</h1>\n<p class=\"sub-title\">Please set a new password</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"resetPass()\" #resetPassForm=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">New Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           class=\"first\"\n           placeholder=\"New Password\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{getConfigValue('forms.validation.password.minLength')}}\n        to {{getConfigValue('forms.validation.password.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-group\">\n    <label class=\"label\" for=\"input-re-password\">Confirm Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           type=\"password\"\n           class=\"last\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.touched\n               ? (rePass.invalid || password.value != rePass.value ? 'danger' : 'success')\n               : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.invalid && rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          status=\"primary\"\n          fullWidth\n          size=\"large\"\n          [disabled]=\"submitted || !resetPassForm.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Change password\n  </button>\n</form>\n\n<section class=\"sign-in-or-up\" aria-label=\"Sign in or sign up\">\n  <p><a class=\"text-link\" routerLink=\"../login\">Back to Log In</a></p>\n  <p><a class=\"text-link\" routerLink=\"../register\">Register</a></p>\n</section>\n","styles":[":host .form-group:last-of-type{margin-bottom:3rem}\n"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":31,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_OPTIONS"}]}],null,null],"parameters":[{"__symbolic":"reference","name":"NbAuthService"},null,{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":32,"character":28},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":33,"character":32}]}],"resetPass":[{"__symbolic":"method"}],"getConfigValue":[{"__symbolic":"method"}]}},"NbAuthService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":20,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":24,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_STRATEGIES"}]}]],"parameters":[{"__symbolic":"reference","name":"NbTokenService"},null]}],"getToken":[{"__symbolic":"method"}],"isAuthenticated":[{"__symbolic":"method"}],"isAuthenticatedOrRefresh":[{"__symbolic":"method"}],"onTokenChange":[{"__symbolic":"method"}],"onAuthenticationChange":[{"__symbolic":"method"}],"authenticate":[{"__symbolic":"method"}],"register":[{"__symbolic":"method"}],"logout":[{"__symbolic":"method"}],"requestPassword":[{"__symbolic":"method"}],"resetPassword":[{"__symbolic":"method"}],"refreshToken":[{"__symbolic":"method"}],"getStrategy":[{"__symbolic":"method"}],"processResultToken":[{"__symbolic":"method"}]}},"NbAuthResult":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"boolean"},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"NbAuthToken"}]}],"getResponse":[{"__symbolic":"method"}],"getToken":[{"__symbolic":"method"}],"getRedirect":[{"__symbolic":"method"}],"getErrors":[{"__symbolic":"method"}],"getMessages":[{"__symbolic":"method"}],"isSuccess":[{"__symbolic":"method"}],"isFailure":[{"__symbolic":"method"}]}},"NbAuthJWTInterceptor":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":8,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":12,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_TOKEN_INTERCEPTOR_FILTER"}]}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"Injector","line":11,"character":32},null]}],"intercept":[{"__symbolic":"method"}]}},"NbAuthSimpleInterceptor":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":9,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":13,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_INTERCEPTOR_HEADER"}]}]],"parameters":[{"__symbolic":"reference","module":"@angular/core","name":"Injector","line":12,"character":32},{"__symbolic":"reference","name":"string"}]}],"intercept":[{"__symbolic":"method"}]}},"NbAuthToken":{"__symbolic":"class","members":{"getValue":[{"__symbolic":"method"}],"isValid":[{"__symbolic":"method"}],"getOwnerStrategyName":[{"__symbolic":"method"}],"getCreatedAt":[{"__symbolic":"method"}],"toString":[{"__symbolic":"method"}],"getName":[{"__symbolic":"method"}],"getPayload":[{"__symbolic":"method"}]}},"NbAuthTokenNotFoundError":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"Error"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"string"}]}]}},"NbAuthIllegalTokenError":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"Error"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"string"}]}]}},"NbAuthEmptyTokenError":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthIllegalTokenError"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"string"}]}]}},"NbAuthIllegalJWTTokenError":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthIllegalTokenError"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"string"}]}]}},"NbAuthRefreshableToken":{"__symbolic":"interface"},"NbAuthTokenClass":{"__symbolic":"interface"},"nbAuthCreateToken":{"__symbolic":"function","parameters":["tokenClass","token","ownerStrategyName","createdAt"],"value":{"__symbolic":"new","expression":{"__symbolic":"reference","name":"tokenClass"},"arguments":[{"__symbolic":"reference","name":"token"},{"__symbolic":"reference","name":"ownerStrategyName"},{"__symbolic":"reference","name":"createdAt"}]}},"decodeJwtPayload":{"__symbolic":"function"},"NbAuthSimpleToken":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthToken"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"any"},{"__symbolic":"reference","name":"string"},{"__symbolic":"reference","name":"Date"}]}],"parsePayload":[{"__symbolic":"method"}],"prepareCreatedAt":[{"__symbolic":"method"}],"getCreatedAt":[{"__symbolic":"method"}],"getValue":[{"__symbolic":"method"}],"getOwnerStrategyName":[{"__symbolic":"method"}],"isValid":[{"__symbolic":"method"}],"toString":[{"__symbolic":"method"}]},"statics":{"NAME":"nb:auth:simple:token"}},"NbAuthJWTToken":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthSimpleToken"},"members":{"prepareCreatedAt":[{"__symbolic":"method"}],"parsePayload":[{"__symbolic":"method"}],"getTokenExpDate":[{"__symbolic":"method"}],"isValid":[{"__symbolic":"method"}]},"statics":{"NAME":"nb:auth:jwt:token"}},"NbAuthOAuth2Token":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthSimpleToken"},"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"error","message":"Expression form not supported","line":227,"character":21,"module":"./services/token/token"},{"__symbolic":"reference","name":"string"},{"__symbolic":"reference","name":"Date"}]}],"getValue":[{"__symbolic":"method"}],"getRefreshToken":[{"__symbolic":"method"}],"setRefreshToken":[{"__symbolic":"method"}],"parsePayload":[{"__symbolic":"method"}],"getType":[{"__symbolic":"method"}],"isValid":[{"__symbolic":"method"}],"getTokenExpDate":[{"__symbolic":"method"}],"toString":[{"__symbolic":"method"}]},"statics":{"NAME":"nb:auth:oauth2:token"}},"NbAuthOAuth2JWTToken":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthOAuth2Token"},"members":{"parsePayload":[{"__symbolic":"method"}],"parseAccessTokenPayload":[{"__symbolic":"method"}],"getAccessTokenPayload":[{"__symbolic":"method"}],"prepareCreatedAt":[{"__symbolic":"method"}],"isValid":[{"__symbolic":"method"}],"getTokenExpDate":[{"__symbolic":"method"}]},"statics":{"NAME":"nb:auth:oauth2:jwt:token"}},"NbTokenStorage":{"__symbolic":"class","members":{"get":[{"__symbolic":"method"}],"set":[{"__symbolic":"method"}],"clear":[{"__symbolic":"method"}]}},"NbTokenLocalStorage":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbTokenStorage"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":27,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"NbAuthTokenParceler"}]}],"get":[{"__symbolic":"method"}],"set":[{"__symbolic":"method"}],"clear":[{"__symbolic":"method"}]}},"NbTokenService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":10,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"NbTokenStorage"}]}],"tokenChange":[{"__symbolic":"method"}],"set":[{"__symbolic":"method"}],"get":[{"__symbolic":"method"}],"clear":[{"__symbolic":"method"}],"publishStoredToken":[{"__symbolic":"method"}]}},"NbTokenPack":{"__symbolic":"interface"},"NB_AUTH_FALLBACK_TOKEN":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@angular/core","name":"InjectionToken","line":12,"character":42},"arguments":["Nebular Auth Options"]},"NbAuthTokenParceler":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":17,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":20,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_FALLBACK_TOKEN"}]}],[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":21,"character":15},"arguments":[{"__symbolic":"reference","name":"NB_AUTH_TOKENS"}]}]],"parameters":[{"__symbolic":"reference","name":"NbAuthTokenClass"},{"__symbolic":"reference","name":"Array","arguments":[{"__symbolic":"reference","name":"NbAuthTokenClass"}]}]}],"wrap":[{"__symbolic":"method"}],"unwrap":[{"__symbolic":"method"}],"getClassByName":[{"__symbolic":"method"}],"parseTokenPack":[{"__symbolic":"method"}]}},"NbAuthStrategy":{"__symbolic":"class","members":{"setOptions":[{"__symbolic":"method"}],"getOption":[{"__symbolic":"method"}],"createToken":[{"__symbolic":"method"}],"getName":[{"__symbolic":"method"}],"authenticate":[{"__symbolic":"method"}],"register":[{"__symbolic":"method"}],"requestPassword":[{"__symbolic":"method"}],"resetPassword":[{"__symbolic":"method"}],"logout":[{"__symbolic":"method"}],"refreshToken":[{"__symbolic":"method"}],"createFailResponse":[{"__symbolic":"method"}],"createSuccessResponse":[{"__symbolic":"method"}],"getActionEndpoint":[{"__symbolic":"method"}]}},"NbStrategyToken":{"__symbolic":"interface"},"NbAuthStrategyOptions":{"__symbolic":"class","members":{}},"NbDummyAuthStrategy":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthStrategy"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":28,"character":1}}],"members":{"authenticate":[{"__symbolic":"method"}],"register":[{"__symbolic":"method"}],"requestPassword":[{"__symbolic":"method"}],"resetPassword":[{"__symbolic":"method"}],"logout":[{"__symbolic":"method"}],"refreshToken":[{"__symbolic":"method"}],"createDummyResult":[{"__symbolic":"method"}]},"statics":{"setup":{"__symbolic":"function","parameters":["options"],"value":[{"__symbolic":"reference","name":"NbDummyAuthStrategy"},{"__symbolic":"reference","name":"options"}]}}},"NbDummyAuthStrategyOptions":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthStrategyOptions"},"members":{}},"dummyStrategyOptions":{"__symbolic":"new","expression":{"__symbolic":"reference","name":"NbDummyAuthStrategyOptions"}},"NbPasswordAuthStrategy":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthStrategy"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":141,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":150,"character":30},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":150,"character":57}]}],"authenticate":[{"__symbolic":"method"}],"register":[{"__symbolic":"method"}],"requestPassword":[{"__symbolic":"method"}],"resetPassword":[{"__symbolic":"method"}],"logout":[{"__symbolic":"method"}],"refreshToken":[{"__symbolic":"method"}],"handleResponseError":[{"__symbolic":"method"}]},"statics":{"setup":{"__symbolic":"function","parameters":["options"],"value":[{"__symbolic":"reference","name":"NbPasswordAuthStrategy"},{"__symbolic":"reference","name":"options"}]}}},"NbPasswordStrategyModule":{"__symbolic":"interface"},"NbPasswordStrategyReset":{"__symbolic":"interface"},"NbPasswordStrategyToken":{"__symbolic":"interface"},"NbPasswordStrategyMessage":{"__symbolic":"interface"},"NbPasswordAuthStrategyOptions":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthStrategyOptions"},"members":{}},"passwordStrategyOptions":{"__symbolic":"new","expression":{"__symbolic":"reference","name":"NbPasswordAuthStrategyOptions"}},"NbOAuth2AuthStrategy":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthStrategy"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":90,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":184,"character":15},"arguments":[{"__symbolic":"reference","module":"@nebular/theme","name":"NB_WINDOW","line":184,"character":22}]}]],"parameters":[{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":182,"character":30},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":183,"character":31},{"__symbolic":"reference","name":"any"}]}],"authenticate":[{"__symbolic":"method"}],"getAuthorizationResult":[{"__symbolic":"method"}],"refreshToken":[{"__symbolic":"method"}],"passwordToken":[{"__symbolic":"method"}],"authorizeRedirect":[{"__symbolic":"method"}],"isRedirectResult":[{"__symbolic":"method"}],"requestToken":[{"__symbolic":"method"}],"buildCodeRequestData":[{"__symbolic":"method"}],"buildRefreshRequestData":[{"__symbolic":"method"}],"buildPasswordRequestData":[{"__symbolic":"method"}],"buildAuthHeader":[{"__symbolic":"method"}],"cleanParams":[{"__symbolic":"method"}],"addCredentialsToParams":[{"__symbolic":"method"}],"handleResponseError":[{"__symbolic":"method"}],"buildRedirectUrl":[{"__symbolic":"method"}],"parseHashAsQueryParams":[{"__symbolic":"method"}],"urlEncodeParameters":[{"__symbolic":"method"}],"createRefreshedToken":[{"__symbolic":"method"}],"register":[{"__symbolic":"method"}],"requestPassword":[{"__symbolic":"method"}],"resetPassword":[{"__symbolic":"method"}],"logout":[{"__symbolic":"method"}]},"statics":{"setup":{"__symbolic":"function","parameters":["options"],"value":[{"__symbolic":"reference","name":"NbOAuth2AuthStrategy"},{"__symbolic":"reference","name":"options"}]}}},"NbOAuth2ResponseType":{"CODE":"code","TOKEN":"token"},"NbOAuth2GrantType":{"AUTHORIZATION_CODE":"authorization_code","PASSWORD":"password","REFRESH_TOKEN":"refresh_token"},"NbOAuth2ClientAuthMethod":{"NONE":"none","BASIC":"basic","REQUEST_BODY":"request-body"},"NbOAuth2AuthStrategyOptions":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"NbAuthStrategyOptions"},"members":{}},"auth2StrategyOptions":{"__symbolic":"new","expression":{"__symbolic":"reference","name":"NbOAuth2AuthStrategyOptions"}},"NbUser":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"number"},{"__symbolic":"reference","name":"string"},{"__symbolic":"reference","name":"string"},{"__symbolic":"reference","name":"boolean"},{"__symbolic":"reference","name":"boolean"},{"__symbolic":"reference","name":"string"},{"__symbolic":"reference","name":"string"}]}]}},"deepExtend":{"__symbolic":"error","message":"Lambda not supported","line":9,"character":26,"module":"./helpers"},"getDeepFromObject":{"__symbolic":"function"},"urlBase64Decode":{"__symbolic":"function"},"b64decode":{"__symbolic":"function"},"b64DecodeUnicode":{"__symbolic":"function","parameters":["str"],"value":{"__symbolic":"call","expression":{"__symbolic":"reference","name":"decodeURIComponent"},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"select","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"Array"},"member":"prototype"},"member":"map"},"member":"call"},"arguments":[{"__symbolic":"call","expression":{"__symbolic":"reference","name":"b64decode"},"arguments":[{"__symbolic":"reference","name":"str"}]},{"__symbolic":"error","message":"Lambda not supported","line":175,"character":69,"module":"./helpers"}]},"member":"join"},"arguments":[""]}]}}},"origins":{"NbAuthStrategyClass":"./auth.options","NbAuthStrategies":"./auth.options","NbAuthOptions":"./auth.options","NbAuthSocialLink":"./auth.options","defaultAuthOptions":"./auth.options","NB_AUTH_OPTIONS":"./auth.options","NB_AUTH_USER_OPTIONS":"./auth.options","NB_AUTH_STRATEGIES":"./auth.options","NB_AUTH_TOKENS":"./auth.options","NB_AUTH_INTERCEPTOR_HEADER":"./auth.options","NB_AUTH_TOKEN_INTERCEPTOR_FILTER":"./auth.options","nbStrategiesFactory":"./auth.module","nbTokensFactory":"./auth.module","nbOptionsFactory":"./auth.module","nbNoOpInterceptorFilter":"./auth.module","NbAuthModule":"./auth.module","routes":"./auth.routes","NbAuthComponent":"./components/auth.component","NbAuthBlockComponent":"./components/auth-block/auth-block.component","NbLoginComponent":"./components/login/login.component","NbLogoutComponent":"./components/logout/logout.component","NbRegisterComponent":"./components/register/register.component","NbRequestPasswordComponent":"./components/request-password/request-password.component","NbResetPasswordComponent":"./components/reset-password/reset-password.component","NbAuthService":"./services/auth.service","NbAuthResult":"./services/auth-result","NbAuthJWTInterceptor":"./services/interceptors/jwt-interceptor","NbAuthSimpleInterceptor":"./services/interceptors/simple-interceptor","NbAuthToken":"./services/token/token","NbAuthTokenNotFoundError":"./services/token/token","NbAuthIllegalTokenError":"./services/token/token","NbAuthEmptyTokenError":"./services/token/token","NbAuthIllegalJWTTokenError":"./services/token/token","NbAuthRefreshableToken":"./services/token/token","NbAuthTokenClass":"./services/token/token","nbAuthCreateToken":"./services/token/token","decodeJwtPayload":"./services/token/token","NbAuthSimpleToken":"./services/token/token","NbAuthJWTToken":"./services/token/token","NbAuthOAuth2Token":"./services/token/token","NbAuthOAuth2JWTToken":"./services/token/token","NbTokenStorage":"./services/token/token-storage","NbTokenLocalStorage":"./services/token/token-storage","NbTokenService":"./services/token/token.service","NbTokenPack":"./services/token/token-parceler","NB_AUTH_FALLBACK_TOKEN":"./services/token/token-parceler","NbAuthTokenParceler":"./services/token/token-parceler","NbAuthStrategy":"./strategies/auth-strategy","NbStrategyToken":"./strategies/auth-strategy-options","NbAuthStrategyOptions":"./strategies/auth-strategy-options","NbDummyAuthStrategy":"./strategies/dummy/dummy-strategy","NbDummyAuthStrategyOptions":"./strategies/dummy/dummy-strategy-options","dummyStrategyOptions":"./strategies/dummy/dummy-strategy-options","NbPasswordAuthStrategy":"./strategies/password/password-strategy","NbPasswordStrategyModule":"./strategies/password/password-strategy-options","NbPasswordStrategyReset":"./strategies/password/password-strategy-options","NbPasswordStrategyToken":"./strategies/password/password-strategy-options","NbPasswordStrategyMessage":"./strategies/password/password-strategy-options","NbPasswordAuthStrategyOptions":"./strategies/password/password-strategy-options","passwordStrategyOptions":"./strategies/password/password-strategy-options","NbOAuth2AuthStrategy":"./strategies/oauth2/oauth2-strategy","NbOAuth2ResponseType":"./strategies/oauth2/oauth2-strategy.options","NbOAuth2GrantType":"./strategies/oauth2/oauth2-strategy.options","NbOAuth2ClientAuthMethod":"./strategies/oauth2/oauth2-strategy.options","NbOAuth2AuthStrategyOptions":"./strategies/oauth2/oauth2-strategy.options","auth2StrategyOptions":"./strategies/oauth2/oauth2-strategy.options","NbUser":"./models/user","deepExtend":"./helpers","getDeepFromObject":"./helpers","urlBase64Decode":"./helpers","b64decode":"./helpers","b64DecodeUnicode":"./helpers"},"importAs":"@nebular/auth"}