{"version":3,"file":"oauth2-strategy.d.ts","sources":["oauth2-strategy.d.ts"],"names":[],"mappingssourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthRefreshableToken, NbAuthToken } from '../../services/token/token';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbOAuth2AuthStrategyOptions } from './oauth2-strategy.options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n/**\n * OAuth2 authentication strategy.\n *\n * Strategy settings:\n *\n * ```ts\n * export enum NbOAuth2ResponseType {\n *   CODE = 'code',\n *   TOKEN = 'token',\n * }\n *\n * export enum NbOAuth2GrantType {\n *   AUTHORIZATION_CODE = 'authorization_code',\n *   PASSWORD = 'password',\n *   REFRESH_TOKEN = 'refresh_token',\n * }\n *\n * export class NbOAuth2AuthStrategyOptions {\n *   name: string;\n *   baseEndpoint?: string = '';\n *   clientId: string = '';\n *   clientSecret: string = '';\n *   clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;\n *   redirect?: { success?: string; failure?: string } = {\n *     success: '/',\n *     failure: null,\n *   };\n *   defaultErrors?: any[] = ['Something went wrong, please try again.'];\n *   defaultMessages?: any[] = ['You have been successfully authenticated.'];\n *   authorize?: {\n *     endpoint?: string;\n *     redirectUri?: string;\n *     responseType?: string;\n *     requireValidToken: true,\n *     scope?: string;\n *     state?: string;\n *     params?: { [key: string]: string };\n *   } = {\n *     endpoint: 'authorize',\n *     responseType: NbOAuth2ResponseType.CODE,\n *   };\n *   token?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     requireValidToken: true,\n *     redirectUri?: string;\n *     scope?: string;\n *     class: NbAuthTokenClass,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n *     class: NbAuthOAuth2Token,\n *   };\n *   refresh?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     scope?: string;\n *     requireValidToken: true,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n *   };\n * }\n * ```\n *\n */\nexport declare class NbOAuth2AuthStrategy extends NbAuthStrategy {\n    protected http: HttpClient;\n    protected route: ActivatedRoute;\n    protected window: any;\n    static setup(options: NbOAuth2AuthStrategyOptions): [NbAuthStrategyClass, NbOAuth2AuthStrategyOptions];\n    get responseType(): any;\n    get clientAuthMethod(): any;\n    protected redirectResultHandlers: {\n        [key: string]: Function;\n    };\n    protected redirectResults: {\n        [key: string]: Function;\n    };\n    protected defaultOptions: NbOAuth2AuthStrategyOptions;\n    constructor(http: HttpClient, route: ActivatedRoute, window: any);\n    authenticate(data?: any): Observable<NbAuthResult>;\n    getAuthorizationResult(): Observable<any>;\n    refreshToken(token: NbAuthRefreshableToken): Observable<NbAuthResult>;\n    passwordToken(username: string, password: string): Observable<NbAuthResult>;\n    protected authorizeRedirect(): void;\n    protected isRedirectResult(): Observable<boolean>;\n    protected requestToken(code: string): Observable<NbAuthResult>;\n    protected buildCodeRequestData(code: string): any;\n    protected buildRefreshRequestData(token: NbAuthRefreshableToken): any;\n    protected buildPasswordRequestData(username: string, password: string): string;\n    protected buildAuthHeader(): any;\n    protected cleanParams(params: any): any;\n    protected addCredentialsToParams(params: any): any;\n    protected handleResponseError(res: any): Observable<NbAuthResult>;\n    protected buildRedirectUrl(): string;\n    protected parseHashAsQueryParams(hash: string): {\n        [key: string]: string;\n    };\n    protected urlEncodeParameters(params: any): string;\n    protected createRefreshedToken(res: any, existingToken: NbAuthRefreshableToken, requireValidToken: boolean): NbAuthToken;\n    register(data?: any): Observable<NbAuthResult>;\n    requestPassword(data?: any): Observable<NbAuthResult>;\n    resetPassword(data?: any): Observable<NbAuthResult>;\n    logout(): Observable<NbAuthResult>;\n}\n"]}