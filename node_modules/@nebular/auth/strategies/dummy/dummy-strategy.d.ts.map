{"version":3,"file":"dummy-strategy.d.ts","sources":["dummy-strategy.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbDummyAuthStrategyOptions } from './dummy-strategy-options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n/**\n * Dummy auth strategy. Could be useful for auth setup when backend is not available yet.\n *\n *\n * Strategy settings.\n *\n * ```ts\n * export class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n *   name = 'dummy';\n *   token = {\n *     class: NbAuthSimpleToken,\n *   };\n *   delay? = 1000;\n *   alwaysFail? = false;\n * }\n * ```\n */\nexport declare class NbDummyAuthStrategy extends NbAuthStrategy {\n    protected defaultOptions: NbDummyAuthStrategyOptions;\n    static setup(options: NbDummyAuthStrategyOptions): [NbAuthStrategyClass, NbDummyAuthStrategyOptions];\n    authenticate(data?: any): Observable<NbAuthResult>;\n    register(data?: any): Observable<NbAuthResult>;\n    requestPassword(data?: any): Observable<NbAuthResult>;\n    resetPassword(data?: any): Observable<NbAuthResult>;\n    logout(data?: any): Observable<NbAuthResult>;\n    refreshToken(data?: any): Observable<NbAuthResult>;\n    protected createDummyResult(data?: any): NbAuthResult;\n}\n"]}