{"version":3,"file":"acl.service.d.ts","sources":["acl.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NbAclOptions, NbAccessControl } from '../security.options';\n/**\n * Common acl service.\n */\nexport declare class NbAclService {\n    protected settings: NbAclOptions;\n    private static readonly ANY_RESOURCE;\n    private state;\n    constructor(settings?: NbAclOptions);\n    /**\n     * Set/Reset ACL list\n     * @param {NbAccessControl} list\n     */\n    setAccessControl(list: NbAccessControl): void;\n    /**\n     * Register a new role with a list of abilities (permission/resources combinations)\n     * @param {string} role\n     * @param {string} parent\n     * @param {[permission: string]: string|string[]} abilities\n     */\n    register(role: string, parent?: string, abilities?: {\n        [permission: string]: string | string[];\n    }): void;\n    /**\n     * Allow a permission for specific resources to a role\n     * @param {string} role\n     * @param {string} permission\n     * @param {string | string[]} resource\n     */\n    allow(role: string, permission: string, resource: string | string[]): void;\n    /**\n     * Check whether the role has a permission to a resource\n     * @param {string} role\n     * @param {string} permission\n     * @param {string} resource\n     * @returns {boolean}\n     */\n    can(role: string, permission: string, resource: string): any;\n    private getRole;\n    private validateRole;\n    private validateResource;\n    private exactCan;\n    private getRoleResources;\n    private getRoleAbilities;\n    private getRoleParent;\n}\n"]}