{"version":3,"file":"ckeditor.component.d.ts","sources":["ckeditor.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, NgZone, QueryList, AfterViewInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { CKButtonDirective } from './ckbutton.directive';\nimport { CKGroupDirective } from './ckgroup.directive';\n/**\n * CKEditor component\n * Usage :\n *  <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n */\nexport declare class CKEditorComponent implements OnChanges, AfterViewInit {\n    private zone;\n    config: any;\n    readonly: boolean;\n    debounce: string;\n    change: EventEmitter<any>;\n    editorChange: EventEmitter<any>;\n    ready: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    focus: EventEmitter<any>;\n    contentDom: EventEmitter<any>;\n    fileUploadRequest: EventEmitter<any>;\n    fileUploadResponse: EventEmitter<any>;\n    paste: EventEmitter<any>;\n    drop: EventEmitter<any>;\n    host: any;\n    toolbarButtons: QueryList<CKButtonDirective>;\n    toolbarGroups: QueryList<CKGroupDirective>;\n    _value: string;\n    instance: any;\n    debounceTimeout: any;\n    /**\n     * Constructor\n     */\n    constructor(zone: NgZone);\n    get value(): any;\n    set value(v: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * On component destroy\n     */\n    ngOnDestroy(): void;\n    /**\n     * On component view init\n     */\n    ngAfterViewInit(): void;\n    /**\n     * On component view checked\n     */\n    ngAfterViewChecked(): void;\n    /**\n     * Value update process\n     */\n    updateValue(value: any): void;\n    /**\n     * CKEditor init\n     */\n    ckeditorInit(config: any): void;\n    /**\n     * Implements ControlValueAccessor\n     */\n    writeValue(value: any): void;\n    onChange(_: any): void;\n    onTouched(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    private documentContains;\n}\n"]}