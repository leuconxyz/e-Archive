{"version":3,"file":"leaflet-baselayers.directive.d.ts","sources":["leaflet-baselayers.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DoCheck, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { Control, Layer } from 'leaflet';\nimport { LeafletDirective } from '../../core/leaflet.directive';\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\nexport declare class LeafletBaseLayersDirective implements DoCheck, OnDestroy, OnInit {\n    private differs;\n    private zone;\n    baseLayersValue: {\n        [name: string]: Layer;\n    };\n    baseLayersDiffer: KeyValueDiffer<string, Layer>;\n    baseLayers: {\n        [name: string]: Layer;\n    };\n    layersControlOptions: Control.LayersOptions;\n    baseLayer: Layer;\n    private leafletDirective;\n    private controlLayers;\n    constructor(leafletDirective: LeafletDirective, differs: KeyValueDiffers, zone: NgZone);\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    protected updateBaseLayers(): void;\n    /**\n     * Check the current base layer and change it to the new one if necessary\n     */\n    protected syncBaseLayer(): void;\n}\n"]}