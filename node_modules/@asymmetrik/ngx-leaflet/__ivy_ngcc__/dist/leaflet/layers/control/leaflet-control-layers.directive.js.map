{"version":3,"file":"leaflet-control-layers.directive.js","sources":["../../../../src/leaflet/layers/control/leaflet-control-layers.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, DoCheck, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';\n\nimport { Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n\n\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\n@Directive({\n\tselector: '[leafletLayersControl]'\n})\nexport class LeafletLayersControlDirective\n\timplements DoCheck, OnDestroy, OnInit {\n\n\t// Control Layers Configuration\n\tlayersControlConfigValue: LeafletControlLayersConfig;\n\n\tbaseLayersDiffer: KeyValueDiffer<string, Layer>;\n\toverlaysDiffer: KeyValueDiffer<string, Layer>;\n\n\t@Input('leafletLayersControl')\n\tset layersControlConfig(v: LeafletControlLayersConfig) {\n\n\t\t// Validation/init stuff\n\t\tif (null == v) { v = new LeafletControlLayersConfig(); }\n\t\tif (null == v.baseLayers) { v.baseLayers = {}; }\n\t\tif (null == v.overlays) { v.overlays = {}; }\n\n\t\t// Store the value\n\t\tthis.layersControlConfigValue = v;\n\n\t\t// Update the map\n\t\tthis.updateLayers();\n\n\t}\n\tget layersControlConfig(): LeafletControlLayersConfig {\n\t\treturn this.layersControlConfigValue;\n\t}\n\n\t@Input('leafletLayersControlOptions') layersControlOptions: any;\n\n\tprivate controlLayers: LeafletControlLayersWrapper;\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t\tthis.controlLayers = new LeafletControlLayersWrapper(zone);\n\n\t\t// Generate differs\n\t\tthis.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n\t\tthis.overlaysDiffer = this.differs.find({}).create<string, Layer>();\n\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t\t// Set up all the initial settings\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.controlLayers\n\t\t\t\t.init({}, this.layersControlOptions)\n\t\t\t\t.addTo(this.leafletDirective.getMap());\n\t\t});\n\n\t\tthis.updateLayers();\n\n\t}\n\n\tngOnDestroy() {\n\n\t\tthis.layersControlConfig = { baseLayers: {}, overlays: {} };\n\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.controlLayers.getLayersControl().remove();\n\t\t});\n\n\t}\n\n\tngDoCheck() {\n\t\tthis.updateLayers();\n\t}\n\n\tprotected updateLayers() {\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tconst layersControl = this.controlLayers.getLayersControl();\n\n\t\tif (null != map && null != layersControl) {\n\t\t\t// Run the baselayers differ\n\t\t\tif (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n\t\t\t\tconst changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n\t\t\t\tthis.controlLayers.applyBaseLayerChanges(changes);\n\t\t\t}\n\n\t\t\t// Run the overlays differ\n\t\t\tif (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n\t\t\t\tconst changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n\t\t\t\tthis.controlLayers.applyOverlayChanges(changes);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n"]}