{"version":3,"file":"leaflet-layer.directive.js","sources":["../../../src/leaflet/layers/leaflet-layer.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAErG,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC7D,OAAO,EAAE,uBAAuB,EAAE,MAAM,mCAAmC,CAAC;AAC5E;AAEE;AACe;AAChB;AACmG;AAC/B;AACpE;;;AACC;AAIS,IAQV,+BAAY,gBAAkC,EAAU,IAAY;AACrE,QADyD,SAAI,GAAJ,IAAI,CAAQ;AAAC,QACpE,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;AACxE,KAAE;AACF,IACC,wCAAQ,GAAR;AAED;AACM,QAAJ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;AAC/B,KACE;AAEF,IAAC,2CAAW,GAAX;AAAc,QAAd,iBAMC;AACF,QALE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACxB,YAAH,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;AACvB,SAAG,CAAC,CAAC;AACL,KACE;AAEF,IAAC,2CAAW,GAAX,UAAY,OAAwC;AACrD,QADC,iBAkBC;AACF,QAjBE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACzB;AAEQ,YAAL,IAAM,GAAC,GAAU,OAAO,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC;AACnD,YAAG,IAAM,GAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;AAC3C,YACG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACzB,gBAAF,EAAE,CAAC,CAAC,IAAI,IAAI,GAAC,CAAC,CAAC,CAAC;AACpB,oBAAK,GAAC,CAAC,MAAM,EAAE,CAAC;AAChB,iBAAK;AACL,gBAAI,EAAE,CAAC,CAAC,IAAI,IAAI,GAAC,CAAC,CAAC,CAAC;AACpB,oBAAK,KAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,GAAC,CAAC,CAAC;AAChD,iBAAK;AACL,aAAI,CAAC,CAAC;AACN,SAAG;AACH,KACE,CA7CQ;AAAC;kCAHV,SAAS,SAAC,pDAGuB;QAFjC,QAAQ,EAAE,gBAAgB,lCAKN,gBAjBZ,gBAAgB;eAaxB,fAb6B,gBAJH,MAAM;AAAK;AAAU;AAA6C,0BAqB3F,KAAK,SAAC,cAAc;AAAQ;;;;;;;;;;;oBAAM;AAAC,gCArBrC;AAAE;AAAM,SAkBK,qBAAqB;AAC/B","sourcesContent":["import { Directive, Input, NgZone, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\n\nimport { Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n\n\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\n@Directive({\n\tselector: '[leafletLayer]'\n})\nexport class LeafletLayerDirective\n\timplements OnChanges, OnDestroy, OnInit {\n\n\t@Input('leafletLayer') layer: Layer;\n\n\t// Wrapper for the leaflet directive (manages the parent directive)\n\tprivate leafletDirective: LeafletDirectiveWrapper;\n\n\tconstructor(leafletDirective: LeafletDirective, private zone: NgZone) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t}\n\n\tngOnInit() {\n\n\t\t// Init the map\n\t\tthis.leafletDirective.init();\n\n\t}\n\n\tngOnDestroy() {\n\n\t\tthis.zone.runOutsideAngular(() => {\n\t\t\tthis.layer.remove();\n\t\t});\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\tif (changes['layer']) {\n\n\t\t\t// Update the layer\n\t\t\tconst p: Layer = changes['layer'].previousValue;\n\t\t\tconst n = changes['layer'].currentValue;\n\n\t\t\tthis.zone.runOutsideAngular(() => {\n\t\t\t\tif (null != p) {\n\t\t\t\t\tp.remove();\n\t\t\t\t}\n\t\t\t\tif (null != n) {\n\t\t\t\t\tthis.leafletDirective.getMap().addLayer(n);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n"]}